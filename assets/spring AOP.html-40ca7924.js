import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as l,c as i,d as n,e as a,b as s,w as r,f as o}from"./app-fc2525bf.js";const u={},d=o(`<h2 id="aop的实现" tabindex="-1"><a class="header-anchor" href="#aop的实现" aria-hidden="true">#</a> <strong>AOP的实现</strong></h2><h3 id="没有循环依赖的bean的aop时机" tabindex="-1"><a class="header-anchor" href="#没有循环依赖的bean的aop时机" aria-hidden="true">#</a> <strong>没有循环依赖的bean的AOP时机</strong></h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractAutoProxyCreator</span> <span class="token keyword">extends</span> <span class="token class-name">ProxyProcessorSupport</span>
		<span class="token keyword">implements</span> <span class="token class-name">SmartInstantiationAwareBeanPostProcessor</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>InstantiationAwareBeanPostProcessor接口中包含方法postProcessAfterInitialization</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是普通bean，则返回beanName，如果是FactoryBean,则返回加上前缀&amp;的&amp;beanName</span>
        <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// earlyProxyReferences中缓存的是已经创建好的代理对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="出现循环依赖的bean的aop时机" tabindex="-1"><a class="header-anchor" href="#出现循环依赖的bean的aop时机" aria-hidden="true">#</a> <strong>出现循环依赖的bean的AOP时机</strong></h3>`,6),k=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="杂项" tabindex="-1"><a class="header-anchor" href="#杂项" aria-hidden="true">#</a> 杂项</h3>`,2),b={href:"https://blog.csdn.net/JustForSS/article/details/83008824",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/minghao0508/article/details/125834496",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"参考文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),a(" 参考文章")],-1),v={href:"https://javadoop.com/post/spring-aop-source",target:"_blank",rel:"noopener noreferrer"},f=n("br",null,null,-1),_={href:"https://www.jianshu.com/p/e09ff92dfa8d",target:"_blank",rel:"noopener noreferrer"},g=n("br",null,null,-1),y={href:"https://blog.csdn.net/wuyuwei/article/details/88319018",target:"_blank",rel:"noopener noreferrer"},w=n("br",null,null,-1),x={href:"https://blog.csdn.net/wuyuwei/article/details/88357698",target:"_blank",rel:"noopener noreferrer"};function P(j,A){const p=t("RouterLink"),e=t("ExternalLinkIcon");return l(),i("div",null,[d,n("p",null,[a("对应"),s(p,{to:"/java/spring/spring%E6%89%A9%E5%B1%95%E7%82%B9.html"},{default:r(()=>[a("spring扩展点")]),_:1}),a(" (循环依赖: 提前AOP)")]),k,n("p",null,[n("a",b,[a("spring中expose-proxy的作用与原理"),s(e)])]),n("p",null,[n("a",h,[a("Spring——事务注解@Transactional的源码分析"),s(e)])]),m,n("p",null,[n("a",v,[a("javadoop"),s(e)]),f,n("a",_,[a("简书"),s(e)]),g,n("a",y,[a("Spring AOP 最全源码详解之AOP元数据解析"),s(e)]),w,n("a",x,[a("Spring AOP 最全源码详解之创建代理对象"),s(e)])])])}const B=c(u,[["render",P],["__file","spring AOP.html.vue"]]);export{B as default};
