import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as a,c as i,d as n,e as o,b as c,f as l}from"./app-719d9fc9.js";const r="/assets/images/java/awesome-project/netty/netty_workflow.png",d="/assets/images/java/awesome-project/netty/SingleThreadEventLoop_register.png",p="/assets/images/java/awesome-project/netty/netty_event_executor.png",u="/assets/images/java/awesome-project/netty/netty_channel.png",v={},m=l('<figure><img src="'+r+'" alt="netty线程模型" width="700" tabindex="0" loading="lazy"><figcaption>netty线程模型</figcaption></figure><figure><img src="'+d+'" alt="register时序" width="500" tabindex="0" loading="lazy"><figcaption>register时序</figcaption></figure><p>doStartThread方法会将SingleThreadEventExecutor.this.run()提交到线程池中执行，而该run方法由NioEventLoop负责实现。</p><h3 id="各个类的功能" tabindex="-1"><a class="header-anchor" href="#各个类的功能" aria-hidden="true">#</a> 各个类的功能</h3><table><thead><tr><th style="text-align:center;">类</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">NioEventLoop</td><td style="text-align:center;">事件循环---专注于处理事件(定义了处理事件的逻辑)，与如何运行、如何调度无关</td></tr><tr><td style="text-align:center;">NioEventLoopGroup</td><td style="text-align:center;">NioEventLoop的管理器</td></tr><tr><td style="text-align:center;">EventLoop</td><td style="text-align:center;">任务执行器</td></tr><tr><td style="text-align:center;">EventLoopGroup</td><td style="text-align:center;">EventLoop的管理器</td></tr><tr><td style="text-align:center;">EventExecutor</td><td style="text-align:center;">任务调度器</td></tr><tr><td style="text-align:center;">EventExecutorGroup</td><td style="text-align:center;">管理EventExecutor</td></tr><tr><td style="text-align:center;">MultithreadEventExecutorGroup</td><td style="text-align:center;">EventExecutorGroup的实现类</td></tr><tr><td style="text-align:center;">SingleThreadEventLoop</td><td style="text-align:center;">任务执行器的实现</td></tr><tr><td style="text-align:center;">SingleThreadEventExecutor</td><td style="text-align:center;">任务调度器的实现</td></tr></tbody></table><figure><img src="'+p+`" alt="EventExecutor" width="700" tabindex="0" loading="lazy"><figcaption>EventExecutor</figcaption></figure><h3 id="channel" tabindex="-1"><a class="header-anchor" href="#channel" aria-hidden="true">#</a> Channel</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Channel</span> <span class="token punctuation">{</span>

    <span class="token comment">//该方法很重要，我们都知道，一个selector可以注册多个channel，但是一个channel只能对应</span>
    <span class="token comment">//一个selector，一个selector对应着一个单线程执行器，所以一个channel就会对应一个单线程执行器</span>
    <span class="token comment">//该方法就是用来得到该channel对应的单线程执行器</span>
    <span class="token class-name">EventLoop</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @Author: PP-jessica
     * @Description:该方法并不在此接口，而是在ChannelOutboundInvoker接口，现在先放在这里
     */</span>
    <span class="token class-name">ChannelFuture</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @Author: PP-jessica
     * @Description:该方法并不在此接口，而是在ChannelOutboundInvoker接口，现在先放在这里
     */</span>
    <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * @Author: PP-jessica
     * @Description:该方法并不在此接口，而是在ChannelOutboundInvoker接口，现在先放在这里
     */</span>
    <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span><span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//新增加的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">EventLoop</span> eventLoop<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="Channel实现类以及子类" width="500" tabindex="0" loading="lazy"><figcaption>Channel实现类以及子类</figcaption></figure><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h3>',10),k={href:"https://www.cnblogs.com/sfnz/p/15138279.html",target:"_blank",rel:"noopener noreferrer"};function g(h,b){const e=s("ExternalLinkIcon");return a(),i("div",null,[m,n("p",null,[n("a",k,[o("Netty之EventLoop"),c(e)])])])}const f=t(v,[["render",g],["__file","netty骨架.html.vue"]]);export{f as default};
