const n=JSON.parse('{"key":"v-b7b37eb6","path":"/java/awesome-project/feign/feign%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88ribbon%E5%92%8Cconsul.html","title":"feign整合ribbon和consul源码分析","lang":"zh-CN","frontmatter":{"title":"feign整合ribbon和consul源码分析","isTimeLine":true,"date":"2024-03-17T00:00:00.000Z","category":["java"],"tag":["spring","consul","ribbon","feign"],"description":"Ribbon中重要的自动注入的类 FeignRibbonClientAutoConfiguration @ConditionalOnClass({ ILoadBalancer.class, Feign.class }) @ConditionalOnProperty(value = \\"spring.cloud.loadbalancer.ribbon.enabled\\", \\t\\tmatchIfMissing = true) @Configuration(proxyBeanMethods = false) @AutoConfigureBefore(FeignAutoConfiguration.class) @EnableConfigurationProperties({ FeignHttpClientProperties.class }) // Order is important here, last should be the default, first should be optional // see // https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653 @Import({ HttpClientFeignLoadBalancedConfiguration.class, \\t\\tOkHttpFeignLoadBalancedConfiguration.class, \\t\\tDefaultFeignLoadBalancedConfiguration.class }) public class FeignRibbonClientAutoConfiguration { \\t@Bean \\t@Primary \\t@ConditionalOnMissingBean \\t@ConditionalOnMissingClass(\\"org.springframework.retry.support.RetryTemplate\\") \\tpublic CachingSpringLoadBalancerFactory cachingLBClientFactory( \\t\\t\\tSpringClientFactory factory) { \\t\\treturn new CachingSpringLoadBalancerFactory(factory); \\t} \\t@Bean \\t@Primary \\t@ConditionalOnMissingBean \\t@ConditionalOnClass(name = \\"org.springframework.retry.support.RetryTemplate\\") \\tpublic CachingSpringLoadBalancerFactory retryabeCachingLBClientFactory( \\t\\t\\tSpringClientFactory factory, LoadBalancedRetryFactory retryFactory) { \\t\\treturn new CachingSpringLoadBalancerFactory(factory, retryFactory); \\t} \\t@Bean \\t@ConditionalOnMissingBean \\tpublic Request.Options feignRequestOptions() { \\t\\treturn LoadBalancerFeignClient.DEFAULT_OPTIONS; \\t} }","head":[["meta",{"property":"og:url","content":"https://sparksding.github.io/blogs/java/awesome-project/feign/feign%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88ribbon%E5%92%8Cconsul.html"}],["meta",{"property":"og:site_name","content":"还不知道叫什么名字"}],["meta",{"property":"og:title","content":"feign整合ribbon和consul源码分析"}],["meta",{"property":"og:description","content":"Ribbon中重要的自动注入的类 FeignRibbonClientAutoConfiguration @ConditionalOnClass({ ILoadBalancer.class, Feign.class }) @ConditionalOnProperty(value = \\"spring.cloud.loadbalancer.ribbon.enabled\\", \\t\\tmatchIfMissing = true) @Configuration(proxyBeanMethods = false) @AutoConfigureBefore(FeignAutoConfiguration.class) @EnableConfigurationProperties({ FeignHttpClientProperties.class }) // Order is important here, last should be the default, first should be optional // see // https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653 @Import({ HttpClientFeignLoadBalancedConfiguration.class, \\t\\tOkHttpFeignLoadBalancedConfiguration.class, \\t\\tDefaultFeignLoadBalancedConfiguration.class }) public class FeignRibbonClientAutoConfiguration { \\t@Bean \\t@Primary \\t@ConditionalOnMissingBean \\t@ConditionalOnMissingClass(\\"org.springframework.retry.support.RetryTemplate\\") \\tpublic CachingSpringLoadBalancerFactory cachingLBClientFactory( \\t\\t\\tSpringClientFactory factory) { \\t\\treturn new CachingSpringLoadBalancerFactory(factory); \\t} \\t@Bean \\t@Primary \\t@ConditionalOnMissingBean \\t@ConditionalOnClass(name = \\"org.springframework.retry.support.RetryTemplate\\") \\tpublic CachingSpringLoadBalancerFactory retryabeCachingLBClientFactory( \\t\\t\\tSpringClientFactory factory, LoadBalancedRetryFactory retryFactory) { \\t\\treturn new CachingSpringLoadBalancerFactory(factory, retryFactory); \\t} \\t@Bean \\t@ConditionalOnMissingBean \\tpublic Request.Options feignRequestOptions() { \\t\\treturn LoadBalancerFeignClient.DEFAULT_OPTIONS; \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-18T13:42:28.000Z"}],["meta",{"property":"article:author","content":"还不知道叫什么名字"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"consul"}],["meta",{"property":"article:tag","content":"ribbon"}],["meta",{"property":"article:tag","content":"feign"}],["meta",{"property":"article:published_time","content":"2024-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-18T13:42:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"feign整合ribbon和consul源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-18T13:42:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"还不知道叫什么名字\\",\\"url\\":\\"https://sparksding.github.io/blogs\\"}]}"]]},"headers":[{"level":2,"title":"Ribbon中重要的自动注入的类","slug":"ribbon中重要的自动注入的类","link":"#ribbon中重要的自动注入的类","children":[]},{"level":2,"title":"Ribbon和Consul的配合","slug":"ribbon和consul的配合","link":"#ribbon和consul的配合","children":[]},{"level":2,"title":"Consul自动配置","slug":"consul自动配置","link":"#consul自动配置","children":[{"level":3,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}]}],"git":{"createdTime":1710769348000,"updatedTime":1710769348000,"contributors":[{"name":"sparksd","email":"sparks23332@163.com","commits":1}]},"readingTime":{"minutes":1.51,"words":452},"filePathRelative":"java/awesome-project/feign/feign如何整合ribbon和consul.md","localizedDate":"2024年3月17日","excerpt":"<h2> Ribbon中重要的自动注入的类</h2>\\n<p>FeignRibbonClientAutoConfiguration</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@ConditionalOnClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token class-name\\">ILoadBalancer</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Feign</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token annotation punctuation\\">@ConditionalOnProperty</span><span class=\\"token punctuation\\">(</span>value <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"spring.cloud.loadbalancer.ribbon.enabled\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t\\tmatchIfMissing <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token annotation punctuation\\">@Configuration</span><span class=\\"token punctuation\\">(</span>proxyBeanMethods <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token annotation punctuation\\">@AutoConfigureBefore</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">FeignAutoConfiguration</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token annotation punctuation\\">@EnableConfigurationProperties</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token class-name\\">FeignHttpClientProperties</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token comment\\">// Order is important here, last should be the default, first should be optional</span>\\n<span class=\\"token comment\\">// see</span>\\n<span class=\\"token comment\\">// https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653</span>\\n<span class=\\"token annotation punctuation\\">@Import</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">{</span> <span class=\\"token class-name\\">HttpClientFeignLoadBalancedConfiguration</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token class-name\\">OkHttpFeignLoadBalancedConfiguration</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span>\\n\\t\\t<span class=\\"token class-name\\">DefaultFeignLoadBalancedConfiguration</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">FeignRibbonClientAutoConfiguration</span> <span class=\\"token punctuation\\">{</span>\\n\\n\\t<span class=\\"token annotation punctuation\\">@Bean</span>\\n\\t<span class=\\"token annotation punctuation\\">@Primary</span>\\n\\t<span class=\\"token annotation punctuation\\">@ConditionalOnMissingBean</span>\\n\\t<span class=\\"token annotation punctuation\\">@ConditionalOnMissingClass</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"org.springframework.retry.support.RetryTemplate\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">CachingSpringLoadBalancerFactory</span> <span class=\\"token function\\">cachingLBClientFactory</span><span class=\\"token punctuation\\">(</span>\\n\\t\\t\\t<span class=\\"token class-name\\">SpringClientFactory</span> factory<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CachingSpringLoadBalancerFactory</span><span class=\\"token punctuation\\">(</span>factory<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token annotation punctuation\\">@Bean</span>\\n\\t<span class=\\"token annotation punctuation\\">@Primary</span>\\n\\t<span class=\\"token annotation punctuation\\">@ConditionalOnMissingBean</span>\\n\\t<span class=\\"token annotation punctuation\\">@ConditionalOnClass</span><span class=\\"token punctuation\\">(</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"org.springframework.retry.support.RetryTemplate\\"</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">CachingSpringLoadBalancerFactory</span> <span class=\\"token function\\">retryabeCachingLBClientFactory</span><span class=\\"token punctuation\\">(</span>\\n\\t\\t\\t<span class=\\"token class-name\\">SpringClientFactory</span> factory<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">LoadBalancedRetryFactory</span> retryFactory<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CachingSpringLoadBalancerFactory</span><span class=\\"token punctuation\\">(</span>factory<span class=\\"token punctuation\\">,</span> retryFactory<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token annotation punctuation\\">@Bean</span>\\n\\t<span class=\\"token annotation punctuation\\">@ConditionalOnMissingBean</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">Request<span class=\\"token punctuation\\">.</span>Options</span> <span class=\\"token function\\">feignRequestOptions</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> <span class=\\"token class-name\\">LoadBalancerFeignClient</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">DEFAULT_OPTIONS</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
