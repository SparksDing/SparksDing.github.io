export default "{\"documentCount\":324,\"nextId\":324,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-2e3eac9e\",\"2\":\"v-1bb99a84\",\"3\":\"v-1bb99a84#参考文章\",\"4\":\"v-1bb99a84@0\",\"5\":\"v-1bb99a84@1\",\"6\":\"v-813579fa\",\"7\":\"v-813579fa@0\",\"8\":\"v-813579fa@1\",\"9\":\"v-5b1f632e\",\"10\":\"v-5b1f632e#sparks\",\"11\":\"v-5b1f632e#教育经历\",\"12\":\"v-5b1f632e#实习经历\",\"13\":\"v-5b1f632e#技能\",\"14\":\"v-81df1d9e\",\"15\":\"v-81df1d9e#问题记录\",\"16\":\"v-81df1d9e#blog-todo\",\"17\":\"v-81df1d9e#todo-进度\",\"18\":\"v-81df1d9e#好的博文\",\"19\":\"v-81df1d9e@0\",\"20\":\"v-81df1d9e@1\",\"21\":\"v-6e779040\",\"22\":\"v-6e779040#参考文章\",\"23\":\"v-6e779040@0\",\"24\":\"v-6e779040@1\",\"25\":\"v-6a0304e7\",\"26\":\"v-6a0304e7@0\",\"27\":\"v-6a0304e7@1\",\"28\":\"v-1f125e33\",\"29\":\"v-1f125e33@0\",\"30\":\"v-1f125e33@1\",\"31\":\"v-7c39d64c\",\"32\":\"v-7c39d64c@0\",\"33\":\"v-7c39d64c@1\",\"34\":\"v-66ec65ba\",\"35\":\"v-66ec65ba#微服务架构常用组件\",\"36\":\"v-66ec65ba#参考文章\",\"37\":\"v-66ec65ba@0\",\"38\":\"v-66ec65ba@1\",\"39\":\"v-1fe0a7e2\",\"40\":\"v-1fe0a7e2#简介\",\"41\":\"v-1fe0a7e2#leader-election\",\"42\":\"v-1fe0a7e2#log-replication\",\"43\":\"v-1fe0a7e2#参考文章\",\"44\":\"v-1fe0a7e2@0\",\"45\":\"v-1fe0a7e2@1\",\"46\":\"v-20c990a0\",\"47\":\"v-20c990a0#leader-election问题记录\",\"48\":\"v-20c990a0#参考文章\",\"49\":\"v-20c990a0@0\",\"50\":\"v-20c990a0@1\",\"51\":\"v-0b3b9304\",\"52\":\"v-0b3b9304#🚀-react学习库\",\"53\":\"v-0b3b9304#💎-reactjs-interview-questions\",\"54\":\"v-0b3b9304#💎-react设计\",\"55\":\"v-0b3b9304#💎-react技巧\",\"56\":\"v-0b3b9304#💎-react开发路线图\",\"57\":\"v-0b3b9304#💎-react-typescript备忘录\",\"58\":\"v-0b3b9304#🚀-react工具库\",\"59\":\"v-0b3b9304#💎-beautiful-react-hooks\",\"60\":\"v-0b3b9304#💎-hos\",\"61\":\"v-0b3b9304@0\",\"62\":\"v-0b3b9304@1\",\"63\":\"v-12669166\",\"64\":\"v-12669166#🚀zustand为什么这么好用\",\"65\":\"v-12669166#💎-底层原理很简单\",\"66\":\"v-12669166#💎-不同环境处理\",\"67\":\"v-12669166@0\",\"68\":\"v-12669166@1\",\"69\":\"v-7fe510a1\",\"70\":\"v-7fe510a1@0\",\"71\":\"v-7fe510a1@1\",\"72\":\"v-726eeab6\",\"73\":\"v-726eeab6@0\",\"74\":\"v-726eeab6@1\",\"75\":\"v-7e42a1a8\",\"76\":\"v-7e42a1a8@0\",\"77\":\"v-7e42a1a8@1\",\"78\":\"v-e24c0be2\",\"79\":\"v-e24c0be2@0\",\"80\":\"v-e24c0be2@1\",\"81\":\"v-571e5c82\",\"82\":\"v-571e5c82#解决方案\",\"83\":\"v-571e5c82#版本号法\",\"84\":\"v-571e5c82#compare-and-set\",\"85\":\"v-571e5c82#悲观锁\",\"86\":\"v-571e5c82#乐观锁\",\"87\":\"v-571e5c82@0\",\"88\":\"v-571e5c82@1\",\"89\":\"v-6ed86456\",\"90\":\"v-6ed86456@0\",\"91\":\"v-6ed86456@1\",\"92\":\"v-4da44864\",\"93\":\"v-4da44864#arthas\",\"94\":\"v-4da44864#btrace\",\"95\":\"v-4da44864@0\",\"96\":\"v-4da44864@1\",\"97\":\"v-b63dae60\",\"98\":\"v-b63dae60@0\",\"99\":\"v-b63dae60@1\",\"100\":\"v-00f51c4a\",\"101\":\"v-00f51c4a@0\",\"102\":\"v-00f51c4a@1\",\"103\":\"v-e4a0aaca\",\"104\":\"v-e4a0aaca@0\",\"105\":\"v-e4a0aaca@1\",\"106\":\"v-758196bb\",\"107\":\"v-758196bb#参考文章\",\"108\":\"v-758196bb#解决org-jetbrains-intellij报红\",\"109\":\"v-758196bb#gradle坑点\",\"110\":\"v-758196bb@0\",\"111\":\"v-758196bb@1\",\"112\":\"v-3e66a440\",\"113\":\"v-3e66a440@0\",\"114\":\"v-3e66a440@1\",\"115\":\"v-381628cb\",\"116\":\"v-381628cb@0\",\"117\":\"v-381628cb@1\",\"118\":\"v-bd12a9d4\",\"119\":\"v-bd12a9d4@0\",\"120\":\"v-bd12a9d4@1\",\"121\":\"v-6c99d248\",\"122\":\"v-6c99d248@0\",\"123\":\"v-6c99d248@1\",\"124\":\"v-3104ed9e\",\"125\":\"v-3104ed9e#jdbc和orm\",\"126\":\"v-3104ed9e#连接池\",\"127\":\"v-3104ed9e#sharding-jdbc\",\"128\":\"v-3104ed9e#参考文章\",\"129\":\"v-3104ed9e@0\",\"130\":\"v-3104ed9e@1\",\"131\":\"v-38f57d9f\",\"132\":\"v-38f57d9f#aop的实现\",\"133\":\"v-38f57d9f#没有循环依赖的bean的aop时机\",\"134\":\"v-38f57d9f#出现循环依赖的bean的aop时机\",\"135\":\"v-38f57d9f#杂项\",\"136\":\"v-38f57d9f#参考文章\",\"137\":\"v-38f57d9f@0\",\"138\":\"v-38f57d9f@1\",\"139\":\"v-54d8f151\",\"140\":\"v-54d8f151#参考文章\",\"141\":\"v-54d8f151@0\",\"142\":\"v-54d8f151@1\",\"143\":\"v-1a0fef8c\",\"144\":\"v-1a0fef8c#参考网页\",\"145\":\"v-1a0fef8c@0\",\"146\":\"v-1a0fef8c@1\",\"147\":\"v-3cf31abe\",\"148\":\"v-3cf31abe#spring事务\",\"149\":\"v-3cf31abe#事务传播机制\",\"150\":\"v-3cf31abe#参考文章\",\"151\":\"v-3cf31abe@0\",\"152\":\"v-3cf31abe@1\",\"153\":\"v-c5104456\",\"154\":\"v-c5104456#bean生命周期\",\"155\":\"v-c5104456#bean创建过程扩展点\",\"156\":\"v-c5104456#beannameaware-beanfactoryaware-applicationcontextaware-initializingbean-beanpostprocessor\",\"157\":\"v-c5104456#beandefinitionregistrypostprocessor-beanfactorypostprocessor\",\"158\":\"v-c5104456#importbeandefinitionregistrar\",\"159\":\"v-c5104456#循环依赖\",\"160\":\"v-c5104456#aservice的bean的生命周期\",\"161\":\"v-c5104456#打破循环依赖\",\"162\":\"v-c5104456@0\",\"163\":\"v-c5104456@1\",\"164\":\"v-88439a0e\",\"165\":\"v-88439a0e#总结\",\"166\":\"v-88439a0e#anynestedcondition\",\"167\":\"v-88439a0e#一些使用样例\",\"168\":\"v-88439a0e#自定义\",\"169\":\"v-88439a0e#参考文章\",\"170\":\"v-88439a0e@0\",\"171\":\"v-88439a0e@1\",\"172\":\"v-593f01c6\",\"173\":\"v-593f01c6#invokebeanfactorypostprocessors\",\"174\":\"v-593f01c6#configurationclasspostprocessor\",\"175\":\"v-593f01c6#import\",\"176\":\"v-593f01c6@0\",\"177\":\"v-593f01c6@1\",\"178\":\"v-664865fc\",\"179\":\"v-664865fc#推断构造方法\",\"180\":\"v-664865fc#beannameaware-beanfactoryaware-applicationcontextaware\",\"181\":\"v-664865fc@0\",\"182\":\"v-664865fc@1\",\"183\":\"v-6f96e374\",\"184\":\"v-6f96e374@0\",\"185\":\"v-6f96e374@1\",\"186\":\"v-f79fd3e0\",\"187\":\"v-f79fd3e0#参考文章\",\"188\":\"v-f79fd3e0@0\",\"189\":\"v-f79fd3e0@1\",\"190\":\"v-367ba66e\",\"191\":\"v-367ba66e@0\",\"192\":\"v-367ba66e@1\",\"193\":\"v-dd9a53a4\",\"194\":\"v-dd9a53a4@0\",\"195\":\"v-dd9a53a4@1\",\"196\":\"v-68a24542\",\"197\":\"v-68a24542#vuepress-icon\",\"198\":\"v-68a24542@0\",\"199\":\"v-68a24542@1\",\"200\":\"v-883a444c\",\"201\":\"v-883a444c@0\",\"202\":\"v-883a444c@1\",\"203\":\"v-b7b37eb6\",\"204\":\"v-b7b37eb6#ribbon中重要的自动注入的类\",\"205\":\"v-b7b37eb6#ribbon和consul的配合\",\"206\":\"v-b7b37eb6#consul自动配置\",\"207\":\"v-b7b37eb6#参考文章\",\"208\":\"v-b7b37eb6@0\",\"209\":\"v-b7b37eb6@1\",\"210\":\"v-36d1ce44\",\"211\":\"v-36d1ce44@0\",\"212\":\"v-36d1ce44@1\",\"213\":\"v-531b530a\",\"214\":\"v-531b530a#各个类的功能\",\"215\":\"v-531b530a#channel\",\"216\":\"v-531b530a#参考文章\",\"217\":\"v-531b530a@0\",\"218\":\"v-531b530a@1\",\"219\":\"v-fa664154\",\"220\":\"v-fa664154#参考文章\",\"221\":\"v-fa664154@0\",\"222\":\"v-fa664154@1\",\"223\":\"v-f74d0ef6\",\"224\":\"v-f74d0ef6#参考文章\",\"225\":\"v-f74d0ef6@0\",\"226\":\"v-f74d0ef6@1\",\"227\":\"v-42dee96f\",\"228\":\"v-42dee96f#参考文章\",\"229\":\"v-42dee96f@0\",\"230\":\"v-42dee96f@1\",\"231\":\"v-b95b08e2\",\"232\":\"v-b95b08e2#参考文章\",\"233\":\"v-b95b08e2@0\",\"234\":\"v-b95b08e2@1\",\"235\":\"v-2acaf892\",\"236\":\"v-2acaf892#tomcat-xml配置样例\",\"237\":\"v-2acaf892#engine\",\"238\":\"v-2acaf892#host\",\"239\":\"v-2acaf892#context\",\"240\":\"v-2acaf892#wrapper\",\"241\":\"v-2acaf892#tomcat处理一次http请求\",\"242\":\"v-2acaf892#参考文章\",\"243\":\"v-2acaf892@0\",\"244\":\"v-2acaf892@1\",\"245\":\"v-dbd36ba6\",\"246\":\"v-dbd36ba6#mybatis的设计\",\"247\":\"v-dbd36ba6#mybatis事务\",\"248\":\"v-dbd36ba6#dogettransaction源码分析\",\"249\":\"v-dbd36ba6#mybatis的事务如何被spring管理\",\"250\":\"v-dbd36ba6#杂项\",\"251\":\"v-dbd36ba6#参考文章\",\"252\":\"v-dbd36ba6@0\",\"253\":\"v-dbd36ba6@1\",\"254\":\"v-b5e42848\",\"255\":\"v-b5e42848#实现一个简单的mybatis\",\"256\":\"v-b5e42848#jdbc是什么\",\"257\":\"v-b5e42848#orm是什么\",\"258\":\"v-b5e42848#简单orm设计\",\"259\":\"v-b5e42848#动态代理\",\"260\":\"v-b5e42848#sqlsession\",\"261\":\"v-b5e42848#集成spring\",\"262\":\"v-b5e42848@0\",\"263\":\"v-b5e42848@1\",\"264\":\"v-26d850f3\",\"265\":\"v-26d850f3#整合spring\",\"266\":\"v-26d850f3#生产statemachine\",\"267\":\"v-26d850f3@0\",\"268\":\"v-26d850f3@1\",\"269\":\"v-18abfcce\",\"270\":\"v-18abfcce#参考文章\",\"271\":\"v-18abfcce@0\",\"272\":\"v-18abfcce@1\",\"273\":\"v-43074c80\",\"274\":\"v-43074c80#安装\",\"275\":\"v-43074c80#参考文章\",\"276\":\"v-43074c80@0\",\"277\":\"v-43074c80@1\",\"278\":\"v-30532379\",\"279\":\"v-30532379#参考文章\",\"280\":\"v-30532379@0\",\"281\":\"v-30532379@1\",\"282\":\"v-6de802a6\",\"283\":\"v-6de802a6#参考文章\",\"284\":\"v-6de802a6@0\",\"285\":\"v-6de802a6@1\",\"286\":\"v-ca430e60\",\"287\":\"v-ca430e60#参考文章\",\"288\":\"v-ca430e60@0\",\"289\":\"v-ca430e60@1\",\"290\":\"v-630ed466\",\"291\":\"v-630ed466#参考文章\",\"292\":\"v-630ed466@0\",\"293\":\"v-630ed466@1\",\"294\":\"v-c65969c6\",\"295\":\"v-f9e30908\",\"296\":\"v-14c69af4\",\"297\":\"v-21ba2ec8\",\"298\":\"v-2e25198a\",\"299\":\"v-1dfff8a6\",\"300\":\"v-50ebb6e1\",\"301\":\"v-bb1788d6\",\"302\":\"v-d7eaa5d8\",\"303\":\"v-06198984\",\"304\":\"v-5340abb0\",\"305\":\"v-115c241d\",\"306\":\"v-6cec0ebc\",\"307\":\"v-679ebda4\",\"308\":\"v-1f938600\",\"309\":\"v-211a2a4e\",\"310\":\"v-9f797e04\",\"311\":\"v-25b47c13\",\"312\":\"v-00553f53\",\"313\":\"v-a5d45156\",\"314\":\"v-593fbeb2\",\"315\":\"v-49bb2d54\",\"316\":\"v-66ebb5e1\",\"317\":\"v-67bcde3a\",\"318\":\"v-4ff16245\",\"319\":\"v-394e6cea\",\"320\":\"v-78b30826\",\"321\":\"v-76d3a0d2\",\"322\":\"v-3d7467c2\",\"323\":\"v-1fa28132\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1],\"3\":[1,1],\"4\":[null,null,2],\"5\":[null,null,1],\"6\":[1],\"7\":[null,null,2],\"8\":[null,null,1],\"9\":[1],\"10\":[1],\"11\":[1,10],\"12\":[1,15],\"13\":[1,5],\"14\":[1],\"15\":[1,1],\"16\":[2,12],\"17\":[2,12],\"18\":[1,1],\"19\":[null,null,1],\"20\":[null,null,1],\"21\":[1],\"22\":[1,1],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1],\"26\":[null,null,1],\"27\":[null,null,1],\"28\":[1],\"29\":[null,null,1],\"30\":[null,null,1],\"31\":[1],\"32\":[null,null,1],\"33\":[null,null,1],\"34\":[1],\"35\":[1,23],\"36\":[1,1],\"37\":[null,null,1],\"38\":[null,null,1],\"39\":[1],\"40\":[1,13],\"41\":[2,20],\"42\":[2,13],\"43\":[1,2],\"44\":[null,null,2],\"45\":[null,null,1],\"46\":[1],\"47\":[2,145],\"48\":[1,1],\"49\":[null,null,2],\"50\":[null,null,1],\"51\":[1,3],\"52\":[2],\"53\":[4,15],\"54\":[2,15],\"55\":[2,12],\"56\":[2,18],\"57\":[2,15],\"58\":[2],\"59\":[4,61],\"60\":[2,63],\"61\":[null,null,1],\"62\":[null,null,2],\"63\":[2,3],\"64\":[3,5],\"65\":[2,47],\"66\":[2,83],\"67\":[null,null,1],\"68\":[null,null,1],\"69\":[2],\"70\":[null,null,1],\"71\":[null,null,1],\"72\":[1],\"73\":[null,null,1],\"74\":[null,null,1],\"75\":[1],\"76\":[null,null,1],\"77\":[null,null,1],\"78\":[1,1],\"79\":[null,null,1],\"80\":[null,null,2],\"81\":[1,68],\"82\":[1],\"83\":[1,1],\"84\":[3,1],\"85\":[1],\"86\":[1],\"87\":[null,null,1],\"88\":[null,null,1],\"89\":[1],\"90\":[null,null,1],\"91\":[null,null,1],\"92\":[1],\"93\":[1],\"94\":[1],\"95\":[null,null,1],\"96\":[null,null,1],\"97\":[1],\"98\":[null,null,1],\"99\":[null,null,1],\"100\":[1],\"101\":[null,null,1],\"102\":[null,null,1],\"103\":[1,16],\"104\":[null,null,1],\"105\":[null,null,1],\"106\":[1],\"107\":[1,1],\"108\":[3,2],\"109\":[1,1],\"110\":[null,null,1],\"111\":[null,null,1],\"112\":[1,12],\"113\":[null,null,1],\"114\":[null,null,1],\"115\":[1],\"116\":[null,null,1],\"117\":[null,null,1],\"118\":[2],\"119\":[null,null,1],\"120\":[null,null,3],\"121\":[1,45],\"122\":[null,null,1],\"123\":[null,null,1],\"124\":[5],\"125\":[1,1],\"126\":[1,22],\"127\":[2,62],\"128\":[1,4],\"129\":[null,null,1],\"130\":[null,null,3],\"131\":[2],\"132\":[1],\"133\":[1,34],\"134\":[1,20],\"135\":[1,5],\"136\":[1,4],\"137\":[null,null,1],\"138\":[null,null,2],\"139\":[2],\"140\":[1,1],\"141\":[null,null,1],\"142\":[null,null,2],\"143\":[2,136],\"144\":[1,2],\"145\":[null,null,1],\"146\":[null,null,2],\"147\":[1],\"148\":[1,337],\"149\":[1,8],\"150\":[1,1],\"151\":[null,null,1],\"152\":[null,null,2],\"153\":[1],\"154\":[1,1],\"155\":[1,13],\"156\":[5,13],\"157\":[2,6],\"158\":[1,4],\"159\":[1,15],\"160\":[1,20],\"161\":[1,95],\"162\":[null,null,1],\"163\":[null,null,1],\"164\":[1],\"165\":[1,30],\"166\":[1,54],\"167\":[1,8],\"168\":[1,43],\"169\":[1,2],\"170\":[null,null,1],\"171\":[null,null,1],\"172\":[1],\"173\":[1,5],\"174\":[1,37],\"175\":[2,18],\"176\":[null,null,1],\"177\":[null,null,1],\"178\":[1],\"179\":[1,9],\"180\":[3,8],\"181\":[null,null,1],\"182\":[null,null,1],\"183\":[1,5],\"184\":[null,null,1],\"185\":[null,null,1],\"186\":[1],\"187\":[1,4],\"188\":[null,null,1],\"189\":[null,null,1],\"190\":[1,4],\"191\":[null,null,1],\"192\":[null,null,1],\"193\":[1,5],\"194\":[null,null,1],\"195\":[null,null,1],\"196\":[1],\"197\":[2,11],\"198\":[null,null,1],\"199\":[null,null,1],\"200\":[1,9],\"201\":[null,null,1],\"202\":[null,null,1],\"203\":[1],\"204\":[1,119],\"205\":[1,61],\"206\":[1,40],\"207\":[1,5],\"208\":[null,null,1],\"209\":[null,null,4],\"210\":[1,127],\"211\":[null,null,1],\"212\":[null,null,1],\"213\":[3,8],\"214\":[1,24],\"215\":[1,34],\"216\":[1,1],\"217\":[null,null,1],\"218\":[null,null,1],\"219\":[4],\"220\":[1,5],\"221\":[null,null,1],\"222\":[null,null,2],\"223\":[1],\"224\":[1,2],\"225\":[null,null,1],\"226\":[null,null,2],\"227\":[3],\"228\":[1,3],\"229\":[null,null,1],\"230\":[null,null,2],\"231\":[2],\"232\":[1,2],\"233\":[null,null,1],\"234\":[null,null,2],\"235\":[1,5],\"236\":[2,112],\"237\":[1,5],\"238\":[1,5],\"239\":[1,5],\"240\":[1,5],\"241\":[1,1],\"242\":[1,1],\"243\":[null,null,1],\"244\":[null,null,1],\"245\":[1],\"246\":[1,90],\"247\":[1],\"248\":[1,1],\"249\":[1,2],\"250\":[1,1],\"251\":[1,1],\"252\":[null,null,1],\"253\":[null,null,1],\"254\":[1],\"255\":[1],\"256\":[1,73],\"257\":[1,86],\"258\":[1],\"259\":[1,17],\"260\":[1,109],\"261\":[1,158],\"262\":[null,null,1],\"263\":[null,null,1],\"264\":[2],\"265\":[1,184],\"266\":[1,83],\"267\":[null,null,1],\"268\":[null,null,2],\"269\":[1],\"270\":[1,2],\"271\":[null,null,1],\"272\":[null,null,3],\"273\":[1],\"274\":[1,37],\"275\":[1,3],\"276\":[null,null,1],\"277\":[null,null,3],\"278\":[1,192],\"279\":[1,3],\"280\":[null,null,1],\"281\":[null,null,3],\"282\":[1,129],\"283\":[1,6],\"284\":[null,null,1],\"285\":[null,null,2],\"286\":[1],\"287\":[1,4],\"288\":[null,null,1],\"289\":[null,null,2],\"290\":[2],\"291\":[1,6],\"292\":[null,null,1],\"293\":[null,null,3],\"294\":[2],\"295\":[1],\"296\":[1],\"297\":[1],\"298\":[1],\"299\":[1],\"300\":[1],\"301\":[1],\"302\":[1],\"303\":[1],\"304\":[1],\"305\":[2],\"306\":[1],\"307\":[1],\"308\":[1],\"309\":[1],\"310\":[1],\"311\":[1],\"312\":[1],\"313\":[1],\"314\":[1],\"315\":[2],\"316\":[1],\"317\":[1],\"318\":[1],\"319\":[3],\"320\":[2],\"321\":[1],\"322\":[2],\"323\":[2]},\"averageFieldLength\":[1.3107872554656517,19.2229820200109,1.0644840236354876],\"storedFields\":{\"0\":{\"h\":\"首页\"},\"1\":{\"h\":\"幻灯片页\"},\"2\":{\"h\":\"CAP理论\"},\"3\":{\"h\":\"参考文章\",\"t\":[\"一文看懂｜分布式系统之CAP理论\"]},\"4\":{\"c\":[\"distributed-system\"]},\"5\":{\"c\":[\"CAP\"]},\"6\":{\"h\":\"分布式概述\"},\"7\":{\"c\":[\"distributed-system\"]},\"8\":{\"c\":[\"overview\"]},\"9\":{\"h\":\"个人介绍\"},\"10\":{\"h\":\"Sparks\"},\"11\":{\"h\":\"教育经历\",\"t\":[\"学校\",\"时间\",\"南京理工大学\",\"2021.9-2024.4\",\"南京邮电大学\",\"2017.9-2021.6\"]},\"12\":{\"h\":\"实习经历\",\"t\":[\"公司\",\"岗位\",\"时间\",\"美团\",\"java后端开发\",\"2023.4-2023.8\",\"Bilibili\",\"golang后端开发\",\"2022.10-2023.1\",\"momenta\",\"c++后端开发\",\"2022.1-2022.10\"]},\"13\":{\"h\":\"技能\",\"t\":[\"java\",\"c\",\"c++\",\"golang\",\"python\"]},\"14\":{\"h\":\"问题记录\"},\"15\":{\"h\":\"问题记录\",\"t\":[\"spring什么情况下会产生代理对象\"]},\"16\":{\"h\":\"Blog TODO\",\"t\":[\" rocketmq\",\" 秒杀场景设计整理(黑马程序员)\",\" shardingSphere源码\",\" mysql笔记\",\" dubbo源码\",\" tomcat大周瑜\",\" raft算法\",\" jvm\",\" 事务\",\" aop\"]},\"17\":{\"h\":\"TODO 进度\",\"t\":[\"shardingSphere 整合\",\"秒杀场景设计整理 \",\"秒杀\",\"一人一单\",\"raft算法 \",\"leader election\",\"事务 \",\"spring整合事务源码\",\"aop \",\"spring整合aop\"]},\"18\":{\"h\":\"好的博文\",\"t\":[\"Java学习笔记\"]},\"19\":{\"c\":[\"java\"]},\"20\":{\"c\":[\"problems\"]},\"21\":{\"h\":\"mysql导入导出\"},\"22\":{\"h\":\"参考文章\",\"t\":[\"mysql导入导出文件\"]},\"23\":{\"c\":[\"database\"]},\"24\":{\"c\":[\"mysql\"]},\"25\":{\"h\":\"mysql性能调优\"},\"26\":{\"c\":[\"database\"]},\"27\":{\"c\":[\"mysql\"]},\"28\":{\"h\":\"mysql的锁\"},\"29\":{\"c\":[\"database\"]},\"30\":{\"c\":[\"mysql\"]},\"31\":{\"h\":\"k8s解决的问题\"},\"32\":{\"c\":[\"k8s\"]},\"33\":{\"c\":[\"overview\"]},\"34\":{\"h\":\"微服务组件\"},\"35\":{\"h\":\"微服务架构常用组件\",\"t\":[\"服务注册与发现：例如Eureka、Consul等\",\"负载均衡：例如Ribbon、Nginx等\",\"API网关：例如Zuul、Kong等\",\"分布式配置中心：例如Spring Cloud Config、Apollo等\",\"分布式追踪系统：例如Zipkin、Jaeger等\",\"分布式事务：例如TCC、Seata等\",\"消息队列：例如RabbitMQ、Kafka等\"]},\"36\":{\"h\":\"参考文章\",\"t\":[\"微服务五大组件微服务常用组件微服务组件\"]},\"37\":{\"c\":[\"microservice\"]},\"38\":{\"c\":[\"overview\"]},\"39\":{\"h\":\"raft介绍\"},\"40\":{\"h\":\"简介\",\"t\":[\"单个服务节点\",\"服务节点可以是数据库\",\"客户端\",\"分布式一致性\",\"节点初始状态\",\"节点->候选者candidate\",\"candidate发起投票\",\"candidate收到投票信息\",\"客户端发送数据给leader\",\"leader同步数据到follower\",\"leader接收follower响应\",\"leader同步节点状态\"]},\"41\":{\"h\":\"Leader Election\",\"t\":[\"没有节点时，等待150~300ms转变为candidate\",\"超时问题\",\"超时条件\",\"超时后，follower->candidate\",\"转变为candidate的同时发送vote请求\",\"收到vote请求的节点返回vote信息\",\"重置超时时间\",\"candidate成为leader\",\"发送心跳信息\",\"定时发送心跳信息\",\"follower返回确认心跳信息\",\"重复一直到出现candidate\",\"脑裂示例\",\"发起投票\",\"每个candidate只有半数票，无法成为leader\",\"重新发起选举\"]},\"42\":{\"h\":\"Log Replication\",\"t\":[\"client发送变更到leader\",\"leader同步变更到follower\",\"follower确认收到的变更\",\"leader返回response给client\",\"leader更新自身状态同时同步follower\",\"脑裂情况下的LogReplication\",\"两个client分别发送变更给两个leader\",\"当网络屏障恢复\",\"少数节点会回滚自身状态，与多数节点保持一致\",\"该日志条目当前未提交，因此不会更新节点的值。\"]},\"43\":{\"h\":\"参考文章\",\"t\":[\"raft动画演示\",\"由Consul谈到Raft\"]},\"44\":{\"c\":[\"distributed-system\"]},\"45\":{\"c\":[\"raft\"]},\"46\":{\"h\":\"raft实验\"},\"47\":{\"h\":\"Leader Election问题记录\",\"t\":[\" S3 NO PROBLEM S2 term 0 isLeader false state FOLLOWER S1 term 0 isLeader false state FOLLOWER S0 term 0 isLeader false state FOLLOWER S1 term 0 from FOLLOWER to CANDIDATE S1 term 0 isLeader false state CANDIDATE S2 term 1 isLeader false state FOLLOWER S1 term 1 from CANDIDATE to LEADER voteCount 2 S1 term 1 isLeader true state LEADER S0 term 1 isLeader false state FOLLOWER S0 Receive Heartbeat MyTerm 1 HTerm 1 S2 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S2 term 1 isLeader false state FOLLOWER S1 term 1 isLeader true state LEADER S0 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S2 Receive Heartbeat MyTerm 1 HTerm 1 S2 term 1 isLeader false state FOLLOWER S1 term 1 isLeader true state LEADER S2 Receive Heartbeat MyTerm 1 HTerm 1 S2 term 1 isLeader false state FOLLOWER S0 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S1 term 1 isLeader true state LEADER S0 Receive Heartbeat MyTerm 1 HTerm 1 S2 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S2 term 1 isLeader false state FOLLOWER S3 DISCONNECT 1 S3 CONFIDENT S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 1 from FOLLOWER to CANDIDATE S0 term 1 isLeader false state CANDIDATE S2 term 1 from FOLLOWER to CANDIDATE S2 term 1 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S2 term 3 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 3 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 3 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 3 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 3 isLeader false state CANDIDATE S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER \",\"目前的问题是：S1被disconnect之后，S0和S2没有办法选举出leader，从LOG看他们都在发RequestVote\",\"目前投票的核心代码如下：\",\"func (rf *Raft) RequestVote(args *RequestVoteArgs, reply *RequestVoteReply) { // Your code here (2A, 2B). rf.mu.Lock() defer rf.mu.Unlock() // 1. 如果任期比自己的任期小，返回自己的任期 if args.Term <= rf.currentTerm { reply.VoteGranted = false reply.Term = rf.currentTerm return } // 2. 设置自身为FOLLOWER if rf.state != FOLLOWER { Debug(dVote, \\\"S%d term %d from %v to %v\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(FOLLOWER)) } rf.state = FOLLOWER // 3. 设置任期为args中的任期 rf.currentTerm = args.Term // 4. 投票 reply.VoteGranted = true reply.Term = args.Term // 5. 清理timer rf.chanGrantVote <- true return } func (rf *Raft) sendRequestVote(server int, args *RequestVoteArgs, reply *RequestVoteReply) bool { rf.mu.Lock() defer rf.mu.Unlock() // Debug(dVote, \\\"S%d term %d, SendRequestVote to %v\\\", rf.me, rf.currentTerm, server) ok := rf.peers[server].Call(\\\"Raft.RequestVote\\\", args, reply) if ok { // 1. 处理投票 if reply.VoteGranted == true { rf.voteCount++ // 2.2. 有超过半数的票 if rf.voteCount >= len(rf.peers)/2+1 { if rf.state != LEADER { Debug(dVote, \\\"S%d term %d from %v to %v voteCount %d\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(LEADER), rf.voteCount) } rf.state = LEADER rf.chanWinElect <- true } } else { if rf.currentTerm < reply.Term { rf.currentTerm = reply.Term } } } return ok } \",\"心跳的核心代码如下：\",\"func (rf *Raft) InstallSnapshot(args *InstallSnapshotArgs, reply *InstallSnapshotReply) { rf.mu.Lock() defer rf.mu.Unlock() Debug(dVote, \\\"S%d Receive Heartbeat MyTerm %d HTerm %d\\\", rf.me, rf.currentTerm, args.Term) // 1. 如果任期比自己的任期小，返回自己的任期 if args.Term < rf.currentTerm { reply.Term = rf.currentTerm return } if args.Term > rf.currentTerm && rf.state == LEADER { if rf.state != FOLLOWER { Debug(dVote, \\\"S%d term %d from %v to %v\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(FOLLOWER)) } rf.state = FOLLOWER return } rf.currentTerm = args.Term // 2. heartbeat rf.chanHeartbeat <- true } func (rf *Raft) sendInstallSnapshot(server int, args *InstallSnapshotArgs, reply *InstallSnapshotReply) bool { // Debug(dLeader, \\\"S%d term %d, SendHeartbeat to %v\\\", rf.me, rf.currentTerm, server) ok := rf.peers[server].Call(\\\"Raft.InstallSnapshot\\\", args, reply) rf.mu.Lock() defer rf.mu.Unlock() if ok { // 1. 任期比自己大 if reply.Term > rf.currentTerm { if rf.state != FOLLOWER { Debug(dVote, \\\"S%d term %d from %v to %v\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(FOLLOWER)) } rf.state = FOLLOWER } } return ok } \",\"主逻辑如下\",\"func (rf *Raft) ticker() { for rf.killed() == false { _, isLeader := rf.GetState() Debug(dVote, \\\"S%d term %d isLeader %v state %v\\\", rf.me, rf.currentTerm, isLeader, rf.enumToString(rf.state)) // Your code here (2A) // Check if a leader election should be started. switch rf.state { case FOLLOWER: select { case <-rf.chanGrantVote: case <-rf.chanHeartbeat: case <-time.After(time.Millisecond * time.Duration(rand.Intn(300)+200)): rf.mu.Lock() if rf.state != CANDIDATE { Debug(dVote, \\\"S%d term %d from %v to %v\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(CANDIDATE)) } rf.state = CANDIDATE rf.mu.Unlock() } case CANDIDATE: go rf.broadcastRequestVote() select { case <-rf.chanWinElect: case <-rf.chanHeartbeat: rf.mu.Lock() if rf.state != FOLLOWER { Debug(dVote, \\\"S%d term %d from %v to %v\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(FOLLOWER)) } rf.state = FOLLOWER rf.mu.Unlock() case <-rf.chanGrantVote: rf.mu.Lock() if rf.state != FOLLOWER { Debug(dVote, \\\"S%d term %d from %v to %v\\\", rf.me, rf.currentTerm, rf.enumToString(rf.state), rf.enumToString(FOLLOWER)) } rf.state = FOLLOWER rf.mu.Unlock() case <-time.After(time.Millisecond * time.Duration(rand.Intn(300)+200)): } case LEADER: go rf.broadcastHeartbeat() time.Sleep(time.Millisecond * 60) } } } \",\"经过一段时间的debug，发现是出现了死锁，从Log中可以看到一直在before enter lock\",\"S0 term 0 isLeader false state FOLLOWER S3 NO PROBLEM S2 term 0 isLeader false state FOLLOWER S1 term 0 isLeader false state FOLLOWER S1 term 0 from FOLLOWER to CANDIDATE S1 term 0 isLeader false state CANDIDATE S1 term 0, Before Enter Lock S1 term 1, broadcastRequestVote S2 term 1 isLeader false state FOLLOWER S1 term 1 from CANDIDATE to LEADER voteCount 2 S1 term 1 isLeader true state LEADER S0 term 1 isLeader false state FOLLOWER S2 Receive Heartbeat MyTerm 1 HTerm 1 S2 term 1 isLeader false state FOLLOWER S0 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S1 term 1 isLeader true state LEADER S2 Receive Heartbeat MyTerm 1 HTerm 1 S2 term 1 isLeader false state FOLLOWER S0 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S1 term 1 isLeader true state LEADER S2 Receive Heartbeat MyTerm 1 HTerm 1 S2 term 1 isLeader false state FOLLOWER S0 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S1 term 1 isLeader true state LEADER S2 Receive Heartbeat MyTerm 1 HTerm 1 S2 term 1 isLeader false state FOLLOWER S0 Receive Heartbeat MyTerm 1 HTerm 1 S0 term 1 isLeader false state FOLLOWER S3 DISCONNECT 1 S3 CONFIDENT S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 1 from FOLLOWER to CANDIDATE S2 term 1 isLeader false state CANDIDATE S2 term 1, Before Enter Lock S2 term 2, broadcastRequestVote S0 term 1 from FOLLOWER to CANDIDATE S0 term 1 isLeader false state CANDIDATE S0 term 1, Before Enter Lock S0 term 2, broadcastRequestVote S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S0 term 2 isLeader false state CANDIDATE S0 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S2 term 2 isLeader false state CANDIDATE S2 term 2, Before Enter Lock S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER S1 term 1 isLeader true state LEADER \",\"问题出在sendInstallSnapshot和sendRequestVote，应该在发RPC请求之后加锁。 如果在发RPC请求之前加锁，那么会出现S0向S1发了RPC请求，SO自身mu加锁了，此时S1再给S0发RPC请求，S1自身mu加锁，那么在S0和S1分别处理对方的RPC请求时就会发生死锁。\"]},\"48\":{\"h\":\"参考文章\",\"t\":[\"如何debug\"]},\"49\":{\"c\":[\"distributed-system\"]},\"50\":{\"c\":[\"raft\"]},\"51\":{\"h\":\"分享几个上千✨的React开源库助你玩转React\",\"t\":[\"今天分享几个上千⭐的库，助你玩转React学习和开发。\"]},\"52\":{\"h\":\"🚀 React学习库\"},\"53\":{\"h\":\"💎 reactjs-interview-questions\",\"t\":[\"git地址：https://github.com/sudheerj/reactjs-interview-questions\",\"内容介绍：这个仓库介绍了300+个常见的面试问题，十分详细，目前7.4k的⭐\",\"image.png\"]},\"54\":{\"h\":\"💎 React设计\",\"t\":[\"git地址：https://github.com/SangKa/react-in-patterns-cn\",\"内容介绍：一本完全免费的介绍React设计的电子书，目前1.2k的⭐\",\"image.png\"]},\"55\":{\"h\":\"💎 React技巧\",\"t\":[\"git地址：https://github.com/hateonion/react-bits-CN\",\"内容介绍：讲解React使用技巧的开源电子书，英文原版15.5k的⭐\"]},\"56\":{\"h\":\"💎 React开发路线图\",\"t\":[\"git地址：https://github.com/adam-golab/react-developer-roadmap/blob/master/roadmap-cn.png\",\"这个仓库罗列了一系列React开发需要学习的技能点，对于刚刚准备转码的小伙伴来说，还是十分推荐的。目前17k的⭐\",\"image.png\"]},\"57\":{\"h\":\"💎 React+TypeScript备忘录\",\"t\":[\"git地址：https://github.com/typescript-cheatsheets/react\",\"内容介绍：如果你使用TypeScript开发React，那么这个仓库是值得一看的，它首先介绍了基础的ts开发介绍，另外还提供了高等进阶的一些方法，很实用，目前已经41.4k的⭐\"]},\"58\":{\"h\":\"🚀 React工具库\"},\"59\":{\"h\":\"💎 beautiful-react-hooks\",\"t\":[\"git地址：https://github.com/antonioru/beautiful-react-hooks\",\"内容介绍：对React语法大刀阔斧改良的工具库，目前6.9k的⭐，语法上的改进使用起来十分舒适，其中一个状态钩子如下，如果你了解Svelte，那它的语法你肯定不会觉得陌生，和我上篇的分享不谋而合了。这仅仅是冰山一角，更多使用的工具函数可以去仓库中浏览下。\",\"🤮是时候放弃useState了，🚀这么写React更丝滑🚀\",\"import { Typography, Space, Button, Tag } from 'antd'; import useMutableState from 'beautiful-react-hooks/useMutableState'; const TestComponent = () => { const counter = useMutableState({ value: 0 }); return ( <DisplayDemo title=\\\"useMutableState\\\"> <Typography.Paragraph> Counter: <Tag color=\\\"green\\\">{counter.value}</Tag> </Typography.Paragraph> <Space> <Button type=\\\"primary\\\" onClick={() => counter.value += 1}>increase</Button> <Button type=\\\"primary\\\" onClick={() => counter.value -= 1}>decrease</Button> </Space> </DisplayDemo> ); }; \"]},\"60\":{\"h\":\"💎 hos\",\"t\":[\"git地址：https://github.com/deepsweet/hocs\",\"内容介绍：这是一个在recompose库（React成员开发的工具库）基础上利用React高阶组件功能开发的功能库，目前已经1.9k⭐了。\",\"不过这个工具库仅仅是维护阶段，不会再开发新功能了。下面是一个有趣的例子，你一定看的懂这个功能。\",\"import React from 'react'; import { compose, withState } from 'recompose'; import withLifecycle from '@hocs/with-lifecycle'; const Demo = ({ isLoading }) => ( <h1>{ isLoading ? 'Loading' : 'Done' }</h1> ); export default compose( withState('isLoading', 'setLoading', true), withLifecycle({ onDidMount({ setLoading }) { setLoading(true, () => { setTimeout(() => setLoading(false), 3000); }) }, onReceiveProps(props, nextProps) { console.log(`isLoading: ${props.isLoading} → ${nextProps.isLoading}`); } }) )(Demo); \",\"类似react-use、ahooks的工具库还有很多，这里只列举了两个特别的，希望可以帮你拓宽视野。\",\"今天的分享就到这了，感谢各位的观看，如果你也有值得分享的库，评论区告诉我。\"]},\"61\":{\"c\":[\"前端\"]},\"62\":{\"c\":[\"JavaScript\",\"Vue\"]},\"63\":{\"h\":\"Zustand 底层原理🚀🚀🚀\",\"t\":[\"今天探究 Zustand 底层原理\"]},\"64\":{\"h\":\"🚀 zustand 为什么这么好用\",\"t\":[\"第一次使用 zustand 被惊艳到了。只需要调用create函数创建store就可以直接在任何组件使用了。\"]},\"65\":{\"h\":\"💎 底层原理很简单\",\"t\":[\"好奇的翻开代码，才发现 zustand 基于发布订阅模式实现的响应式。下面是核心代码实现。\",\"function createStoreImpl(initialState) { let state = initialState; const listeners = new Set(); function setState(newState) { state = newState; listeners.forEach((listener) => listener(state)); } function subscribe(listener) { listeners.add(listener); return () => { listeners.delete(listener); }; } function destroy() { listeners.clear(); } return { getState: () => state, setState, subscribe, destroy, }; } \",\"使用方法如下：\",\"// 创建 const store = createStoreImpl({ count: 0 }); // 更新 store.setState({ count: 1 }); // 订阅 const unsubscribe = store.subscribe((state) => { console.log(\\\"State changed:\\\", state); }); store.setState({ count: 2 }); // 触发订阅的回调函数 unsubscribe(); // 取消订阅 store.setState({ count: 3 }); // 不会触发订阅的回调函数 store.destroy(); // 销毁这个store \"]},\"66\":{\"h\":\"💎 不同环境处理\",\"t\":[\"事实上，zustand 提供了两个版本的包，即 react 版本和非 react 的 vanilla 版本。\",\"包的 export 信息如下，可以看出默认为 react 版本，\",\"export * from \\\"./vanilla.ts\\\"; export * from \\\"./react.ts\\\"; export { default } from \\\"./react.ts\\\"; \",\"非 react 的环境使用如下\",\"import { createStore } from 'zustand/vanilla' const store = createStore(() => ({ ... })) const { getState, setState, subscribe } = store export default store \",\"在 react 模式下，和 vanilla 版本相同的是他们都是使用 createStore 创建的，使用 create 创建 store\",\"和 vanilla 版本不同的是，createImpl 的返回值是使用 useStore 包装了一层的返回值（实际是 useSyncExternalStore api）。\",\"const createImpl = (createState) => { const api = typeof createState === \\\"function\\\" ? createStore(createState) : createState; const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn); Object.assign(useBoundStore, api); return useBoundStore; }; export const create = (createState) => createState ? createImpl(createState) : createImpl; \",\"useStore 又通过内置的包 use-sync-external-store/shim/with-selector处理。\",\"use-sync-external-store可以在 Zustand 中使用外部状态管理库的状态，例如 Redux。\",\"import useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector' export function useStore<TState, StateSlice>( api: WithReact<StoreApi<TState>>, selector: (state: TState) => StateSlice = api.getState as any, equalityFn?: (a: StateSlice, b: StateSlice) => boolean ) { const slice = useSyncExternalStoreWithSelector( api.subscribe, api.getState, api.getServerState || api.getState, selector, equalityFn ) useDebugValue(slice) return slice } \"]},\"67\":{\"c\":[\"前端\"]},\"68\":{\"c\":[\"React\"]},\"69\":{\"h\":\"mybatis sql写法\"},\"70\":{\"c\":[\"java\"]},\"71\":{\"c\":[\"mybatis\"]},\"72\":{\"h\":\"mybatis拦截器\"},\"73\":{\"c\":[\"java\"]},\"74\":{\"c\":[\"mybatis\"]},\"75\":{\"h\":\"mybatis的原理\"},\"76\":{\"c\":[\"java\"]},\"77\":{\"c\":[\"mybatis\"]},\"78\":{\"h\":\"一人一单\",\"t\":[\" \"]},\"79\":{\"c\":[\"java\"]},\"80\":{\"c\":[\"system design\"]},\"81\":{\"h\":\"秒杀场景\",\"t\":[\"秒杀优惠券流程\",\"@Override @Transactional public Result seckillVoucher(Long voucherId) { // 1. 查询优惠券 SeckillVoucher voucher = seckillVoucherService.getById(voucherId); // 2. 判断秒杀是否开发 if(voucher.getBeginTime().isAfter(LocalDateTime.now())) { return Result.fail(\\\"秒杀未开始\\\"); } // 3. 判断秒杀是否已经结束 if(voucher.getBeginTime().isBefore(LocalDateTime.now())) { return Result.fail(\\\"秒杀已结束\\\"); } // 4. 判断库存是否充足 if (voucher.getStock() < 1) { return Result.fail(\\\"库存不足\\\"); } // 5. 扣减库存 boolean success = seckillVoucherService.update(). setSql(\\\"stock = stock - 1\\\"). eq(\\\"voucher_id\\\", voucherId).update(); if (!success) { return Result.fail(\\\"库存不足\\\"); } // 6. 创建订单 VoucherOrder voucherOrder = new VoucherOrder(); // 6.1 订单id long orderId = redisIdWorker.nextId(\\\"order\\\"); voucherOrder.setId(orderId); // 6.2 用户id Long userId = UserHolder.getUser().getId(); voucherOrder.setUserId(userId); // 6.3 代金券id voucherOrder.setVoucherId(voucherId); save(voucherOrder); // 7 返回订单id return Result.ok(orderId); } \",\"秒杀优惠券并发不安全问题\"]},\"82\":{\"h\":\"解决方案\"},\"83\":{\"h\":\"版本号法\",\"t\":[\"版本号法\"]},\"84\":{\"h\":\"Compare and Set\",\"t\":[\"CAS\"]},\"85\":{\"h\":\"悲观锁\"},\"86\":{\"h\":\"乐观锁\"},\"87\":{\"c\":[\"java\"]},\"88\":{\"c\":[\"design\"]},\"89\":{\"h\":\"jvm常用参数\"},\"90\":{\"c\":[\"java\"]},\"91\":{\"c\":[\"jvm\"]},\"92\":{\"h\":\"内存泄漏排查工具\"},\"93\":{\"h\":\"arthas\"},\"94\":{\"h\":\"btrace\"},\"95\":{\"c\":[\"java\"]},\"96\":{\"c\":[\"jvm\"]},\"97\":{\"h\":\"垃圾回收器\"},\"98\":{\"c\":[\"java\"]},\"99\":{\"c\":[\"jvm\"]},\"100\":{\"h\":\"常见内存泄漏问题\"},\"101\":{\"c\":[\"java\"]},\"102\":{\"c\":[\"jvm\"]},\"103\":{\"h\":\"好用的插件\",\"t\":[\"作用\",\"链接\",\"时序图生成\",\"https://juejin.cn/post/7134877521182457869\",\"接口调试\",\"https://www.cnblogs.com/FraserYu/p/12290061.html\"]},\"104\":{\"c\":[\"java\"]},\"105\":{\"c\":[\"idea\"]},\"106\":{\"h\":\"插件开发\"},\"107\":{\"h\":\"参考文章\",\"t\":[\"开发流程idea插件开发基础\"]},\"108\":{\"h\":\"解决org.jetbrains.intellij报红\",\"t\":[\"gradle开发idea插件，环境版本适配\"]},\"109\":{\"h\":\"gradle坑点\",\"t\":[\"创建gradle工程编译失败\"]},\"110\":{\"c\":[\"java\"]},\"111\":{\"c\":[\"idea\"]},\"112\":{\"h\":\"idea问题记录\",\"t\":[\"问题\",\"解决方案\",\"打开existing source多处因为没有增加依赖到classpath报红\",\"https://blog.csdn.net/u013041642/article/details/72835242\"]},\"113\":{\"c\":[\"java\"]},\"114\":{\"c\":[\"idea\"]},\"115\":{\"h\":\"ThreadLocal设计\"},\"116\":{\"c\":[\"java\"]},\"117\":{\"c\":[\"source\"]},\"118\":{\"h\":\"AspectJ AOP\"},\"119\":{\"c\":[\"java\"]},\"120\":{\"c\":[\"spring\",\"AspectJ\",\"AOP\"]},\"121\":{\"h\":\"FactoryBean介绍\",\"t\":[\"FactoryBean 是 Spring 框架中的一个接口，用于创建复杂对象或者具有特殊构建逻辑的对象。通常情况下，Spring 容器会通过调用 FactoryBean 的 getObject() 方法来获取对象实例，从而隐藏了对象的创建细节。\",\"FactoryBean 接口定义了以下方法：\",\"getObject(): 该方法用于返回所管理的对象实例。\",\"getObjectType(): 该方法用于返回所管理对象的类型。\",\"isSingleton(): 该方法用于指示所管理的对象是否是单例。\",\"isPrototype(): 该方法用于指示所管理的对象是否是原型。\",\"destroy(): 该方法用于销毁对象。\",\"通过实现 FactoryBean 接口，可以在 Spring 容器中灵活地创建对象，并且可以基于特定的条件来创建不同的对象实例。常见的应用场景包括：\",\"使用 FactoryBean 创建单例或者原型对象，以延迟对象的创建或者实现对象的惰性加载。\\n使用 FactoryBean 封装复杂的对象创建逻辑，例如对象的初始化、配置、依赖注入等。\\n使用 FactoryBean 创建代理对象，实现 AOP（面向切面编程）等功能。\\n总之，FactoryBean 接口为 Spring 提供了一种灵活、可扩展的对象创建机制，可以根据具体的业务需求来定制对象的创建过程。\"]},\"122\":{\"c\":[\"java\"]},\"123\":{\"c\":[\"spring\"]},\"124\":{\"h\":\"jdbc-连接池-orm-sharding_jdbc之间的关系\"},\"125\":{\"h\":\"jdbc和ORM\",\"t\":[\"jdbc使用\"]},\"126\":{\"h\":\"连接池\",\"t\":[\"数据库连接池是指，在Java程序未和数据库建立连接时，就提前创建好一定数量的连接并放入缓冲池中；当Java程序请求建立数据库连接时，就可以直接从缓冲池中“拿出”建立好的连接来用，用完后取消Java程序对该连接的引用即可，连接本身不会中断，只是“放回”了连接池（动态绑定机制）。\",\"数据库连接池负责分配，管理和释放数据库连接，它允许用户程序重复使用一个现有的数据库连接，而不是重新建立一个。（即连接池中的连接是公共的，谁都能用，你用完我可以接着用）\",\"当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中\"]},\"127\":{\"h\":\"sharding-jdbc\",\"t\":[\"适用于任何基于 JDBC 的 ORM 框架，如：JPA, Hibernate, Mybatis, Spring JDBC Template或直接使用 JDBC。\",\"支持任何第三方的数据库连接池，如：DBCP, C3P0, BoneCP, Druid, HikariCP 等。\",\"支持任意实现 JDBC 规范的数据库，目前支持 MySQL，Oracle，SQLServer，PostgreSQL 以及任何遵循 SQL92 标准的数据库。\",\"private final Map<String, DataSource> dataSourceMap = new LinkedHashMap<>(); @Bean @Conditional(ShardingRuleCondition.class) public DataSource shardingDataSource() throws SQLException { return ShardingDataSourceFactory.createDataSource(dataSourceMap, new ShardingRuleConfigurationYamlSwapper().swap(shardingRule), props.getProps()); } \",\"底层与数据库直接交互的仍然为javax.sql.DataSource，sharding-jdbc是在交互之前做一些操作，比如：\",\"用一个map保存多个库，根据规则实现分库\",\"在执行sql语句之前改写，实现分表\"]},\"128\":{\"h\":\"参考文章\",\"t\":[\"JDBC 连接池 详解shardingjdbc—— 配置druid数据库连接池\"]},\"129\":{\"c\":[\"java\"]},\"130\":{\"c\":[\"spring\",\"jdbc\",\"orm\"]},\"131\":{\"h\":\"spring AOP\"},\"132\":{\"h\":\"AOP的实现\"},\"133\":{\"h\":\"没有循环依赖的bean的AOP时机\",\"t\":[\"public abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware \",\"InstantiationAwareBeanPostProcessor接口中包含方法postProcessAfterInitialization\",\"public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) { if (bean != null) { // 如果是普通bean，则返回beanName，如果是FactoryBean,则返回加上前缀&的&beanName Object cacheKey = getCacheKey(bean.getClass(), beanName); // earlyProxyReferences中缓存的是已经创建好的代理对象 if (!this.earlyProxyReferences.contains(cacheKey)) { return wrapIfNecessary(bean, beanName, cacheKey); } } return bean; } \"]},\"134\":{\"h\":\"出现循环依赖的bean的AOP时机\",\"t\":[\"对应spring扩展点 (循环依赖: 提前AOP)\",\"@Override public Object getEarlyBeanReference(Object bean, String beanName) { Object cacheKey = getCacheKey(bean.getClass(), beanName); this.earlyProxyReferences.put(cacheKey, bean); return wrapIfNecessary(bean, beanName, cacheKey); } \"]},\"135\":{\"h\":\"杂项\",\"t\":[\"spring中expose-proxy的作用与原理\",\"Spring——事务注解@Transactional的源码分析\"]},\"136\":{\"h\":\"参考文章\",\"t\":[\"javadoop简书Spring AOP 最全源码详解之AOP元数据解析Spring AOP 最全源码详解之创建代理对象\"]},\"137\":{\"c\":[\"java\"]},\"138\":{\"c\":[\"spring\",\"AOP\"]},\"139\":{\"h\":\"spring-cloud介绍\"},\"140\":{\"h\":\"参考文章\",\"t\":[\"springboot与springcloud版本\"]},\"141\":{\"c\":[\"java\"]},\"142\":{\"c\":[\"spring\",\"cloud\"]},\"143\":{\"h\":\"spring MVC原理解析\",\"t\":[\"tomcat架构\",\"http://localhost:8080/SpringMVCTest_war_exploded/app/test\",\"DispatcherServlet的父类FrameworkServlet中有Spring容器\",\"dispatch_servlet的IOC容器.png\",\"创建流程\",\"启动Tomcat\",\"创建DispatcherServlet\",\"DispatcherServlet.init()--->创建Spring容器\",\"public abstract class HttpServletBean extends HttpServlet implements EnvironmentCapable, EnvironmentAware { @Override public final void init() throws ServletException { // Set bean properties from init parameters. PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties); if (!pvs.isEmpty()) { try { BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this); ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext()); bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment())); initBeanWrapper(bw); bw.setPropertyValues(pvs, true); } catch (BeansException ex) { if (logger.isErrorEnabled()) { logger.error(\\\"Failed to set bean properties on servlet '\\\" + getServletName() + \\\"'\\\", ex); } throw ex; } } // Let subclasses do whatever initialization they like. initServletBean(); } } \",\"FrameworkServlet initServletBean中创建Spring容器\",\"public abstract class FrameworkServlet extends HttpServletBean implements ApplicationContextAware { @Override protected final void initServletBean() throws ServletException { getServletContext().log(\\\"Initializing Spring \\\" + getClass().getSimpleName() + \\\" '\\\" + getServletName() + \\\"'\\\"); if (logger.isInfoEnabled()) { logger.info(\\\"Initializing Servlet '\\\" + getServletName() + \\\"'\\\"); } long startTime = System.currentTimeMillis(); try { this.webApplicationContext = initWebApplicationContext(); initFrameworkServlet(); } catch (ServletException | RuntimeException ex) { logger.error(\\\"Context initialization failed\\\", ex); throw ex; } if (logger.isDebugEnabled()) { String value = this.enableLoggingRequestDetails ? \\\"shown which may lead to unsafe logging of potentially sensitive data\\\" : \\\"masked to prevent unsafe logging of potentially sensitive data\\\"; logger.debug(\\\"enableLoggingRequestDetails='\\\" + this.enableLoggingRequestDetails + \\\"': request parameters and headers will be \\\" + value); } if (logger.isInfoEnabled()) { logger.info(\\\"Completed initialization in \\\" + (System.currentTimeMillis() - startTime) + \\\" ms\\\"); } } } \"]},\"144\":{\"h\":\"参考网页\",\"t\":[\"IDEA2022 搭建SpringMVC最新教程\"]},\"145\":{\"c\":[\"java\"]},\"146\":{\"c\":[\"spring\",\"springMVC\"]},\"147\":{\"h\":\"spring事务\"},\"148\":{\"h\":\"spring事务\",\"t\":[\"经典的用编程式AOP的样例\",\"@Configuration(proxyBeanMethods = false) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration { @Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor( TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) { BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor(); advisor.setTransactionAttributeSource(transactionAttributeSource); advisor.setAdvice(transactionInterceptor); if (this.enableTx != null) { advisor.setOrder(this.enableTx.<Integer>getNumber(\\\"order\\\")); } return advisor; } @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public TransactionAttributeSource transactionAttributeSource() { return new AnnotationTransactionAttributeSource(); } @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public TransactionInterceptor transactionInterceptor(TransactionAttributeSource transactionAttributeSource) { TransactionInterceptor interceptor = new TransactionInterceptor(); interceptor.setTransactionAttributeSource(transactionAttributeSource); if (this.txManager != null) { interceptor.setTransactionManager(this.txManager); } return interceptor; } } \",\"打开@EnableTransactionManagement后\",\"public static List<Advisor> findAdvisorsThatCanApply(List<Advisor> candidateAdvisors, Class<?> clazz) { if (candidateAdvisors.isEmpty()) { return candidateAdvisors; } List<Advisor> eligibleAdvisors = new ArrayList<>(); for (Advisor candidate : candidateAdvisors) { if (candidate instanceof IntroductionAdvisor && canApply(candidate, clazz)) { eligibleAdvisors.add(candidate); } } boolean hasIntroductions = !eligibleAdvisors.isEmpty(); for (Advisor candidate : candidateAdvisors) { if (candidate instanceof IntroductionAdvisor) { // already processed continue; } if (canApply(candidate, clazz, hasIntroductions)) { eligibleAdvisors.add(candidate); } } return eligibleAdvisors; } \",\"candidateAdvisors中会包含\",\"AOP 会用动态代理的方式将这些切面逻辑织入。\",\"@Override @Nullable public Object invoke(MethodInvocation invocation) throws Throwable { // Work out the target class: may be {@code null}. // The TransactionAttributeSource should be passed the target class // as well as the method, which may be from an interface. Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null); // Adapt to TransactionAspectSupport's invokeWithinTransaction... return invokeWithinTransaction(invocation.getMethod(), targetClass, invocation::proceed); } @Nullable protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass, final InvocationCallback invocation) throws Throwable { // If the transaction attribute is null, the method is non-transactional. TransactionAttributeSource tas = getTransactionAttributeSource(); final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null); final TransactionManager tm = determineTransactionManager(txAttr); if (this.reactiveAdapterRegistry != null && tm instanceof ReactiveTransactionManager) { ReactiveTransactionSupport txSupport = this.transactionSupportCache.computeIfAbsent(method, key -> { if (KotlinDetector.isKotlinType(method.getDeclaringClass()) && KotlinDelegate.isSuspend(method)) { throw new TransactionUsageException( \\\"Unsupported annotated transaction on suspending function detected: \\\" + method + \\\". Use TransactionalOperator.transactional extensions instead.\\\"); } ReactiveAdapter adapter = this.reactiveAdapterRegistry.getAdapter(method.getReturnType()); if (adapter == null) { throw new IllegalStateException(\\\"Cannot apply reactive transaction to non-reactive return type: \\\" + method.getReturnType()); } return new ReactiveTransactionSupport(adapter); }); return txSupport.invokeWithinTransaction( method, targetClass, invocation, txAttr, (ReactiveTransactionManager) tm); } PlatformTransactionManager ptm = asPlatformTransactionManager(tm); final String joinpointIdentification = methodIdentification(method, targetClass, txAttr); if (txAttr == null || !(ptm instanceof CallbackPreferringPlatformTransactionManager)) { // Standard transaction demarcation with getTransaction and commit/rollback calls. TransactionInfo txInfo = createTransactionIfNecessary(ptm, txAttr, joinpointIdentification); Object retVal; try { // This is an around advice: Invoke the next interceptor in the chain. // This will normally result in a target object being invoked. retVal = invocation.proceedWithInvocation(); } catch (Throwable ex) { // target invocation exception completeTransactionAfterThrowing(txInfo, ex); throw ex; } finally { cleanupTransactionInfo(txInfo); } if (retVal != null && vavrPresent && VavrDelegate.isVavrTry(retVal)) { // Set rollback-only in case of Vavr failure matching our rollback rules... TransactionStatus status = txInfo.getTransactionStatus(); if (status != null && txAttr != null) { retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status); } } commitTransactionAfterReturning(txInfo); return retVal; } else { Object result; final ThrowableHolder throwableHolder = new ThrowableHolder(); // It's a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in. try { result = ((CallbackPreferringPlatformTransactionManager) ptm).execute(txAttr, status -> { TransactionInfo txInfo = prepareTransactionInfo(ptm, txAttr, joinpointIdentification, status); try { Object retVal = invocation.proceedWithInvocation(); if (retVal != null && vavrPresent && VavrDelegate.isVavrTry(retVal)) { // Set rollback-only in case of Vavr failure matching our rollback rules... retVal = VavrDelegate.evaluateTryFailure(retVal, txAttr, status); } return retVal; } catch (Throwable ex) { if (txAttr.rollbackOn(ex)) { // A RuntimeException: will lead to a rollback. if (ex instanceof RuntimeException) { throw (RuntimeException) ex; } else { throw new ThrowableHolderException(ex); } } else { // A normal return value: will lead to a commit. throwableHolder.throwable = ex; return null; } } finally { cleanupTransactionInfo(txInfo); } }); } catch (ThrowableHolderException ex) { throw ex.getCause(); } catch (TransactionSystemException ex2) { if (throwableHolder.throwable != null) { logger.error(\\\"Application exception overridden by commit exception\\\", throwableHolder.throwable); ex2.initApplicationException(throwableHolder.throwable); } throw ex2; } catch (Throwable ex2) { if (throwableHolder.throwable != null) { logger.error(\\\"Application exception overridden by commit exception\\\", throwableHolder.throwable); } throw ex2; } // Check result state: It might indicate a Throwable to rethrow. if (throwableHolder.throwable != null) { throw throwableHolder.throwable; } return result; } } \",\"不管是编程式事务，还是声明式事务，最终源码都是调用事务管理器的PlatformTransactionManager接口的3个方法:\",\"getTransaction\",\"commit\",\"rollback\",\"@Override public final TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException { // Use defaults if no transaction definition given. TransactionDefinition def = (definition != null ? definition : TransactionDefinition.withDefaults()); Object transaction = doGetTransaction(); boolean debugEnabled = logger.isDebugEnabled(); if (isExistingTransaction(transaction)) { // Existing transaction found -> check propagation behavior to find out how to behave. return handleExistingTransaction(def, transaction, debugEnabled); } // Check definition settings for new transaction. if (def.getTimeout() < TransactionDefinition.TIMEOUT_DEFAULT) { throw new InvalidTimeoutException(\\\"Invalid transaction timeout\\\", def.getTimeout()); } // No existing transaction found -> check propagation behavior to find out how to proceed. if (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) { throw new IllegalTransactionStateException( \\\"No existing transaction found for transaction marked with propagation 'mandatory'\\\"); } else if (def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED || def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW || def.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) { SuspendedResourcesHolder suspendedResources = suspend(null); if (debugEnabled) { logger.debug(\\\"Creating new transaction with name [\\\" + def.getName() + \\\"]: \\\" + def); } try { return startTransaction(def, transaction, debugEnabled, suspendedResources); } catch (RuntimeException | Error ex) { resume(null, suspendedResources); throw ex; } } else { // Create \\\"empty\\\" transaction: no actual transaction, but potentially synchronization. if (def.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) { logger.warn(\\\"Custom isolation level specified but no actual transaction initiated; \\\" + \\\"isolation level will effectively be ignored: \\\" + def); } boolean newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS); return prepareTransactionStatus(def, null, true, newSynchronization, debugEnabled, null); } } \",\"当前不存在事务，传播机制=REQUIRED/REQUIRED_NEW/NESTED,这三种情况，需要新开启事务，且加上事务同步\",\"private TransactionStatus startTransaction(TransactionDefinition definition, Object transaction, boolean debugEnabled, @Nullable SuspendedResourcesHolder suspendedResources) { boolean newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER); DefaultTransactionStatus status = newTransactionStatus( definition, transaction, true, newSynchronization, debugEnabled, suspendedResources); doBegin(transaction, definition); prepareSynchronization(status, definition); return status; } \"]},\"149\":{\"h\":\"事务传播机制\",\"t\":[\"https://www.cnblogs.com/vipstone/p/16735893.html\"]},\"150\":{\"h\":\"参考文章\",\"t\":[\"cnblogs\"]},\"151\":{\"c\":[\"java\"]},\"152\":{\"c\":[\"spring\",\"transaction\"]},\"153\":{\"h\":\"spring扩展点\"},\"154\":{\"h\":\"Bean生命周期\",\"t\":[\"image\"]},\"155\":{\"h\":\"Bean创建过程扩展点\",\"t\":[\"方法\",\"Log\",\"Constructor\",\"Cat constructor run...\",\"BeanPostProcessor.postProcessBeforeInitialization\",\"Cat postProcessBeforeInitialization run...\",\"@PostConstruct\",\"Cat PostConstruct run...\",\"InitializingBean.afterPropertiesSet\",\"Cat afterPropertiesSet run...\",\"BeanPostProcessor.postProcessAfterInitialization\",\"Cat postProcessAfterInitialization run...\"]},\"156\":{\"h\":\"BeanNameAware, BeanFactoryAware, ApplicationContextAware, InitializingBean, BeanPostProcessor\",\"t\":[\"实现接口\",\"作用\",\"BeanNameAware\",\"实现setBeanName方法\",\"BeanFactoryAware\",\"实现setBeanFactory获取beanFactory\",\"ApplicationContextAware\",\"实现setApplicationContext获取applicationContext\",\"InitializingBean\",\"实现afterPropertiesSet接口\",\"BeanPostProcessor\",\"实现postProcessBeforeInitialization, postProcessAfterInitialization\"]},\"157\":{\"h\":\"BeanDefinitionRegistryPostProcessor, BeanFactoryPostProcessor\",\"t\":[\"实现接口\",\"作用\",\"BeanFactoryPostProcessor\",\"实现postProcessBeanFactory方法\",\"BeanDefinitionRegistryPostProcessor\",\"实现postProcessBeanDefinitionRegistry方法\"]},\"158\":{\"h\":\"ImportBeanDefinitionRegistrar\",\"t\":[\"实现接口\",\"作用\",\"ImportBeanDefinitionRegistrar\",\"实现registerBeanDefinitions方法\"]},\"159\":{\"h\":\"循环依赖\",\"t\":[\"@Component public class AService { @Autowired private BService bService; public void test() { System.out.println(bService); } } @Component public class BService { @Autowired private AService aService; public void test() { System.out.println(aService); } } \"]},\"160\":{\"h\":\"AService的Bean的生命周期\",\"t\":[\"实例化-->AService普通对象\",\"填充BService-->单例池Map-->创建BService BService的Bean的生命周期 \",\"实例化-->普通对象\",\"填充aService-->单例池Map-->AService普通对象\",\"填充其他属性\",\"做其他事情(AOP)\",\"添加到单例池\",\"填充其他属性\",\"做其他事情(AOP)-->AService的代理对象\",\"添加到单例池\",\"上述2.2步骤中，填充aService时单例池Map里没有aService，那么又需要创建aService，而aService正在创建过程中，这样则会出现问题。\"]},\"161\":{\"h\":\"打破循环依赖\",\"t\":[\"三级缓存 第一级: singletonObjects ------ 单例 第二级缓存: earlySingletonObjects ------ 提前产生的代理对象，也保证单例 第三级缓存: singletonFactories ------ 打破循环\",\"实例化-->AService普通对象-->earlySingletonObjects.put(\\\"AService\\\", AService普通对象)\",\"填充BService-->单例池Map-->创建BService BService的Bean的生命周期 \",\"实例化-->普通对象\",\"填充aService-->单例池Map-不存在->earlySingletonObjects-->AService普通对象\",\"填充其他属性\",\"做其他事情(AOP)\",\"添加到单例池\",\"填充其他属性\",\"做其他事情(AOP)-->AService的代理对象\",\"添加到单例池\",\"以上步骤存在问题，2.2中得到的是AService普通对象，而4中生成的又是AService的代理对象，冲突。\",\"循环依赖: 提前AOP\",\"creatingSet<'AService'>\",\"实例化-->AService普通对象-->singletonFactories.put(\\\"AService\\\", () -> getEarlyBeanReference(beanName, mbd, AService普通对象))\",\"填充BService-->单例池Map-->创建BService BService的Bean的生命周期 \",\"实例化-->普通对象\",\"填充aService-->单例池Map-不存在->creatingSet-->出现循环依赖-->earlySingletonObjects-->singletonFactories-->AOP-->AService代理对象-->earlySingletonObjects\",\"填充其他属性\",\"做其他事情(AOP)\",\"添加到单例池\",\"填充其他属性\",\"做其他事情(AOP)-->AService的代理对象\",\"添加到单例池\",\"creatingSet.remove<'AService'>\",\"2.2步骤中AService代理对象还没有填充属性，因此不能添加到单例池\",\"earlySingletonObjects用于保证单例\",\"3.2步骤发现出现循环依赖后会创建AService代理对象，此时如果有CService也依赖AService，也进行到这一步骤，那么也会创建AService代理对象，则单例无法保证。\",\"boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences && isSingletonCurrentlyInCreation(beanName)); if (earlySingletonExposure) { if (logger.isTraceEnabled()) { logger.trace(\\\"Eagerly caching bean '\\\" + beanName + \\\"' to allow for resolving potential circular references\\\"); } addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean)); } protected Object getEarlyBeanReference(String beanName, RootBeanDefinition mbd, Object bean) { Object exposedObject = bean; if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) { for (BeanPostProcessor bp : getBeanPostProcessors()) { if (bp instanceof SmartInstantiationAwareBeanPostProcessor) { SmartInstantiationAwareBeanPostProcessor ibp = (SmartInstantiationAwareBeanPostProcessor) bp; exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName); } } } return exposedObject; } \"]},\"162\":{\"c\":[\"java\"]},\"163\":{\"c\":[\"spring\"]},\"164\":{\"h\":\"spring条件注解\"},\"165\":{\"h\":\"总结\",\"t\":[\"条件注解\",\"作用\",\"ConditionalOnBean\",\"是否存在某个类或某个名字的Bean\",\"ConditionalOnMissingBean\",\"是否缺失某个类或某个名字的Bean\",\"ConditionalOnSingleCandidate\",\"是否符合指定类型的Bean只有一个\",\"ConditionalOnClass\",\"是否存在某个类\",\"ConditionalOnMissingClass\",\"是否不存在某个类\",\"ConditionalOnExpression\",\"指定的表达式返回是true或者false\",\"ConditionalOnJava\",\"判断Java版本\",\"ConditionalOnJndi\",\"JNDI指定的资源是否存在\",\"ConditionalOnWebApplication\",\"当前应用是web应用\",\"ConditionalOnNotWebApplication\",\"当前应用不是web应用\",\"ConditionalOnProperty\",\"Environment中是否存在某个属性\",\"ConditionalOnResource\",\"是否存在指定资源\",\"ConditionalOnWarDeployment\",\"是否以war包方式部署运行\",\"ConditionalOnCloudPlatform\",\"是否在某个云平台上\"]},\"166\":{\"h\":\"AnyNestedCondition\",\"t\":[\"用法\",\"static class PooledDataSourceCondition extends AnyNestedCondition { PooledDataSourceCondition() { super(ConfigurationPhase.PARSE_CONFIGURATION); } @ConditionalOnProperty(prefix = \\\"spring.datasource\\\", name = \\\"type\\\") static class ExplicitType { } @Conditional(PooledDataSourceAvailableCondition.class) static class PooledDataSourceAvailable { } } \",\"原理：会收集AnyNestedCondition的所有内部类的条件，只要有一个条件为真则为真\",\"private Map<AnnotationMetadata, List<Condition>> getMemberConditions(String[] members, ConfigurationPhase phase, String className) { MultiValueMap<AnnotationMetadata, Condition> memberConditions = new LinkedMultiValueMap<>(); for (String member : members) { AnnotationMetadata metadata = getMetadata(member); for (String[] conditionClasses : getConditionClasses(metadata)) { for (String conditionClass : conditionClasses) { Condition condition = getCondition(conditionClass); validateMemberCondition(condition, phase, className); memberConditions.add(metadata, condition); } } } return Collections.unmodifiableMap(memberConditions); } \"]},\"167\":{\"h\":\"一些使用样例\",\"t\":[\"@ConditionalOnBean(name = \\\"xxx\\\") @ConditionalOnBean(value = MemberService.class) \"]},\"168\":{\"h\":\"自定义\",\"t\":[\"自定义一个条件注解\",\"public class DyqCondition implements Condition { @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { Map<String, Object> annotationAttributes = metadata.getAnnotationAttributes(DyqConditionOnClass.class.getName()); String className = (String) annotationAttributes.get(\\\"value\\\"); try { context.getClassLoader().loadClass(className); return true; } catch (ClassNotFoundException e) { return false; } } } @Target({ ElementType.TYPE, ElementType.METHOD }) @Retention(RetentionPolicy.RUNTIME) @Conditional(DyqCondition.class) public @interface DyqConditionOnClass { String value(); } \"]},\"169\":{\"h\":\"参考文章\",\"t\":[\"Spring Data之DataSource创建及源码分析\"]},\"170\":{\"c\":[\"java\"]},\"171\":{\"c\":[\"spring\"]},\"172\":{\"h\":\"spring自动装配原理\"},\"173\":{\"h\":\"invokeBeanFactoryPostProcessors\",\"t\":[\"1.获取所有硬编码的BeanDefinitionRegistryPostProcessor，调用postProcessBeanDefinitionRegistry方法 2.获取所有配置的BeanDefinitionRegistryPostProcessor，调用postProcessBeanDefinitionRegistry方法\"]},\"174\":{\"h\":\"ConfigurationClassPostProcessor\",\"t\":[\"1. processConfigBeanDefinitions 1.1 checkConfigurationClassCandidate 1.1.1 isConfigurationCandidate 1.2 parser.parse(candidates); 1.2.1 处理 @Component 注解 1.2.2 处理 @PropertySource 注解 1.2.3 处理 @ComponentScan、@ComponentScans 注解 1.2.4 处理 @Import、ImportSelector、ImportBeanDefinitionRegistrar 1.2.5 处理 @ImportResource 注解 1.2.6 处理 @Bean修饰的方法 1.2.7 处理接口默认方法 1.2.8 处理父类 1.3 parser.validate(); 1.4 this.reader.loadBeanDefinitions(configClasses); 1.4.1 registerBeanDefinitionForImportedConfigurationClass 1.4.2 loadBeanDefinitionsForBeanMethod 1.4.3 loadBeanDefinitionsFromImportedResources 1.4.4 loadBeanDefinitionsFromRegistrars \"]},\"175\":{\"h\":\"@Import\",\"t\":[\"1.2.4 处理@Import注解: processImports(configClass, sourceClass, getImports(sourceClass), filter, true); 其中会调用selectImports方法\",\"AutoConfigurationImportSelector的selectImports方法从spring.factories中读取starter需要的类。\",\"其中某些特殊的类可以扫描@SpringApplication主类所在目录下所有的package，将包含注解的类加入spring容器中。\"]},\"176\":{\"c\":[\"java\"]},\"177\":{\"c\":[\"spring\"]},\"178\":{\"h\":\"spring零碎知识点\"},\"179\":{\"h\":\"推断构造方法\",\"t\":[\"有无参构造方法则用无参构造方法\",\"没有无参构造方法 \",\"存在多个构造方法->异常\",\"存在一个->Spring查找参数中的对象是否存在(byType,byName)->不存在则异常\"]},\"180\":{\"h\":\"BeanNameAware, BeanFactoryAware, ApplicationContextAware\",\"t\":[\"实现接口\",\"作用\",\"BeanNameAware\",\"重写setBeanName方法\",\"BeanFactoryAware\",\"重写setBeanFactory获取beanFactory\",\"ApplicationContextAware\",\"重写setApplicationContext获取applicationContext\"]},\"181\":{\"c\":[\"java\"]},\"182\":{\"c\":[\"spring\"]},\"183\":{\"h\":\"注解处理时机\",\"t\":[\"注解\",\"处理时机\",\"@Import\",\"ConfigurationClassParser#processImports\"]},\"184\":{\"c\":[\"java\"]},\"185\":{\"c\":[\"spring\"]},\"186\":{\"h\":\"JAVA职业发展\"},\"187\":{\"h\":\"参考文章\",\"t\":[\"Java 工程师能力提升路径（一）：从业余到专业\"]},\"188\":{\"c\":[\"career\"]},\"189\":{\"c\":[\"java\"]},\"190\":{\"h\":\"excalidraw快捷键\",\"t\":[\"快捷键\",\"作用\",\"Command+Option+I\",\"打开调试窗口\"]},\"191\":{\"c\":[\"excalidraw\"]},\"192\":{\"c\":[\"shortcut\"]},\"193\":{\"h\":\"idea快捷键\",\"t\":[\"快捷键\",\"作用\",\"Command+F3\",\"列出mnemoric bookmark\"]},\"194\":{\"c\":[\"idea\"]},\"195\":{\"c\":[\"shortcut\"]},\"196\":{\"h\":\"vuepress相关\"},\"197\":{\"h\":\"vuepress icon\",\"t\":[\"https://theme-hope.vuejs.press/guide/interface/icon.html#browsing-icons\"]},\"198\":{\"c\":[\"webtools\"]},\"199\":{\"c\":[\"vuepress\"]},\"200\":{\"h\":\"一些好用的web网站\",\"t\":[\"功能\",\"网址\",\"pdf编辑\",\"https://smallpdf.com/cn/edit-pdf\"]},\"201\":{\"c\":[\"webtools\"]},\"202\":{\"c\":[\"bookmarks\"]},\"203\":{\"h\":\"feign整合ribbon和consul源码分析\"},\"204\":{\"h\":\"Ribbon中重要的自动注入的类\",\"t\":[\"FeignRibbonClientAutoConfiguration\",\"@ConditionalOnClass({ ILoadBalancer.class, Feign.class }) @ConditionalOnProperty(value = \\\"spring.cloud.loadbalancer.ribbon.enabled\\\", matchIfMissing = true) @Configuration(proxyBeanMethods = false) @AutoConfigureBefore(FeignAutoConfiguration.class) @EnableConfigurationProperties({ FeignHttpClientProperties.class }) // Order is important here, last should be the default, first should be optional // see // https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653 @Import({ HttpClientFeignLoadBalancedConfiguration.class, OkHttpFeignLoadBalancedConfiguration.class, DefaultFeignLoadBalancedConfiguration.class }) public class FeignRibbonClientAutoConfiguration { @Bean @Primary @ConditionalOnMissingBean @ConditionalOnMissingClass(\\\"org.springframework.retry.support.RetryTemplate\\\") public CachingSpringLoadBalancerFactory cachingLBClientFactory( SpringClientFactory factory) { return new CachingSpringLoadBalancerFactory(factory); } @Bean @Primary @ConditionalOnMissingBean @ConditionalOnClass(name = \\\"org.springframework.retry.support.RetryTemplate\\\") public CachingSpringLoadBalancerFactory retryabeCachingLBClientFactory( SpringClientFactory factory, LoadBalancedRetryFactory retryFactory) { return new CachingSpringLoadBalancerFactory(factory, retryFactory); } @Bean @ConditionalOnMissingBean public Request.Options feignRequestOptions() { return LoadBalancerFeignClient.DEFAULT_OPTIONS; } } \",\"RibbonAutoConfiguration###SpringClientFactory\",\"@Configuration @Conditional(RibbonAutoConfiguration.RibbonClassesConditions.class) @RibbonClients @AutoConfigureAfter( name = \\\"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\\\") @AutoConfigureBefore({ LoadBalancerAutoConfiguration.class, AsyncLoadBalancerAutoConfiguration.class }) @EnableConfigurationProperties({ RibbonEagerLoadProperties.class, ServerIntrospectorProperties.class }) public class RibbonAutoConfiguration { @Bean @ConditionalOnMissingBean public SpringClientFactory springClientFactory() { SpringClientFactory factory = new SpringClientFactory(); factory.setConfigurations(this.configurations); return factory; } } \",\"LoadBalancerAutoConfiguration###LoadBalancedRetryFactory\",\"@Configuration(proxyBeanMethods = false) @ConditionalOnClass(RestTemplate.class) @ConditionalOnBean(LoadBalancerClient.class) @EnableConfigurationProperties(LoadBalancerRetryProperties.class) public class LoadBalancerAutoConfiguration { @Configuration(proxyBeanMethods = false) @ConditionalOnClass(RetryTemplate.class) public static class RetryAutoConfiguration { @Bean @ConditionalOnMissingBean public LoadBalancedRetryFactory loadBalancedRetryFactory() { return new LoadBalancedRetryFactory() { }; } } } \",\"RibbonClientConfiguration###ZoneAwareLoadBalancer\",\"@Configuration(proxyBeanMethods = false) @EnableConfigurationProperties // Order is important here, last should be the default, first should be optional // see // https://github.com/spring-cloud/spring-cloud-netflix/issues/2086#issuecomment-316281653 @Import({ HttpClientConfiguration.class, OkHttpRibbonConfiguration.class, RestClientRibbonConfiguration.class, HttpClientRibbonConfiguration.class }) public class RibbonClientConfiguration { @Bean @ConditionalOnMissingBean public ILoadBalancer ribbonLoadBalancer(IClientConfig config, ServerList<Server> serverList, ServerListFilter<Server> serverListFilter, IRule rule, IPing ping, ServerListUpdater serverListUpdater) { if (this.propertiesFactory.isSet(ILoadBalancer.class, name)) { return this.propertiesFactory.get(ILoadBalancer.class, config, name); } return new ZoneAwareLoadBalancer<>(config, rule, ping, serverList, serverListFilter, serverListUpdater); } } \"]},\"205\":{\"h\":\"Ribbon和Consul的配合\",\"t\":[\"@Configuration(proxyBeanMethods = false) @EnableConfigurationProperties @ConditionalOnConsulEnabled @ConditionalOnBean(SpringClientFactory.class) @ConditionalOnProperty(value = \\\"spring.cloud.consul.ribbon.enabled\\\", matchIfMissing = true) @AutoConfigureAfter(RibbonAutoConfiguration.class) @RibbonClients(defaultConfiguration = ConsulRibbonClientConfiguration.class) public class RibbonConsulAutoConfiguration { } \",\"ribbonServerList中通过consulClient找到提供服务的实例列表\",\"@Configuration(proxyBeanMethods = false) public class ConsulRibbonClientConfiguration { protected static final String VALUE_NOT_SET = \\\"__not__set__\\\"; protected static final String DEFAULT_NAMESPACE = \\\"ribbon\\\"; @Autowired private ConsulClient client; @Value(\\\"${ribbon.client.name}\\\") private String serviceId = \\\"client\\\"; public ConsulRibbonClientConfiguration() { } public ConsulRibbonClientConfiguration(String serviceId) { this.serviceId = serviceId; } @Bean @ConditionalOnMissingBean public ServerList<?> ribbonServerList(IClientConfig config, ConsulDiscoveryProperties properties) { ConsulServerList serverList = new ConsulServerList(this.client, properties); serverList.initWithNiwsConfig(config); return serverList; } } \"]},\"206\":{\"h\":\"Consul自动配置\",\"t\":[\"@Configuration(proxyBeanMethods = false) @EnableConfigurationProperties @ConditionalOnConsulEnabled public class ConsulAutoConfiguration { @Bean @ConditionalOnMissingBean public ConsulProperties consulProperties() { return new ConsulProperties(); } @Bean @ConditionalOnMissingBean public ConsulClient consulClient(ConsulProperties consulProperties) { final int agentPort = consulProperties.getPort(); final String agentHost = !StringUtils.isEmpty(consulProperties.getScheme()) ? consulProperties.getScheme() + \\\"://\\\" + consulProperties.getHost() : consulProperties.getHost(); if (consulProperties.getTls() != null) { ConsulProperties.TLSConfig tls = consulProperties.getTls(); TLSConfig tlsConfig = new TLSConfig(tls.getKeyStoreInstanceType(), tls.getCertificatePath(), tls.getCertificatePassword(), tls.getKeyStorePath(), tls.getKeyStorePassword()); return new ConsulClient(agentHost, agentPort, tlsConfig); } return new ConsulClient(agentHost, agentPort); } } \"]},\"207\":{\"h\":\"参考文章\",\"t\":[\"Spring Cloud NamedContextFactory 原理分析\",\"consul和ribbon集成的原理\"]},\"208\":{\"c\":[\"java\"]},\"209\":{\"c\":[\"spring\",\"consul\",\"ribbon\",\"feign\"]},\"210\":{\"h\":\"手写rpc\",\"t\":[\"├── consumer │ ├── pom.xml │ └── src │ ├── main │ │ └── java │ │ └── cn │ │ └── sparks │ │ └── Consumer.java #掉用方 ├── dyqrpc │ ├── pom.xml │ └── src │ ├── main │ │ └── java │ │ └── cn │ │ └── sparks │ │ ├── common │ │ │ └── Invocation.java # 接口定义（可自定义如何序列化） │ │ ├── protocol │ │ │ ├── DispatchServlet.java # 自定义DispatchServlet │ │ │ ├── HttpClient.java # Client端，供调用方使用 │ │ │ ├── HttpServerHandler.java # 处理rpc调用请求 │ │ │ └── HttpServer.java # 这里用tomcat，也可以自己用Netty实现 │ │ └── register │ │ └── LocalRegister.java # 本地方法注册 ├── pom.xml ├── producer │ ├── pom.xml │ └── src │ ├── main │ │ └── java │ │ └── cn │ │ └── sparks │ │ ├── HelloServiceImpl.java │ │ └── Provider.java # 服务提供方 ├── producer-common │ ├── pom.xml │ └── src │ ├── main │ │ └── java │ │ └── cn │ │ └── sparks │ │ └── HelloService.java # 服务提供方接口 \",\"RPC Client调用代码\",\"Invocation invocation = new Invocation(HelloService.class.getName(), \\\"sayHello\\\", new Class[]{String.class}, new Object[]{\\\"dyq\\\"}); HttpClient httpClient = new HttpClient(); String result = httpClient.send(\\\"localhost\\\", 8080, invocation); System.out.println(result); \",\"RPC 框架提供的Client\",\"public class HttpClient { public String send(String hostname, Integer port, Invocation invocation) { // 用户的配置 try { URL url = new URL(\\\"http\\\", hostname, port, \\\"/\\\"); HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection(); httpURLConnection.setRequestMethod(\\\"POST\\\"); httpURLConnection.setDoOutput(true); OutputStream outputStream = httpURLConnection.getOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(outputStream); oos.writeObject(invocation); oos.flush(); oos.close(); InputStream inputStream = httpURLConnection.getInputStream(); String result = IOUtils.toString(inputStream); return result; } catch (MalformedURLException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } return null; } } \",\"RPC 框架的Handler\",\"public class HttpServerHandler { public void handler(HttpServletRequest req, HttpServletResponse resp) { // 处理请求 -- 接口、方法、方法参数 // try { Invocation invocation = (Invocation) new ObjectInputStream(req.getInputStream()).readObject(); String interfaceName = invocation.getInterfaceName(); System.out.println(interfaceName); Class classImpl = LocalRegister.get(interfaceName); System.out.println(classImpl); Method method = classImpl.getMethod(invocation.getMethodName(), invocation.getParameterTypes()); String result = (String) method.invoke(classImpl.newInstance(), invocation.getParameters()); IOUtils.write(result, resp.getOutputStream()); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (NoSuchMethodException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (InstantiationException e) { e.printStackTrace(); } } } \"]},\"211\":{\"c\":[\"java\"]},\"212\":{\"c\":[\"rpc\"]},\"213\":{\"h\":\"netty骨架(自己实现的netty)\",\"t\":[\"netty线程模型\",\"register时序\",\"doStartThread方法会将SingleThreadEventExecutor.this.run()提交到线程池中执行，而该run方法由NioEventLoop负责实现。\"]},\"214\":{\"h\":\"各个类的功能\",\"t\":[\"类\",\"功能\",\"NioEventLoop\",\"事件循环---专注于处理事件(定义了处理事件的逻辑)，与如何运行、如何调度无关\",\"NioEventLoopGroup\",\"NioEventLoop的管理器\",\"EventLoop\",\"任务执行器\",\"EventLoopGroup\",\"EventLoop的管理器\",\"EventExecutor\",\"任务调度器\",\"EventExecutorGroup\",\"管理EventExecutor\",\"MultithreadEventExecutorGroup\",\"EventExecutorGroup的实现类\",\"SingleThreadEventLoop\",\"任务执行器的实现\",\"SingleThreadEventExecutor\",\"任务调度器的实现\",\"EventExecutor\"]},\"215\":{\"h\":\"Channel\",\"t\":[\"public interface Channel { //该方法很重要，我们都知道，一个selector可以注册多个channel，但是一个channel只能对应 //一个selector，一个selector对应着一个单线程执行器，所以一个channel就会对应一个单线程执行器 //该方法就是用来得到该channel对应的单线程执行器 EventLoop eventLoop(); /** * @Author: PP-jessica * @Description:该方法并不在此接口，而是在ChannelOutboundInvoker接口，现在先放在这里 */ ChannelFuture close(); /** * @Author: PP-jessica * @Description:该方法并不在此接口，而是在ChannelOutboundInvoker接口，现在先放在这里 */ void bind(SocketAddress localAddress, ChannelPromise promise); /** * @Author: PP-jessica * @Description:该方法并不在此接口，而是在ChannelOutboundInvoker接口，现在先放在这里 */ void connect(SocketAddress remoteAddress, final SocketAddress localAddress,ChannelPromise promise); //新增加的方法 public final void register(EventLoop eventLoop); } \",\"Channel实现类以及子类\"]},\"216\":{\"h\":\"参考文章\",\"t\":[\"Netty之EventLoop\"]},\"217\":{\"c\":[\"java\"]},\"218\":{\"c\":[\"netty\"]},\"219\":{\"h\":\"rocketmq-spring-boot-starter源码分析\"},\"220\":{\"h\":\"参考文章\",\"t\":[\"聊聊RocketMQMessageListener的实现机制\",\"RocketMQ源码分析\",\"springboot-rocketMQ-stater源码解析及优雅的整合方式\"]},\"221\":{\"c\":[\"java\"]},\"222\":{\"c\":[\"spring\",\"rocketmq\"]},\"223\":{\"h\":\"ribbon自定义配置\"},\"224\":{\"h\":\"参考文章\",\"t\":[\"Ribbon自定义配置--RibbonClientSpecification\"]},\"225\":{\"c\":[\"java\"]},\"226\":{\"c\":[\"load-balancer\"]},\"227\":{\"h\":\"spring-data-jpa使用\"},\"228\":{\"h\":\"参考文章\",\"t\":[\"spring-data-jpa使用\"]},\"229\":{\"c\":[\"java\"]},\"230\":{\"c\":[\"spring\",\"jpa\"]},\"231\":{\"h\":\"spring-statemachine使用\"},\"232\":{\"h\":\"参考文章\",\"t\":[\"spring-statemachine使用\"]},\"233\":{\"c\":[\"java\"]},\"234\":{\"c\":[\"spring\",\"statemachine\"]},\"235\":{\"h\":\"tomcat概述\",\"t\":[\"Tomcat 是 Servlet容器。\",\"Tomcat 是如何处理一个请求的？\"]},\"236\":{\"h\":\"Tomcat xml配置样例\",\"t\":[\"<?xml version='1.0' encoding='utf-8'?> <Server port=\\\"8005\\\" shutdown=\\\"SHUTDOWN\\\"> <Listener className=\\\"org.apache.catalina.core.AprLifecycleListener\\\" SSLEngine=\\\"on\\\" /> <Listener className=\\\"org.apache.catalina.core.JasperListener\\\" /> <Listener className=\\\"org.apache.catalina.core.JreMemoryLeakPreventionListener\\\" /> <Listener className=\\\"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener\\\" /> <Listener className=\\\"org.apache.catalina.core.ThreadLocalLeakPreventionListener\\\" /> <GlobalNamingResources> <Resource name=\\\"UserDatabase\\\" auth=\\\"Container\\\" type=\\\"org.apache.catalina.UserDatabase\\\" description=\\\"User database that can be updated and saved\\\" factory=\\\"org.apache.catalina.users.MemoryUserDatabaseFactory\\\" pathname=\\\"conf/tomcat-users.xml\\\" /> </GlobalNamingResources> <Service name=\\\"Catalina\\\"> <Connector port=\\\"8080\\\" protocol=\\\"HTTP/1.1\\\" connectionTimeout=\\\"20000\\\" redirectPort=\\\"8443\\\" /> <Connector port=\\\"8009\\\" protocol=\\\"AJP/1.3\\\" redirectPort=\\\"8443\\\" /> <Engine name=\\\"Catalina\\\" defaultHost=\\\"localhost\\\"> <Realm className=\\\"org.apache.catalina.realm.LockOutRealm\\\"> <Realm className=\\\"org.apache.catalina.realm.UserDatabaseRealm\\\" resourceName=\\\"UserDatabase\\\"/> </Realm> <Host name=\\\"localhost\\\" appBase=\\\"webapps\\\" unpackWARs=\\\"true\\\" autoDeploy=\\\"true\\\"> <Context path=\\\"/zhouyu\\\" docBase=\\\"/ideaProjects/HelloServelet/target/HelloServlet-1.0-SNAPSHOT\\\" > <Valve className=\\\"org.apache.catalina.valves.AccessLogValve\\\" directory=\\\"logs\\\" prefix=\\\"localhost_access_log.\\\" suffix=\\\".txt\\\" pattern=\\\"%h %l %u %t &quot;%r&quot; %s %b\\\" /> </Host> </Engine> </Service> </Server> \"]},\"237\":{\"h\":\"Engine\",\"t\":[\"Engine<--->集群\",\"List<Host> hosts \"]},\"238\":{\"h\":\"Host\",\"t\":[\"Host<--->虚拟主机\",\"List<Context> contexts \"]},\"239\":{\"h\":\"Context\",\"t\":[\"Context<--->应用\",\"List<Wrapper> wrappers \"]},\"240\":{\"h\":\"Wrapper\",\"t\":[\"Wrapper<--->Servlet类型\",\"List<Servlet> servlets \"]},\"241\":{\"h\":\"Tomcat处理一次http请求\",\"t\":[\"Tomcat处理http请求\"]},\"242\":{\"h\":\"参考文章\",\"t\":[\"Tomcat视角看一次http请求\"]},\"243\":{\"c\":[\"java\"]},\"244\":{\"c\":[\"tomcat\"]},\"245\":{\"h\":\"mybatis实现\"},\"246\":{\"h\":\"Mybatis的设计\",\"t\":[\"MyBatis 是一个持久层框架，它简化了在 Java 应用程序中与数据库的交互过程。MyBatis 的核心思想是将 SQL 语句与 Java 对象之间的映射关系配置在 XML 文件或者注解中，从而实现数据的持久化操作。\",\"以下是 MyBatis 的一些主要特点和优势：\",\"简单易用： MyBatis 的配置简单清晰，学习曲线较低，易于上手。\",\"灵活性： MyBatis 允许使用 SQL 来直接操作数据库，提供了更大的灵活性和控制力，可以优化 SQL 语句以提高性能。\",\"性能优异： MyBatis 采用了预编译 SQL、缓存等技术来提高数据库访问性能。\",\"可定制性： MyBatis 提供了丰富的插件机制，可以方便地扩展和定制框架的功能。\",\"支持注解和 XML 配置： MyBatis 可以使用注解或者 XML 文件来配置 SQL 映射关系，开发者可以根据实际需求选择更适合的方式。\",\"与 Spring 等框架集成： MyBatis 与 Spring、Spring Boot 等主流 Java 框架无缝集成，可以方便地在企业应用中使用。\",\"MyBatis 的工作原理主要包括以下几个步骤：\",\"定义 SQL 映射文件或者注解：将 SQL 语句与 Java 对象的映射关系配置在 XML 文件或者 Java 注解中。\",\"配置数据源和 SqlSessionFactory：配置数据源和 SqlSessionFactory，SqlSessionFactory 是 MyBatis 的主要入口点，用于创建 SqlSession 对象。\",\"创建 SqlSession：通过 SqlSessionFactory 创建 SqlSession 对象，用于执行 SQL 语句。\",\"执行 SQL 操作：在 SqlSession 中调用相应的 SQL 方法执行数据库操作，例如查询、插入、更新等。\",\"关闭 SqlSession：操作完成后关闭 SqlSession，释放资源。\",\"总的来说，MyBatis 是一个功能强大、灵活性高、易于上手的持久层框架，适用于各种规模的 Java 项目，并且在企业级应用中得到了广泛的应用。\",\"https://pdai.tech/md/framework/orm-mybatis/mybatis-y-sql-exec.html\"]},\"247\":{\"h\":\"Mybatis事务\"},\"248\":{\"h\":\"doGetTransaction源码分析\",\"t\":[\"doGetTransaction\"]},\"249\":{\"h\":\"Mybatis的事务如何被spring管理\",\"t\":[\"mybatis-springMybatis的事务如何被spring管理\"]},\"250\":{\"h\":\"杂项\",\"t\":[\"UnpooledDataSource源码分析\"]},\"251\":{\"h\":\"参考文章\",\"t\":[\"Java全栈知识\"]},\"252\":{\"c\":[\"java\"]},\"253\":{\"c\":[\"mybatis\"]},\"254\":{\"h\":\"orm框架实现\"},\"255\":{\"h\":\"实现一个简单的mybatis\"},\"256\":{\"h\":\"JDBC是什么\",\"t\":[\"JDBC（Java Database Connectivity）是Java语言用于与关系型数据库进行交互的一组API（应用程序编程接口）。它允许Java应用程序通过标准的数据库访问方法与数据库进行通信，执行SQL查询、更新数据库、检索和修改数据等操作。\",\"JDBC的核心组件包括以下几个部分：\",\"DriverManager：负责管理一组数据库驱动程序，并根据给定的数据库URL选择合适的驱动程序来建立与数据库的连接。\",\"Connection：表示与数据库的连接，通过Connection对象可以创建Statement对象、PreparedStatement对象和CallableStatement对象，以执行SQL语句和存储过程。\",\"Statement：用于执行静态SQL语句，可以是普通的Statement对象、带有参数的PreparedStatement对象或者可调用的CallableStatement对象。\",\"ResultSet：表示SQL查询的结果集，通过ResultSet对象可以获取查询结果中的数据。\",\"Connection connection = null; Statement statement = null; ResultSet resultSet = null; try { // 注册数据库驱动程序 Class.forName(\\\"com.mysql.jdbc.Driver\\\"); // 建立数据库连接 connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD); // 创建Statement对象 statement = connection.createStatement(); // 执行SQL查询语句 String sqlQuery = \\\"SELECT * FROM my_table\\\"; resultSet = statement.executeQuery(sqlQuery); // 处理查询结果集 while (resultSet.next()) { // 读取每一行数据并进行处理 int id = resultSet.getInt(\\\"id\\\"); String name = resultSet.getString(\\\"name\\\"); // 其他列的处理 // 输出结果 System.out.println(\\\"ID: \\\" + id + \\\", Name: \\\" + name); } } catch (...) { ... } \"]},\"257\":{\"h\":\"ORM是什么\",\"t\":[\"以上是一个使用JDBC的样例，可以看出比较麻烦，因此ORM被提出。\",\"ORM（对象关系映射）是一种编程技术，用于在面向对象编程语言和关系型数据库之间建立映射关系。它允许开发人员使用面向对象的方式操作数据库，而不必关心数据库的底层细节和SQL语句的编写。\",\"orm框架\",\"有了ORM框架后，开发人员只需定义一个Mapper接口\",\"public interface IUserDao { User queryUserInfoById(Long id); } \",\"此外，提供对应这个Mapper接口的配置xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <!DOCTYPE mapper PUBLIC \\\"-//mybatis.org//DTD Mapper 3.0//EN\\\" \\\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\\\"> <mapper namespace=\\\"com.sparks.middleware.test.po.IUserDao\\\"> <select id=\\\"queryUserInfoById\\\" parameterType=\\\"java.lang.Long\\\" resultType=\\\"com.sparks.middleware.test.dao.User\\\"> SELECT id, userId, userNickName, userHead, userPassword, createTime FROM user where id = #{id} </select> <select id=\\\"queryUserList\\\" parameterType=\\\"com.sparks.middleware.test.dao.User\\\" resultType=\\\"com.sparks.middleware.test.dao.User\\\"> SELECT id, userId, userNickName, userHead, userPassword, createTime, updateTime FROM user where userNickName = #{userNickName} </select> </mapper> \",\"即可使用面向对象的方式操作数据库\",\"BeanFactory beanFactory = new ClassPathXmlApplicationContext(\\\"spring-config.xml\\\"); IUserDao userDao = beanFactory.getBean(\\\"IUserDao\\\", IUserDao.class); User user = userDao.queryUserInfoById(1L); logger.info(\\\"测试结果：{}\\\", JSON.toJSONString(user)); \"]},\"258\":{\"h\":\"简单ORM设计\"},\"259\":{\"h\":\"动态代理\",\"t\":[\"上述用法中开发者只需针对MySQL的一张表定义一个接口，接口中定义操作数据库的方法，再在xml配置文件中定义参数类型、返回值类型以及SQL语句即可操作。\",\"接口方法\",\"入参\",\"返回参数\",\"SQL语句\",\"queryUserInfoById\",\"Long\",\"User\",\"SELECT ...\",\"要实现上述功能，需要用到Java的动态代理(Java Proxy或者Cglib)。\"]},\"260\":{\"h\":\"SqlSession\",\"t\":[\"为了向用户屏蔽JDBC的细节，动态代理的代理逻辑中，我们需要实现与数据库交互的逻辑，为此设计了SqlSession接口，在其实现类中完成这些工作。\",\"public interface SqlSession { <T> T selectOne(String statement); <T> T selectOne(String statement, Object parameter); <T> List<T> selectList(String statement); <T> List<T> selectList(String statement, Object parameter); void close(); } \",\"它的实现类是DefaultSqlSession\",\"public class DefaultSqlSession implements SqlSession { private Connection connection; private Map<String, XNode> mapperElement; public DefaultSqlSession(Connection connection, Map<String, XNode> mapperElement) { this.connection = connection; this.mapperElement = mapperElement; } @Override public <T> T selectOne(String statement, Object parameter) { try { XNode xNode = mapperElement.get(statement); Map<Integer, String> parameterMap = xNode.getParameter(); PreparedStatement preparedStatement = connection.prepareStatement(xNode.getSql()); buildParameter(preparedStatement, parameter, parameterMap); ResultSet resultSet = preparedStatement.executeQuery(); List<T> objects = resultSet2Obj(resultSet, Class.forName(xNode.getResultType())); return objects.get(0); } catch (Exception e) { e.printStackTrace(); } return null; } } \",\"在其实现类中，完成了参数映射、SQL解析、SQL执行、结果映射。\",\"JDBC细节屏蔽\",\"获取SqlSession的时序图如下\",\"获取sqlSession的时序图\",\"最终的代理逻辑如下\",\"InvocationHandler handler = (proxy, method, args) -> { logger.info(\\\"你被代理了，执行SQL操作！{}\\\", method.getName()); try { SqlSession session = sqlSessionFactory.openSession(); try { return session.selectOne(mapperInterface.getName() + \\\".\\\" + method.getName(), args[0]); } finally { session.close(); } } catch (Exception e) { e.printStackTrace(); } return method.getReturnType().newInstance(); }; return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{mapperInterface}, handler); \",\"实现了以上逻辑后，用户使用样例如下\",\"SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); InvocationHandler handler = (proxy, method, arg) -> { try { SqlSession sess = sqlSessionFactory.openSession(); try { return sess.selectOne(IUserDao.class.getName() + \\\".\\\" + method.getName(), arg[0]); } finally { sess.close(); } } catch (Exception e) { e.printStackTrace(); } return method.getReturnType().newInstance(); }; IUserDao iUserDao = (IUserDao) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{IUserDao.class}, handler); try { User user = iUserDao.queryUserInfoById(1L); ... } ... \"]},\"261\":{\"h\":\"集成Spring\",\"t\":[\"在上述ORM实现中，用户需要针对数据库每个表的接口手动生成代理对象，操作繁琐。 通过使用spring的扩展点，可以自动生成。 Spring扩展点的相关内容可以参考下述链接。spring扩展点\",\"通过实现BeanDefinitionRegistryPostProcessor接口，重写其postProcessBeanDefinitionRegistry方法可以在spring的beanDefinitionMap中新增我们需要的代理类的beanDefinition\",\"public class MapperScannerConfigurer implements BeanDefinitionRegistryPostProcessor { private String basePackage; private SqlSessionFactory sqlSessionFactory; @Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException { try { // classpath*:cn/bugstack/**/dao/**/*.class String packageSearchPath = \\\"classpath*:\\\" + basePackage.replace('.', '/') + \\\"/**/*.class\\\"; ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver(); Resource[] resources = resourcePatternResolver.getResources(packageSearchPath); for (Resource resource : resources) { MetadataReader metadataReader = new SimpleMetadataReader(resource, ClassUtils.getDefaultClassLoader()); ScannedGenericBeanDefinition beanDefinition = new ScannedGenericBeanDefinition(metadataReader); String beanName = Introspector.decapitalize(ClassUtils.getShortName(beanDefinition.getBeanClassName())); beanDefinition.setResource(resource); beanDefinition.setSource(resource); beanDefinition.setScope(\\\"singleton\\\"); beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(beanDefinition.getBeanClassName()); beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(sqlSessionFactory); beanDefinition.setBeanClass(MapperFactoryBean.class); BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(beanDefinition, beanName); registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition()); } } catch (IOException e) { e.printStackTrace(); } } @Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { // left intentionally blank } public void setBasePackage(String basePackage) { this.basePackage = basePackage; } public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) { this.sqlSessionFactory = sqlSessionFactory; } } \",\"注意到上面的beanDefinition的BeanClass为MapperFactoryBean，这是一个FactoryBean，用于创建复杂对象或者具有特殊构建逻辑的对象。FactoryBean介绍\",\"public class MapperFactoryBean<T> implements FactoryBean<T> { private Logger logger = LoggerFactory.getLogger(MapperFactoryBean.class); private Class<T> mapperInterface; private SqlSessionFactory sqlSessionFactory; public MapperFactoryBean(Class<T> mapperInterface, SqlSessionFactory sqlSessionFactory) { this.mapperInterface = mapperInterface; this.sqlSessionFactory = sqlSessionFactory; } @Override public T getObject() throws Exception { InvocationHandler handler = (proxy, method, args) -> { logger.info(\\\"你被代理了，执行SQL操作！{}\\\", method.getName()); try { SqlSession session = sqlSessionFactory.openSession(); try { return session.selectOne(mapperInterface.getName() + \\\".\\\" + method.getName(), args[0]); } finally { session.close(); } } catch (Exception e) { e.printStackTrace(); } return method.getReturnType().newInstance(); }; return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), new Class[]{mapperInterface}, handler); } @Override public Class<?> getObjectType() { return mapperInterface; } @Override public boolean isSingleton() { return true; } } \",\"在本文的ORM实现中，MapperFactoryBean用于生产数据表操作接口的代理对象。\",\"同样的，我们还可以利用FactoryBean来生产SqlSessionFactory，在使用时就不需要自己定义该对象。\",\"public class SqlSessionFactoryBean implements FactoryBean<SqlSessionFactory>, InitializingBean { private String resource; private SqlSessionFactory sqlSessionFactory; @Override public void afterPropertiesSet() throws Exception { try (Reader reader = Resources.getResourceAsReader(resource)) { this.sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); } catch (Exception e) { e.printStackTrace(); } } @Override public SqlSessionFactory getObject() throws Exception { return sqlSessionFactory; } @Override public Class<?> getObjectType() { return sqlSessionFactory.getClass(); } @Override public boolean isSingleton() { return true; } public void setResource(String resource) { this.resource = resource; } } \",\"集成spring后，该ORM的用法为\",\"BeanFactory beanFactory = new ClassPathXmlApplicationContext(\\\"spring-config.xml\\\"); IUserDao userDao = beanFactory.getBean(\\\"IUserDao\\\", IUserDao.class); User user = userDao.queryUserInfoById(1L); \"]},\"262\":{\"c\":[\"java\"]},\"263\":{\"c\":[\"orm\"]},\"264\":{\"h\":\"spring整合spring-statemachine\"},\"265\":{\"h\":\"整合spring\",\"t\":[\"statemachine整合spring\",\"AbstractImportingAnnotationConfiguration实现了ImportBeanDefinitionRegistrar接口，重写registerBeanDefinitions方法，往spring容器中放入了StateMachineDelegatingFactoryBean类，且构造函数的方法如下：\",\"builder = new StateMachineConfigBuilder<S, E>(); beanDefinitionBuilder.addConstructorArgValue(builder); beanDefinitionBuilder.addConstructorArgValue(StateMachine.class); beanDefinitionBuilder.addConstructorArgValue(importingClassMetadata.getClassName()); beanDefinitionBuilder.addConstructorArgValue(contextEvents); \",\"public abstract class AbstractImportingAnnotationConfiguration<B extends AnnotationBuilder<O>, O> implements ImportBeanDefinitionRegistrar, BeanFactoryAware, EnvironmentAware { @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) { List<Class<? extends Annotation>> annotationTypes = getAnnotations(); Class<? extends Annotation> namedAnnotation = null; String[] names = null; ScopedProxyMode proxyMode = null; if (annotationTypes != null) { for (Class<? extends Annotation> annotationType : annotationTypes) { AnnotationAttributes attributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes( annotationType.getName(), false)); if (attributes != null && attributes.containsKey(\\\"name\\\")) { names = attributes.getStringArray(\\\"name\\\"); namedAnnotation = annotationType; break; } } } // check if Scope annotation is defined and get proxyMode from it AnnotationAttributes scopeAttributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes( Scope.class.getName(), false)); if (scopeAttributes != null) { proxyMode = scopeAttributes.getEnum(\\\"proxyMode\\\"); } BeanDefinition beanDefinition; try { beanDefinition = buildBeanDefinition(importingClassMetadata, namedAnnotation); } catch (Exception e) { throw new RuntimeException(\\\"Error with onConfigurers\\\", e); } // implementation didn't return definition so don't continue registration if (beanDefinition == null) { return; } if (ObjectUtils.isEmpty(names)) { // ok, name(s) not given, generate one names = new String[] { beanNameGenerator.generateBeanName(beanDefinition, registry) }; } registry.registerBeanDefinition(names[0], beanDefinition); if (names.length > 1) { for (int i = 1; i < names.length; i++) { registry.registerAlias(names[0], names[i]); } } // wrap in scoped proxy if needed if (proxyMode != null && proxyMode != ScopedProxyMode.DEFAULT && proxyMode != ScopedProxyMode.NO) { BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(beanDefinition, names[0]); BeanDefinitionHolder scopedProxy = null; if (proxyMode == ScopedProxyMode.TARGET_CLASS) { scopedProxy = ScopedProxyUtils.createScopedProxy(definitionHolder, registry, true); } else if (proxyMode == ScopedProxyMode.INTERFACES) { scopedProxy = ScopedProxyUtils.createScopedProxy(definitionHolder, registry, false); } else { throw new IllegalArgumentException(\\\"Unknown proxyMode \\\" + proxyMode); } BeanDefinitionReaderUtils.registerBeanDefinition(scopedProxy, registry); } } } \",\"@Configuration public class StateMachineConfiguration<S, E> extends AbstractImportingAnnotationConfiguration<StateMachineConfigBuilder<S, E>, StateMachineConfig<S, E>> { @Override protected BeanDefinition buildBeanDefinition(AnnotationMetadata importingClassMetadata, Class<? extends Annotation> namedAnnotation) throws Exception { String enableStateMachineEnclosingClassName = importingClassMetadata.getClassName(); // for below classloader, see gh122 Class<?> enableStateMachineEnclosingClass = ClassUtils.forName(enableStateMachineEnclosingClassName, ClassUtils.getDefaultClassLoader()); // return null if it looks like @EnableStateMachine was annotated with class // not extending StateMachineConfigurer. if (!ClassUtils.isAssignable(StateMachineConfigurer.class, enableStateMachineEnclosingClass)) { return null; } BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder .rootBeanDefinition(StateMachineDelegatingFactoryBean.class); AnnotationAttributes esmAttributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes( EnableStateMachine.class.getName(), false)); Boolean contextEvents = esmAttributes.getBoolean(\\\"contextEvents\\\"); // check if Scope annotation is defined and set scope from it AnnotationAttributes scopeAttributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes( Scope.class.getName(), false)); if (scopeAttributes != null) { String scope = scopeAttributes.getString(\\\"value\\\"); if (StringUtils.hasText(scope)) { beanDefinitionBuilder.setScope(scope); } } beanDefinitionBuilder.addConstructorArgValue(builder); beanDefinitionBuilder.addConstructorArgValue(StateMachine.class); beanDefinitionBuilder.addConstructorArgValue(importingClassMetadata.getClassName()); beanDefinitionBuilder.addConstructorArgValue(contextEvents); AbstractBeanDefinition beanDefinition = beanDefinitionBuilder.getBeanDefinition(); // try to add more info about generics ResolvableType type = resolveFactoryObjectType(enableStateMachineEnclosingClass); if (type != null && beanDefinition instanceof RootBeanDefinition) { ((RootBeanDefinition)beanDefinition).setTargetType(type); } return beanDefinition; } } \"]},\"266\":{\"h\":\"生产statemachine\",\"t\":[\"生产statemachine\",\"BeanDelegatingFactoryBean 实现了InitializingBean\",\"protected abstract static class BeanDelegatingFactoryBean<T, B extends AnnotationBuilder<O>, O> implements FactoryBean<T>, BeanFactoryAware, InitializingBean, DisposableBean \",\"StateMachineDelegatingFactoryBean 继承BeanDelegatingFactoryBean\",\"private static class StateMachineDelegatingFactoryBean<S, E> extends BeanDelegatingFactoryBean<StateMachine<S, E>,StateMachineConfigBuilder<S, E>,StateMachineConfig<S, E>> implements SmartLifecycle, BeanNameAware, BeanClassLoaderAware { @Override public void afterPropertiesSet() throws Exception { AnnotationConfigurer<StateMachineConfig<S, E>, StateMachineConfigBuilder<S, E>> configurer = (AnnotationConfigurer<StateMachineConfig<S, E>, StateMachineConfigBuilder<S, E>>) getBeanFactory() .getBean(ClassUtils.forName(clazzName, classLoader)); getBuilder().apply(configurer); StateMachineConfig<S, E> stateMachineConfig = getBuilder().getOrBuild(); TransitionsData<S, E> stateMachineTransitions = stateMachineConfig.getTransitions(); StatesData<S, E> stateMachineStates = stateMachineConfig.getStates(); ConfigurationData<S, E> stateMachineConfigurationConfig = stateMachineConfig.getStateMachineConfigurationConfig(); ObjectStateMachineFactory<S, E> stateMachineFactory = null; if (stateMachineConfig.getModel() != null && stateMachineConfig.getModel().getFactory() != null) { stateMachineFactory = new ObjectStateMachineFactory<S, E>( new DefaultStateMachineModel<S, E>(stateMachineConfigurationConfig, null, null), stateMachineConfig.getModel().getFactory()); } else { stateMachineFactory = new ObjectStateMachineFactory<S, E>(new DefaultStateMachineModel<S, E>( stateMachineConfigurationConfig, stateMachineStates, stateMachineTransitions), null); } stateMachineFactory.setBeanFactory(getBeanFactory()); stateMachineFactory.setContextEventsEnabled(contextEvents); stateMachineFactory.setBeanName(beanName); stateMachineFactory.setHandleAutostartup(stateMachineConfigurationConfig.isAutoStart()); if (stateMachineMonitor != null) { stateMachineFactory.setStateMachineMonitor(stateMachineMonitor); } StateMachine<S, E> stateMachine = stateMachineFactory.getStateMachine(); this.lifecycle = (SmartLifecycle) stateMachine; this.disposableBean = (DisposableBean) stateMachine; setObject(stateMachine); } } \"]},\"267\":{\"c\":[\"java\"]},\"268\":{\"c\":[\"spring\",\"statemachine\"]},\"269\":{\"h\":\"spring整合apollo\"},\"270\":{\"h\":\"参考文章\",\"t\":[\"Apollo配置中心搭建\",\"SpringBoot集成Apollo配置中心\"]},\"271\":{\"c\":[\"java\"]},\"272\":{\"c\":[\"spring\",\"apollo\",\"配置中心\"]},\"273\":{\"h\":\"spring整合consul\"},\"274\":{\"h\":\"安装\",\"t\":[\"brew tap hashicorp/tap brew install hashicorp/tap/consul To start hashicorp/tap/consul now and restart at login: brew services start hashicorp/tap/consul Or, if you don't want/need a background service you can just run: /usr/local/opt/consul/bin/consul agent -dev -bind 127.0.0.1 \"]},\"275\":{\"h\":\"参考文章\",\"t\":[\"安装consul\",\"spring集成consul\",\"consul源码分析\"]},\"276\":{\"c\":[\"java\"]},\"277\":{\"c\":[\"spring\",\"consul\",\"注册中心\"]},\"278\":{\"h\":\"spring整合feign\",\"t\":[\"EnableFeignClients注解引入了FeignClientsRegistrar.class\",\"@Retention(RetentionPolicy.RUNTIME) @Target(ElementType.TYPE) @Documented @Import(FeignClientsRegistrar.class) public @interface EnableFeignClients \",\"FeignClientsRegistrar实现了ImportBeanDefinitionRegistrar接口，重写registerBeanDefinitions方法往beanDefinitionsMap中增加Feign框架中所需要的beanDefinition\",\"class FeignClientsRegistrar implements ImportBeanDefinitionRegistrar, ResourceLoaderAware, EnvironmentAware { @Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) { registerDefaultConfiguration(metadata, registry); registerFeignClients(metadata, registry); } } \",\"如果basePackages目录下有FeignClient注解的类，调用registerFeignClient\",\"private void registerFeignClient(BeanDefinitionRegistry registry, AnnotationMetadata annotationMetadata, Map<String, Object> attributes) { String className = annotationMetadata.getClassName(); Class clazz = ClassUtils.resolveClassName(className, null); ConfigurableBeanFactory beanFactory = registry instanceof ConfigurableBeanFactory ? (ConfigurableBeanFactory) registry : null; String contextId = getContextId(beanFactory, attributes); String name = getName(attributes); FeignClientFactoryBean factoryBean = new FeignClientFactoryBean(); factoryBean.setBeanFactory(beanFactory); factoryBean.setName(name); factoryBean.setContextId(contextId); factoryBean.setType(clazz); BeanDefinitionBuilder definition = BeanDefinitionBuilder .genericBeanDefinition(clazz, () -> { factoryBean.setUrl(getUrl(beanFactory, attributes)); factoryBean.setPath(getPath(beanFactory, attributes)); factoryBean.setDecode404(Boolean .parseBoolean(String.valueOf(attributes.get(\\\"decode404\\\")))); Object fallback = attributes.get(\\\"fallback\\\"); if (fallback != null) { factoryBean.setFallback(fallback instanceof Class ? (Class<?>) fallback : ClassUtils.resolveClassName(fallback.toString(), null)); } Object fallbackFactory = attributes.get(\\\"fallbackFactory\\\"); if (fallbackFactory != null) { factoryBean.setFallbackFactory(fallbackFactory instanceof Class ? (Class<?>) fallbackFactory : ClassUtils.resolveClassName(fallbackFactory.toString(), null)); } return factoryBean.getObject(); }); definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE); definition.setLazyInit(true); validate(attributes); String alias = contextId + \\\"FeignClient\\\"; AbstractBeanDefinition beanDefinition = definition.getBeanDefinition(); beanDefinition.setAttribute(FactoryBean.OBJECT_TYPE_ATTRIBUTE, className); beanDefinition.setAttribute(\\\"feignClientsRegistrarFactoryBean\\\", factoryBean); // has a default, won't be null boolean primary = (Boolean) attributes.get(\\\"primary\\\"); beanDefinition.setPrimary(primary); String qualifier = getQualifier(attributes); if (StringUtils.hasText(qualifier)) { alias = qualifier; } BeanDefinitionHolder holder = new BeanDefinitionHolder(beanDefinition, className, new String[] { alias }); BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry); } \",\"FeignClientFactoryBean\",\"public class FeignClientFactoryBean implements FactoryBean<Object>, InitializingBean, ApplicationContextAware, BeanFactoryAware { @Override public Object getObject() { return getTarget(); } /** * @param <T> the target type of the Feign client * @return a {@link Feign} client created with the specified data and the context * information */ <T> T getTarget() { FeignContext context = beanFactory != null ? beanFactory.getBean(FeignContext.class) : applicationContext.getBean(FeignContext.class); Feign.Builder builder = feign(context); if (!StringUtils.hasText(url)) { if (!name.startsWith(\\\"http\\\")) { url = \\\"http://\\\" + name; } else { url = name; } url += cleanPath(); return (T) loadBalance(builder, context, new HardCodedTarget<>(type, name, url)); } if (StringUtils.hasText(url) && !url.startsWith(\\\"http\\\")) { url = \\\"http://\\\" + url; } String url = this.url + cleanPath(); Client client = getOptional(context, Client.class); if (client != null) { if (client instanceof LoadBalancerFeignClient) { // not load balancing because we have a url, // but ribbon is on the classpath, so unwrap client = ((LoadBalancerFeignClient) client).getDelegate(); } if (client instanceof FeignBlockingLoadBalancerClient) { // not load balancing because we have a url, // but Spring Cloud LoadBalancer is on the classpath, so unwrap client = ((FeignBlockingLoadBalancerClient) client).getDelegate(); } builder.client(client); } Targeter targeter = get(context, Targeter.class); return (T) targeter.target(this, builder, context, new HardCodedTarget<>(type, name, url)); } } \",\"默认注入LoadBalancerFeignClient\",\"@Configuration(proxyBeanMethods = false) class DefaultFeignLoadBalancedConfiguration { @Bean @ConditionalOnMissingBean public Client feignClient(CachingSpringLoadBalancerFactory cachingFactory, SpringClientFactory clientFactory) { return new LoadBalancerFeignClient(new Client.Default(null, null), cachingFactory, clientFactory); } } \"]},\"279\":{\"h\":\"参考文章\",\"t\":[\"feign代理类创建流程\",\"feign代理类handler执行流程\",\"微服务学习之Consul与Feign\"]},\"280\":{\"c\":[\"java\"]},\"281\":{\"c\":[\"spring\",\"feign\",\"rpc\"]},\"282\":{\"h\":\"spring整合jdbc\",\"t\":[\"spring条件注解jdbc使用\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-jdbc</artifactId> <scope>runtime</scope> </dependency> \",\"新增上述maven依赖后，PooledDataSourceAvailableCondition条件返回true。\",\"static class PooledDataSourceAvailableCondition extends SpringBootCondition { @Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) { ConditionMessage.Builder message = ConditionMessage.forCondition(\\\"PooledDataSource\\\"); if (DataSourceBuilder.findType(context.getClassLoader()) != null) { return ConditionOutcome.match(message.foundExactly(\\\"supported DataSource\\\")); } return ConditionOutcome.noMatch(message.didNotFind(\\\"supported DataSource\\\").atAll()); } } public static Class<? extends DataSource> findType(ClassLoader classLoader) { for (String name : DATA_SOURCE_TYPE_NAMES) { try { return (Class<? extends DataSource>) ClassUtils.forName(name, classLoader); } catch (Exception ex) { // Swallow and continue } } return null; } \",\"之后会Import以下这个类，生成DataSource的实例\",\"@Configuration(proxyBeanMethods = false) @ConditionalOnClass(HikariDataSource.class) @ConditionalOnMissingBean(DataSource.class) @ConditionalOnProperty(name = \\\"spring.datasource.type\\\", havingValue = \\\"com.zaxxer.hikari.HikariDataSource\\\", matchIfMissing = true) static class Hikari { @Bean @ConfigurationProperties(prefix = \\\"spring.datasource.hikari\\\") HikariDataSource dataSource(DataSourceProperties properties) { HikariDataSource dataSource = createDataSource(properties, HikariDataSource.class); if (StringUtils.hasText(properties.getName())) { dataSource.setPoolName(properties.getName()); } return dataSource; } } \",\"会用到application.properties中的配置DataSourceProperties，前缀是spring.datasource\",\"@ConfigurationProperties(prefix = \\\"spring.datasource\\\") public class DataSourceProperties implements BeanClassLoaderAware, InitializingBean { } \",\"整合spring-boot-starter-jdbc后，查询数据库写法\",\"Connection connection = dataSource.getConnection(); ResultSet resultSet = connection.createStatement().executeQuery(\\\"SELECT * FROM customer WHERE id = 1\\\"); while (resultSet.next()) { log.info(\\\"id:{},name:{}\\\", resultSet.getLong(\\\"id\\\"), resultSet.getString(\\\"customer_name\\\")); } resultSet.close(); connection.close(); \"]},\"283\":{\"h\":\"参考文章\",\"t\":[\"SpringBoot2.x入门教程：引入jdbc模块与JdbcTemplate简单使用数据库连接池之Hikari源码解析HikariCP源码阅读（四）获取与创建连接Spring Data之DataSource创建及源码分析\"]},\"284\":{\"c\":[\"java\"]},\"285\":{\"c\":[\"spring\",\"jdbc\"]},\"286\":{\"h\":\"spring整合rocketmq\"},\"287\":{\"h\":\"参考文章\",\"t\":[\"SpringBoot 整合 RocketMQ : 实战与源码解析一网打尽\"]},\"288\":{\"c\":[\"java\"]},\"289\":{\"c\":[\"spring\",\"rocketmq\"]},\"290\":{\"h\":\"spring整合sharding-jdbc\"},\"291\":{\"h\":\"参考文章\",\"t\":[\"Sharding-JDBC 源码之启动流程分析ShardingJDBC源码阅读（二）创建ShardingDataSourceSharding-JDBC介绍\"]},\"292\":{\"c\":[\"java\"]},\"293\":{\"c\":[\"sharding-jdbc\",\"spring\"]},\"294\":{\"h\":\"Distributed System\"},\"295\":{\"h\":\"Intro\"},\"296\":{\"h\":\"Java\"},\"297\":{\"h\":\"Mysql\"},\"298\":{\"h\":\"Database\"},\"299\":{\"h\":\"K8s\"},\"300\":{\"h\":\"Microservice\"},\"301\":{\"h\":\"Raft\"},\"302\":{\"h\":\"React\"},\"303\":{\"h\":\"Frontend\"},\"304\":{\"h\":\"Mybatis\"},\"305\":{\"h\":\"Bussiness Design\"},\"306\":{\"h\":\"Jvm\"},\"307\":{\"h\":\"Idea\"},\"308\":{\"h\":\"Source\"},\"309\":{\"h\":\"Spring\"},\"310\":{\"h\":\"Career\"},\"311\":{\"h\":\"Others\"},\"312\":{\"h\":\"Mac\"},\"313\":{\"h\":\"Webtools\"},\"314\":{\"h\":\"Feign\"},\"315\":{\"h\":\"Awesome Project\"},\"316\":{\"h\":\"Netty\"},\"317\":{\"h\":\"Rocketmq\"},\"318\":{\"h\":\"Ribbon\"},\"319\":{\"h\":\"Spring Data Jpa\"},\"320\":{\"h\":\"Spring Statemachine\"},\"321\":{\"h\":\"Tomcat\"},\"322\":{\"h\":\"Mini Mybatis\"},\"323\":{\"h\":\"Spring Starter\"}},\"dirtCount\":0,\"index\":[[\"二\",{\"1\":{\"291\":1}}],[\"源码之启动流程分析shardingjdbc源码阅读\",{\"1\":{\"291\":1}}],[\"四\",{\"1\":{\"283\":1}}],[\"引入jdbc模块与jdbctemplate简单使用数据库连接池之hikari源码解析hikaricp源码阅读\",{\"1\":{\"283\":1}}],[\"查询数据库写法\",{\"1\":{\"282\":1}}],[\"查询优惠券\",{\"1\":{\"81\":1}}],[\"前缀是spring\",{\"1\":{\"282\":1}}],[\"前端\",{\"2\":{\"61\":1,\"67\":1}}],[\"生成datasource的实例\",{\"1\":{\"282\":1}}],[\"生产statemachine\",{\"0\":{\"266\":1},\"1\":{\"266\":1}}],[\"之后会import以下这个类\",{\"1\":{\"282\":1}}],[\"新增上述maven依赖后\",{\"1\":{\"282\":1}}],[\"新增加的方法\",{\"1\":{\"215\":1}}],[\"默认注入loadbalancerfeignclient\",{\"1\":{\"278\":1}}],[\"调用registerfeignclient\",{\"1\":{\"278\":1}}],[\"调用postprocessbeandefinitionregistry方法\",{\"1\":{\"173\":2}}],[\"安装consul\",{\"1\":{\"275\":1}}],[\"安装\",{\"0\":{\"274\":1}}],[\"继承beandelegatingfactorybean\",{\"1\":{\"266\":1}}],[\"且构造函数的方法如下\",{\"1\":{\"265\":1}}],[\"且加上事务同步\",{\"1\":{\"148\":1}}],[\"往spring容器中放入了statemachinedelegatingfactorybean类\",{\"1\":{\"265\":1}}],[\"同样的\",{\"1\":{\"261\":1}}],[\"集成spring后\",{\"1\":{\"261\":1}}],[\"集成spring\",{\"0\":{\"261\":1}}],[\"获取与创建连接spring\",{\"1\":{\"283\":1}}],[\"获取sqlsession的时序图\",{\"1\":{\"260\":1}}],[\"获取sqlsession的时序图如下\",{\"1\":{\"260\":1}}],[\"获取所有配置的beandefinitionregistrypostprocessor\",{\"1\":{\"173\":1}}],[\"获取所有硬编码的beandefinitionregistrypostprocessor\",{\"1\":{\"173\":1}}],[\"结果映射\",{\"1\":{\"260\":1}}],[\"完成了参数映射\",{\"1\":{\"260\":1}}],[\"我们还可以利用factorybean来生产sqlsessionfactory\",{\"1\":{\"261\":1}}],[\"我们需要实现与数据库交互的逻辑\",{\"1\":{\"260\":1}}],[\"我们都知道\",{\"1\":{\"215\":1}}],[\"为此设计了sqlsession接口\",{\"1\":{\"260\":1}}],[\"为了向用户屏蔽jdbc的细节\",{\"1\":{\"260\":1}}],[\"为什么这么好用\",{\"0\":{\"64\":1}}],[\"需要用到java的动态代理\",{\"1\":{\"259\":1}}],[\"需要新开启事务\",{\"1\":{\"148\":1}}],[\"要实现上述功能\",{\"1\":{\"259\":1}}],[\"入参\",{\"1\":{\"259\":1}}],[\"再在xml配置文件中定义参数类型\",{\"1\":{\"259\":1}}],[\"上述用法中开发者只需针对mysql的一张表定义一个接口\",{\"1\":{\"259\":1}}],[\"上述2\",{\"1\":{\"160\":1}}],[\"动态代理的代理逻辑中\",{\"1\":{\"260\":1}}],[\"动态代理\",{\"0\":{\"259\":1}}],[\"动态绑定机制\",{\"1\":{\"126\":1}}],[\"测试结果\",{\"1\":{\"257\":1}}],[\"此外\",{\"1\":{\"257\":1}}],[\"此时如果有cservice也依赖aservice\",{\"1\":{\"161\":1}}],[\"此时s1再给s0发rpc请求\",{\"1\":{\"47\":1}}],[\"因此orm被提出\",{\"1\":{\"257\":1}}],[\"因此不能添加到单例池\",{\"1\":{\"161\":1}}],[\"因此不会更新节点的值\",{\"1\":{\"42\":1}}],[\"输出结果\",{\"1\":{\"256\":1}}],[\"其他列的处理\",{\"1\":{\"256\":1}}],[\"其中某些特殊的类可以扫描\",{\"1\":{\"175\":1}}],[\"其中会调用selectimports方法\",{\"1\":{\"175\":1}}],[\"其中一个状态钩子如下\",{\"1\":{\"59\":1}}],[\"读取每一行数据并进行处理\",{\"1\":{\"256\":1}}],[\"建立数据库连接\",{\"1\":{\"256\":1}}],[\"建立好的连接来用\",{\"1\":{\"126\":1}}],[\"注册中心\",{\"2\":{\"277\":1}}],[\"注册数据库驱动程序\",{\"1\":{\"256\":1}}],[\"注意到上面的beandefinition的beanclass为mapperfactorybean\",{\"1\":{\"261\":1}}],[\"注解中\",{\"1\":{\"246\":1}}],[\"注解处理时机\",{\"0\":{\"183\":1}}],[\"注解\",{\"1\":{\"174\":4,\"183\":1}}],[\"表示sql查询的结果集\",{\"1\":{\"256\":1}}],[\"表示与数据库的连接\",{\"1\":{\"256\":1}}],[\"带有参数的preparedstatement对象或者可调用的callablestatement对象\",{\"1\":{\"256\":1}}],[\"并根据给定的数据库url选择合适的驱动程序来建立与数据库的连接\",{\"1\":{\"256\":1}}],[\"并且在企业级应用中得到了广泛的应用\",{\"1\":{\"246\":1}}],[\"并且可以基于特定的条件来创建不同的对象实例\",{\"1\":{\"121\":1}}],[\"负责管理一组数据库驱动程序\",{\"1\":{\"256\":1}}],[\"负载均衡\",{\"1\":{\"35\":1}}],[\"检索和修改数据等操作\",{\"1\":{\"256\":1}}],[\"you\",{\"1\":{\"274\":2}}],[\"your\",{\"1\":{\"47\":2}}],[\"y\",{\"1\":{\"246\":1}}],[\"项目\",{\"1\":{\"246\":1}}],[\"适用于各种规模的\",{\"1\":{\"246\":1}}],[\"适用于任何基于\",{\"1\":{\"127\":1}}],[\"释放资源\",{\"1\":{\"246\":1}}],[\"关闭\",{\"1\":{\"246\":1}}],[\"插入\",{\"1\":{\"246\":1}}],[\"插件开发\",{\"0\":{\"106\":1}}],[\"中调用相应的\",{\"1\":{\"246\":1}}],[\"中使用外部状态管理库的状态\",{\"1\":{\"66\":1}}],[\"操作繁琐\",{\"1\":{\"261\":1}}],[\"操作完成后关闭\",{\"1\":{\"246\":1}}],[\"操作\",{\"1\":{\"246\":1}}],[\"执行sql操作\",{\"1\":{\"260\":1,\"261\":1}}],[\"执行sql查询语句\",{\"1\":{\"256\":1}}],[\"执行sql查询\",{\"1\":{\"256\":1}}],[\"执行\",{\"1\":{\"246\":1}}],[\"将\",{\"1\":{\"246\":1}}],[\"将包含注解的类加入spring容器中\",{\"1\":{\"175\":1}}],[\"映射文件或者注解\",{\"1\":{\"246\":1}}],[\"映射关系\",{\"1\":{\"246\":1}}],[\"开发人员只需定义一个mapper接口\",{\"1\":{\"257\":1}}],[\"开发者可以根据实际需求选择更适合的方式\",{\"1\":{\"246\":1}}],[\"开发流程idea插件开发基础\",{\"1\":{\"107\":1}}],[\"文件或者\",{\"1\":{\"246\":1}}],[\"文件或者注解中\",{\"1\":{\"246\":1}}],[\"文件来配置\",{\"1\":{\"246\":1}}],[\"支持注解和\",{\"1\":{\"246\":1}}],[\"支持任意实现\",{\"1\":{\"127\":1}}],[\"支持任何第三方的数据库连接池\",{\"1\":{\"127\":1}}],[\"缓存等技术来提高数据库访问性能\",{\"1\":{\"246\":1}}],[\"采用了预编译\",{\"1\":{\"246\":1}}],[\"性能优异\",{\"1\":{\"246\":1}}],[\"来直接操作数据库\",{\"1\":{\"246\":1}}],[\"允许使用\",{\"1\":{\"246\":1}}],[\"灵活性高\",{\"1\":{\"246\":1}}],[\"灵活性\",{\"1\":{\"246\":1}}],[\"易于上手的持久层框架\",{\"1\":{\"246\":1}}],[\"易于上手\",{\"1\":{\"246\":1}}],[\"学习曲线较低\",{\"1\":{\"246\":1}}],[\"学校\",{\"1\":{\"11\":1}}],[\"简单orm设计\",{\"0\":{\"258\":1}}],[\"简单易用\",{\"1\":{\"246\":1}}],[\"简介\",{\"0\":{\"40\":1}}],[\"语句\",{\"1\":{\"246\":1}}],[\"语句以提高性能\",{\"1\":{\"246\":1}}],[\"语句与\",{\"1\":{\"246\":2}}],[\"语法上的改进使用起来十分舒适\",{\"1\":{\"59\":1}}],[\"应用程序编程接口\",{\"1\":{\"256\":1}}],[\"应用程序中与数据库的交互过程\",{\"1\":{\"246\":1}}],[\"应该在发rpc请求之后加锁\",{\"1\":{\"47\":1}}],[\"qualifier\",{\"1\":{\"278\":3}}],[\"queryuserlist\",{\"1\":{\"257\":1}}],[\"queryuserinfobyid\",{\"1\":{\"257\":3,\"259\":1,\"260\":1,\"261\":1}}],[\"questions\",{\"0\":{\"53\":1},\"1\":{\"53\":1}}],[\"quot\",{\"1\":{\"236\":2}}],[\"聊聊rocketmqmessagelistener的实现机制\",{\"1\":{\"220\":1}}],[\"现在先放在这里\",{\"1\":{\"215\":3}}],[\"所以一个channel就会对应一个单线程执行器\",{\"1\":{\"215\":1}}],[\"但是一个channel只能对应\",{\"1\":{\"215\":1}}],[\"管理eventexecutor\",{\"1\":{\"214\":1}}],[\"管理和释放数据库连接\",{\"1\":{\"126\":1}}],[\"任务调度器的实现\",{\"1\":{\"214\":1}}],[\"任务调度器\",{\"1\":{\"214\":1}}],[\"任务执行器的实现\",{\"1\":{\"214\":1}}],[\"任务执行器\",{\"1\":{\"214\":1}}],[\"任期比自己大\",{\"1\":{\"47\":1}}],[\"与\",{\"1\":{\"246\":2}}],[\"与如何运行\",{\"1\":{\"214\":1}}],[\"与多数节点保持一致\",{\"1\":{\"42\":1}}],[\"定义\",{\"1\":{\"246\":1}}],[\"定义了处理事件的逻辑\",{\"1\":{\"214\":1}}],[\"定时发送心跳信息\",{\"1\":{\"41\":1}}],[\"专注于处理事件\",{\"1\":{\"214\":1}}],[\"类\",{\"1\":{\"214\":1}}],[\"类似react\",{\"1\":{\"60\":1}}],[\"各个类的功能\",{\"0\":{\"214\":1}}],[\"自己实现的netty\",{\"0\":{\"213\":1}}],[\"自定义dispatchservlet\",{\"1\":{\"210\":1}}],[\"自定义一个条件注解\",{\"1\":{\"168\":1}}],[\"自定义\",{\"0\":{\"168\":1}}],[\"本地方法注册\",{\"1\":{\"210\":1}}],[\"供调用方使用\",{\"1\":{\"210\":1}}],[\"掉用方\",{\"1\":{\"210\":1}}],[\"└──\",{\"1\":{\"210\":23}}],[\"x入门教程\",{\"1\":{\"283\":1}}],[\"xnode\",{\"1\":{\"260\":5}}],[\"xnode>\",{\"1\":{\"260\":2}}],[\"xml配置样例\",{\"0\":{\"236\":1}}],[\"xml\",{\"1\":{\"210\":5,\"236\":2,\"246\":4,\"257\":2,\"261\":1}}],[\"xxx\",{\"1\":{\"167\":1}}],[\"│\",{\"1\":{\"210\":67}}],[\"├──\",{\"1\":{\"210\":19}}],[\"手写rpc\",{\"0\":{\"210\":1}}],[\"zaxxer\",{\"1\":{\"282\":1}}],[\"zhouyu\",{\"1\":{\"236\":1}}],[\"zoneawareloadbalancer<>\",{\"1\":{\"204\":1}}],[\"zoneawareloadbalancer\",{\"1\":{\"204\":1}}],[\"zustand\",{\"0\":{\"63\":1,\"64\":1},\"1\":{\"63\":1,\"64\":1,\"65\":1,\"66\":3}}],[\"网址\",{\"1\":{\"200\":1}}],[\"功能\",{\"1\":{\"200\":1,\"214\":1}}],[\"列出mnemoric\",{\"1\":{\"193\":1}}],[\"快捷键\",{\"1\":{\"190\":1,\"193\":1}}],[\"工程师能力提升路径\",{\"1\":{\"187\":1}}],[\"存在一个\",{\"1\":{\"179\":1}}],[\"存在多个构造方法\",{\"1\":{\"179\":1}}],[\"有了orm框架后\",{\"1\":{\"257\":1}}],[\"有无参构造方法则用无参构造方法\",{\"1\":{\"179\":1}}],[\"有超过半数的票\",{\"1\":{\"47\":1}}],[\"推断构造方法\",{\"0\":{\"179\":1}}],[\"处理查询结果集\",{\"1\":{\"256\":1}}],[\"处理请求\",{\"1\":{\"210\":1}}],[\"处理rpc调用请求\",{\"1\":{\"210\":1}}],[\"处理时机\",{\"1\":{\"183\":1}}],[\"处理父类\",{\"1\":{\"174\":1}}],[\"处理接口默认方法\",{\"1\":{\"174\":1}}],[\"处理\",{\"1\":{\"174\":6,\"175\":1}}],[\"处理投票\",{\"1\":{\"47\":1}}],[\"会用到application\",{\"1\":{\"282\":1}}],[\"会用动态代理的方式将这些切面逻辑织入\",{\"1\":{\"148\":1}}],[\"会收集anynestedcondition的所有内部类的条件\",{\"1\":{\"166\":1}}],[\"原理分析\",{\"1\":{\"207\":1}}],[\"原理\",{\"1\":{\"166\":1}}],[\"指定的表达式返回是true或者false\",{\"1\":{\"165\":1}}],[\"条件注解\",{\"1\":{\"165\":1}}],[\"总的来说\",{\"1\":{\"246\":1}}],[\"总结\",{\"0\":{\"165\":1}}],[\"总之\",{\"1\":{\"121\":1}}],[\"则单例无法保证\",{\"1\":{\"161\":1}}],[\"则返回加上前缀\",{\"1\":{\"133\":1}}],[\"则返回beanname\",{\"1\":{\"133\":1}}],[\"也可以自己用netty实现\",{\"1\":{\"210\":1}}],[\"也进行到这一步骤\",{\"1\":{\"161\":1}}],[\"也保证单例\",{\"1\":{\"161\":1}}],[\"冲突\",{\"1\":{\"161\":1}}],[\"第三级缓存\",{\"1\":{\"161\":1}}],[\"第二级缓存\",{\"1\":{\"161\":1}}],[\"第一级\",{\"1\":{\"161\":1}}],[\"第一次使用\",{\"1\":{\"64\":1}}],[\"单例\",{\"1\":{\"161\":1}}],[\"单个服务节点\",{\"1\":{\"40\":1}}],[\"三级缓存\",{\"1\":{\"161\":1}}],[\"打破循环\",{\"1\":{\"161\":1}}],[\"打破循环依赖\",{\"0\":{\"161\":1}}],[\"打开调试窗口\",{\"1\":{\"190\":1}}],[\"打开\",{\"1\":{\"148\":1}}],[\"打开existing\",{\"1\":{\"112\":1}}],[\"而不必关心数据库的底层细节和sql语句的编写\",{\"1\":{\"257\":1}}],[\"而不是重新建立一个\",{\"1\":{\"126\":1}}],[\"而是在channeloutboundinvoker接口\",{\"1\":{\"215\":3}}],[\"而该run方法由nioeventloop负责实现\",{\"1\":{\"213\":1}}],[\"而4中生成的又是aservice的代理对象\",{\"1\":{\"161\":1}}],[\"而aservice正在创建过程中\",{\"1\":{\"160\":1}}],[\"添加到单例池\",{\"1\":{\"160\":2,\"161\":4}}],[\"做其他事情\",{\"1\":{\"160\":2,\"161\":4}}],[\"填充其他属性\",{\"1\":{\"160\":2,\"161\":4}}],[\"填充aservice时单例池map里没有aservice\",{\"1\":{\"160\":1}}],[\"填充aservice\",{\"1\":{\"160\":1,\"161\":2}}],[\"填充bservice\",{\"1\":{\"160\":1,\"161\":2}}],[\"方法执行数据库操作\",{\"1\":{\"246\":1}}],[\"方法参数\",{\"1\":{\"210\":1}}],[\"方法\",{\"1\":{\"155\":1,\"210\":1}}],[\"方法来获取对象实例\",{\"1\":{\"121\":1}}],[\"传播机制=required\",{\"1\":{\"148\":1}}],[\"最终的代理逻辑如下\",{\"1\":{\"260\":1}}],[\"最终源码都是调用事务管理器的platformtransactionmanager接口的3个方法\",{\"1\":{\"148\":1}}],[\"最全源码详解之创建代理对象\",{\"1\":{\"136\":1}}],[\"最全源码详解之aop元数据解析spring\",{\"1\":{\"136\":1}}],[\"还是声明式事务\",{\"1\":{\"148\":1}}],[\"还是十分推荐的\",{\"1\":{\"56\":1}}],[\"经典的用编程式aop的样例\",{\"1\":{\"148\":1}}],[\"经过一段时间的debug\",{\"1\":{\"47\":1}}],[\"搭建springmvc最新教程\",{\"1\":{\"144\":1}}],[\"参考网页\",{\"0\":{\"144\":1}}],[\"参考文章\",{\"0\":{\"3\":1,\"22\":1,\"36\":1,\"43\":1,\"48\":1,\"107\":1,\"128\":1,\"136\":1,\"140\":1,\"150\":1,\"169\":1,\"187\":1,\"207\":1,\"216\":1,\"220\":1,\"224\":1,\"228\":1,\"232\":1,\"242\":1,\"251\":1,\"270\":1,\"275\":1,\"279\":1,\"283\":1,\"287\":1,\"291\":1}}],[\"|\",{\"1\":{\"143\":1,\"148\":1}}],[\"||\",{\"1\":{\"66\":1,\"148\":3}}],[\"启动tomcat\",{\"1\":{\"143\":1}}],[\"杂项\",{\"0\":{\"135\":1,\"250\":1}}],[\"提供对应这个mapper接口的配置xml\",{\"1\":{\"257\":1}}],[\"提供了丰富的插件机制\",{\"1\":{\"246\":1}}],[\"提供了更大的灵活性和控制力\",{\"1\":{\"246\":1}}],[\"提供了一种灵活\",{\"1\":{\"121\":1}}],[\"提供了两个版本的包\",{\"1\":{\"66\":1}}],[\"提交到线程池中执行\",{\"1\":{\"213\":1}}],[\"提前产生的代理对象\",{\"1\":{\"161\":1}}],[\"提前aop\",{\"1\":{\"134\":1,\"161\":1}}],[\"循环依赖\",{\"0\":{\"159\":1},\"1\":{\"134\":1,\"161\":1}}],[\"出现循环依赖的bean的aop时机\",{\"0\":{\"134\":1}}],[\"没有无参构造方法\",{\"1\":{\"179\":1}}],[\"没有循环依赖的bean的aop时机\",{\"0\":{\"133\":1}}],[\"没有节点时\",{\"1\":{\"41\":1}}],[\"详解shardingjdbc\",{\"1\":{\"128\":1}}],[\"根据规则实现分库\",{\"1\":{\"127\":1}}],[\"比如\",{\"1\":{\"127\":1}}],[\"底层与数据库直接交互的仍然为javax\",{\"1\":{\"127\":1}}],[\"底层原理很简单\",{\"0\":{\"65\":1}}],[\"底层原理\",{\"1\":{\"63\":1}}],[\"底层原理🚀🚀🚀\",{\"0\":{\"63\":1}}],[\"标准的数据库\",{\"1\":{\"127\":1}}],[\"以上是一个使用jdbc的样例\",{\"1\":{\"257\":1}}],[\"以上步骤存在问题\",{\"1\":{\"161\":1}}],[\"以执行sql语句和存储过程\",{\"1\":{\"256\":1}}],[\"以下是\",{\"1\":{\"246\":1}}],[\"以及任何遵循\",{\"1\":{\"127\":1}}],[\"以延迟对象的创建或者实现对象的惰性加载\",{\"1\":{\"121\":1}}],[\"规范的数据库\",{\"1\":{\"127\":1}}],[\"框架无缝集成\",{\"1\":{\"246\":1}}],[\"框架的handler\",{\"1\":{\"210\":1}}],[\"框架提供的client\",{\"1\":{\"210\":1}}],[\"框架\",{\"1\":{\"127\":1}}],[\"框架中的一个接口\",{\"1\":{\"121\":1}}],[\"你被代理了\",{\"1\":{\"260\":1,\"261\":1}}],[\"你用完我可以接着用\",{\"1\":{\"126\":1}}],[\"你一定看的懂这个功能\",{\"1\":{\"60\":1}}],[\"谁都能用\",{\"1\":{\"126\":1}}],[\"它的实现类是defaultsqlsession\",{\"1\":{\"260\":1}}],[\"它允许开发人员使用面向对象的方式操作数据库\",{\"1\":{\"257\":1}}],[\"它允许java应用程序通过标准的数据库访问方法与数据库进行通信\",{\"1\":{\"256\":1}}],[\"它允许用户程序重复使用一个现有的数据库连接\",{\"1\":{\"126\":1}}],[\"它简化了在\",{\"1\":{\"246\":1}}],[\"它首先介绍了基础的ts开发介绍\",{\"1\":{\"57\":1}}],[\"数据库连接池负责分配\",{\"1\":{\"126\":1}}],[\"数据库连接池是指\",{\"1\":{\"126\":1}}],[\"了连接池\",{\"1\":{\"126\":1}}],[\"放回\",{\"1\":{\"126\":1}}],[\"只要有一个条件为真则为真\",{\"1\":{\"166\":1}}],[\"只是\",{\"1\":{\"126\":1}}],[\"只需要调用create函数创建store就可以直接在任何组件使用了\",{\"1\":{\"64\":1}}],[\"连接本身不会中断\",{\"1\":{\"126\":1}}],[\"连接池\",{\"0\":{\"124\":1,\"126\":1},\"1\":{\"128\":1}}],[\"拿出\",{\"1\":{\"126\":1}}],[\"就可以直接从缓冲池中\",{\"1\":{\"126\":1}}],[\"就提前创建好一定数量的连接并放入缓冲池中\",{\"1\":{\"126\":1}}],[\"当前应用不是web应用\",{\"1\":{\"165\":1}}],[\"当前应用是web应用\",{\"1\":{\"165\":1}}],[\"当前不存在事务\",{\"1\":{\"148\":1}}],[\"当应用程序向连接池请求的连接数超过最大连接数量时\",{\"1\":{\"126\":1}}],[\"当java程序请求建立数据库连接时\",{\"1\":{\"126\":1}}],[\"当网络屏障恢复\",{\"1\":{\"42\":1}}],[\"可定制性\",{\"1\":{\"246\":1}}],[\"可自定义如何序列化\",{\"1\":{\"210\":1}}],[\"可扩展的对象创建机制\",{\"1\":{\"121\":1}}],[\"可以自动生成\",{\"1\":{\"261\":1}}],[\"可以看出比较麻烦\",{\"1\":{\"257\":1}}],[\"可以看出默认为\",{\"1\":{\"66\":1}}],[\"可以是普通的statement对象\",{\"1\":{\"256\":1}}],[\"可以方便地在企业应用中使用\",{\"1\":{\"246\":1}}],[\"可以方便地扩展和定制框架的功能\",{\"1\":{\"246\":1}}],[\"可以使用注解或者\",{\"1\":{\"246\":1}}],[\"可以优化\",{\"1\":{\"246\":1}}],[\"可以根据具体的业务需求来定制对象的创建过程\",{\"1\":{\"121\":1}}],[\"可以在\",{\"1\":{\"121\":1}}],[\"等主流\",{\"1\":{\"246\":1}}],[\"等框架集成\",{\"1\":{\"246\":1}}],[\"等\",{\"1\":{\"127\":1}}],[\"等功能\",{\"1\":{\"121\":1}}],[\"等待150~300ms转变为candidate\",{\"1\":{\"41\":1}}],[\"面向切面编程\",{\"1\":{\"121\":1}}],[\"依赖注入等\",{\"1\":{\"121\":1}}],[\"配置中心\",{\"2\":{\"272\":1}}],[\"配置数据源和\",{\"1\":{\"246\":2}}],[\"配置druid数据库连接池\",{\"1\":{\"128\":1}}],[\"配置\",{\"1\":{\"121\":1,\"246\":1}}],[\"封装复杂的对象创建逻辑\",{\"1\":{\"121\":1}}],[\"常见的应用场景包括\",{\"1\":{\"121\":1}}],[\"常见内存泄漏问题\",{\"0\":{\"100\":1}}],[\"容器中灵活地创建对象\",{\"1\":{\"121\":1}}],[\"容器会通过调用\",{\"1\":{\"121\":1}}],[\"通过使用spring的扩展点\",{\"1\":{\"261\":1}}],[\"通过resultset对象可以获取查询结果中的数据\",{\"1\":{\"256\":1}}],[\"通过connection对象可以创建statement对象\",{\"1\":{\"256\":1}}],[\"通过\",{\"1\":{\"246\":1}}],[\"通过实现beandefinitionregistrypostprocessor接口\",{\"1\":{\"261\":1}}],[\"通过实现\",{\"1\":{\"121\":1}}],[\"通常情况下\",{\"1\":{\"121\":1}}],[\"该orm的用法为\",{\"1\":{\"261\":1}}],[\"该方法并不在此接口\",{\"1\":{\"215\":3}}],[\"该方法就是用来得到该channel对应的单线程执行器\",{\"1\":{\"215\":1}}],[\"该方法很重要\",{\"1\":{\"215\":1}}],[\"该方法用于销毁对象\",{\"1\":{\"121\":1}}],[\"该方法用于指示所管理的对象是否是原型\",{\"1\":{\"121\":1}}],[\"该方法用于指示所管理的对象是否是单例\",{\"1\":{\"121\":1}}],[\"该方法用于返回所管理对象的类型\",{\"1\":{\"121\":1}}],[\"该方法用于返回所管理的对象实例\",{\"1\":{\"121\":1}}],[\"该日志条目当前未提交\",{\"1\":{\"42\":1}}],[\"接口方法\",{\"1\":{\"259\":1}}],[\"接口中定义操作数据库的方法\",{\"1\":{\"259\":1}}],[\"接口定义\",{\"1\":{\"210\":1}}],[\"接口定义了以下方法\",{\"1\":{\"121\":1}}],[\"接口为\",{\"1\":{\"121\":1}}],[\"接口\",{\"1\":{\"121\":1,\"210\":1}}],[\"接口调试\",{\"1\":{\"103\":1}}],[\"从而实现数据的持久化操作\",{\"1\":{\"246\":1}}],[\"从而隐藏了对象的创建细节\",{\"1\":{\"121\":1}}],[\"从业余到专业\",{\"1\":{\"187\":1}}],[\"从log中可以看到一直在before\",{\"1\":{\"47\":1}}],[\"从log看他们都在发requestvote\",{\"1\":{\"47\":1}}],[\"用于在面向对象编程语言和关系型数据库之间建立映射关系\",{\"1\":{\"257\":1}}],[\"用于执行静态sql语句\",{\"1\":{\"256\":1}}],[\"用于执行\",{\"1\":{\"246\":1}}],[\"用于创建\",{\"1\":{\"246\":1}}],[\"用于创建复杂对象或者具有特殊构建逻辑的对象\",{\"1\":{\"121\":1,\"261\":1}}],[\"用户需要针对数据库每个表的接口手动生成代理对象\",{\"1\":{\"261\":1}}],[\"用户使用样例如下\",{\"1\":{\"260\":1}}],[\"用户的配置\",{\"1\":{\"210\":1}}],[\"用户id\",{\"1\":{\"81\":1}}],[\"用法\",{\"1\":{\"166\":1}}],[\"用一个map保存多个库\",{\"1\":{\"127\":1}}],[\"用完后取消java程序对该连接的引用即可\",{\"1\":{\"126\":1}}],[\"是一种编程技术\",{\"1\":{\"257\":1}}],[\"是一个功能强大\",{\"1\":{\"246\":1}}],[\"是一个持久层框架\",{\"1\":{\"246\":1}}],[\"是java语言用于与关系型数据库进行交互的一组api\",{\"1\":{\"256\":1}}],[\"是如何处理一个请求的\",{\"1\":{\"235\":1}}],[\"是否在某个云平台上\",{\"1\":{\"165\":1}}],[\"是否以war包方式部署运行\",{\"1\":{\"165\":1}}],[\"是否存在指定资源\",{\"1\":{\"165\":1}}],[\"是否存在某个类\",{\"1\":{\"165\":1}}],[\"是否存在某个类或某个名字的bean\",{\"1\":{\"165\":1}}],[\"是否不存在某个类\",{\"1\":{\"165\":1}}],[\"是否符合指定类型的bean只有一个\",{\"1\":{\"165\":1}}],[\"是否缺失某个类或某个名字的bean\",{\"1\":{\"165\":1}}],[\"是\",{\"1\":{\"121\":1,\"235\":1,\"246\":1}}],[\"环境版本适配\",{\"1\":{\"108\":1}}],[\"解决org\",{\"0\":{\"108\":1}}],[\"解决方案\",{\"0\":{\"82\":1},\"1\":{\"112\":1}}],[\"won\",{\"1\":{\"278\":1}}],[\"work\",{\"1\":{\"148\":1}}],[\"want\",{\"1\":{\"274\":1}}],[\"was\",{\"1\":{\"265\":1}}],[\"warn\",{\"1\":{\"148\":1}}],[\"war\",{\"1\":{\"143\":1}}],[\"wrap\",{\"1\":{\"265\":1}}],[\"wrapper<\",{\"1\":{\"240\":1}}],[\"wrapper\",{\"0\":{\"240\":1}}],[\"wrappers\",{\"1\":{\"239\":1}}],[\"wrapifnecessary\",{\"1\":{\"133\":1,\"134\":1}}],[\"write\",{\"1\":{\"210\":1}}],[\"writeobject\",{\"1\":{\"210\":1}}],[\"we\",{\"1\":{\"278\":2}}],[\"webapps\",{\"1\":{\"236\":1}}],[\"webapplicationcontext\",{\"1\":{\"143\":1}}],[\"webtools\",{\"0\":{\"313\":1},\"2\":{\"198\":1,\"201\":1}}],[\"well\",{\"1\":{\"148\":1}}],[\"will\",{\"1\":{\"143\":1,\"148\":4}}],[\"withdefaults\",{\"1\":{\"148\":1}}],[\"withreact<storeapi<tstate>>\",{\"1\":{\"66\":1}}],[\"with\",{\"1\":{\"60\":1,\"66\":2,\"148\":3,\"265\":2,\"278\":1}}],[\"withlifecycle\",{\"1\":{\"60\":2}}],[\"withstate\",{\"1\":{\"60\":2}}],[\"where\",{\"1\":{\"257\":2,\"282\":1}}],[\"while\",{\"1\":{\"256\":1,\"282\":1}}],[\"which\",{\"1\":{\"143\":1,\"148\":1}}],[\"whatever\",{\"1\":{\"143\":1}}],[\"www\",{\"1\":{\"103\":1,\"149\":1}}],[\"时序图生成\",{\"1\":{\"103\":1}}],[\"时间\",{\"1\":{\"11\":1,\"12\":1}}],[\"链接\",{\"1\":{\"103\":1}}],[\"作用\",{\"1\":{\"103\":1,\"156\":1,\"157\":1,\"158\":1,\"165\":1,\"180\":1,\"190\":1,\"193\":1}}],[\"垃圾回收器\",{\"0\":{\"97\":1}}],[\"内存泄漏排查工具\",{\"0\":{\"92\":1}}],[\"内容介绍\",{\"1\":{\"53\":1,\"54\":1,\"55\":1,\"57\":1,\"59\":1,\"60\":1}}],[\"乐观锁\",{\"0\":{\"86\":1}}],[\"悲观锁\",{\"0\":{\"85\":1}}],[\"返回参数\",{\"1\":{\"259\":1}}],[\"返回值类型以及sql语句即可操作\",{\"1\":{\"259\":1}}],[\"返回订单id\",{\"1\":{\"81\":1}}],[\"返回自己的任期\",{\"1\":{\"47\":2}}],[\"72835242\",{\"1\":{\"112\":1}}],[\"7134877521182457869\",{\"1\":{\"103\":1}}],[\"7\",{\"1\":{\"81\":1,\"174\":1}}],[\"代金券id\",{\"1\":{\"81\":1}}],[\"订单id\",{\"1\":{\"81\":1}}],[\"订阅\",{\"1\":{\"65\":1}}],[\"扣减库存\",{\"1\":{\"81\":1}}],[\"库存不足\",{\"1\":{\"81\":2}}],[\"判断java版本\",{\"1\":{\"165\":1}}],[\"判断库存是否充足\",{\"1\":{\"81\":1}}],[\"判断秒杀是否已经结束\",{\"1\":{\"81\":1}}],[\"判断秒杀是否开发\",{\"1\":{\"81\":1}}],[\"又通过内置的包\",{\"1\":{\"66\":1}}],[\"实战与源码解析一网打尽\",{\"1\":{\"287\":1}}],[\"实例化\",{\"1\":{\"160\":2,\"161\":4}}],[\"实现了initializingbean\",{\"1\":{\"266\":1}}],[\"实现了以上逻辑后\",{\"1\":{\"260\":1}}],[\"实现一个简单的mybatis\",{\"0\":{\"255\":1}}],[\"实现registerbeandefinitions方法\",{\"1\":{\"158\":1}}],[\"实现postprocessbeandefinitionregistry方法\",{\"1\":{\"157\":1}}],[\"实现postprocessbeanfactory方法\",{\"1\":{\"157\":1}}],[\"实现postprocessbeforeinitialization\",{\"1\":{\"156\":1}}],[\"实现afterpropertiesset接口\",{\"1\":{\"156\":1}}],[\"实现setapplicationcontext获取applicationcontext\",{\"1\":{\"156\":1}}],[\"实现setbeanfactory获取beanfactory\",{\"1\":{\"156\":1}}],[\"实现setbeanname方法\",{\"1\":{\"156\":1}}],[\"实现接口\",{\"1\":{\"156\":1,\"157\":1,\"158\":1,\"180\":1}}],[\"实现分表\",{\"1\":{\"127\":1}}],[\"实现\",{\"1\":{\"121\":1}}],[\"实际是\",{\"1\":{\"66\":1}}],[\"实习经历\",{\"0\":{\"12\":1}}],[\"包装了一层的返回值\",{\"1\":{\"66\":1}}],[\"包的\",{\"1\":{\"66\":1}}],[\"使用\",{\"1\":{\"66\":1,\"121\":3}}],[\"使用方法如下\",{\"1\":{\"65\":1}}],[\"和\",{\"1\":{\"66\":2}}],[\"和我上篇的分享不谋而合了\",{\"1\":{\"59\":1}}],[\"模式下\",{\"1\":{\"66\":1}}],[\"在使用时就不需要自己定义该对象\",{\"1\":{\"261\":1}}],[\"在本文的orm实现中\",{\"1\":{\"261\":1}}],[\"在上述orm实现中\",{\"1\":{\"261\":1}}],[\"在其实现类中\",{\"1\":{\"260\":1}}],[\"在其实现类中完成这些工作\",{\"1\":{\"260\":1}}],[\"在执行sql语句之前改写\",{\"1\":{\"127\":1}}],[\"在java程序未和数据库建立连接时\",{\"1\":{\"126\":1}}],[\"在\",{\"1\":{\"66\":1,\"246\":1}}],[\"非\",{\"1\":{\"66\":1}}],[\"信息如下\",{\"1\":{\"66\":1}}],[\"版本号法\",{\"0\":{\"83\":1},\"1\":{\"83\":1}}],[\"版本不同的是\",{\"1\":{\"66\":1}}],[\"版本相同的是他们都是使用\",{\"1\":{\"66\":1}}],[\"版本\",{\"1\":{\"66\":2}}],[\"版本和非\",{\"1\":{\"66\":1}}],[\"的主要入口点\",{\"1\":{\"246\":1}}],[\"的工作原理主要包括以下几个步骤\",{\"1\":{\"246\":1}}],[\"的配置简单清晰\",{\"1\":{\"246\":1}}],[\"的一些主要特点和优势\",{\"1\":{\"246\":1}}],[\"的核心思想是将\",{\"1\":{\"246\":1}}],[\"的返回值是使用\",{\"1\":{\"66\":1}}],[\"的环境使用如下\",{\"1\":{\"66\":1}}],[\"的\",{\"1\":{\"66\":1,\"121\":1,\"127\":1,\"133\":1}}],[\"即可使用面向对象的方式操作数据库\",{\"1\":{\"257\":1}}],[\"即连接池中的连接是公共的\",{\"1\":{\"126\":1}}],[\"即\",{\"1\":{\"66\":1}}],[\"事件循环\",{\"1\":{\"214\":1}}],[\"事实上\",{\"1\":{\"66\":1}}],[\"事务传播机制\",{\"0\":{\"149\":1}}],[\"事务注解\",{\"1\":{\"135\":1}}],[\"事务\",{\"1\":{\"16\":1,\"17\":1}}],[\"销毁这个store\",{\"1\":{\"65\":1}}],[\"取消订阅\",{\"1\":{\"65\":1}}],[\"触发订阅的回调函数\",{\"1\":{\"65\":1}}],[\"更新数据库\",{\"1\":{\"256\":1}}],[\"更新等\",{\"1\":{\"246\":1}}],[\"更新\",{\"1\":{\"65\":1}}],[\"更多使用的工具函数可以去仓库中浏览下\",{\"1\":{\"59\":1}}],[\"创建shardingdatasourcesharding\",{\"1\":{\"291\":1}}],[\"创建statement对象\",{\"1\":{\"256\":1}}],[\"创建dispatcherservlet\",{\"1\":{\"143\":1}}],[\"创建流程\",{\"1\":{\"143\":1}}],[\"创建代理对象\",{\"1\":{\"121\":1}}],[\"创建单例或者原型对象\",{\"1\":{\"121\":1}}],[\"创建gradle工程编译失败\",{\"1\":{\"109\":1}}],[\"创建订单\",{\"1\":{\"81\":1}}],[\"创建的\",{\"1\":{\"66\":1}}],[\"创建\",{\"1\":{\"65\":1,\"66\":1,\"246\":2}}],[\"下面是核心代码实现\",{\"1\":{\"65\":1}}],[\"下面是一个有趣的例子\",{\"1\":{\"60\":1}}],[\"基于发布订阅模式实现的响应式\",{\"1\":{\"65\":1}}],[\"基础上利用react高阶组件功能开发的功能库\",{\"1\":{\"60\":1}}],[\"才发现\",{\"1\":{\"65\":1}}],[\"好用的插件\",{\"0\":{\"103\":1}}],[\"好奇的翻开代码\",{\"1\":{\"65\":1}}],[\"好的博文\",{\"0\":{\"18\":1}}],[\"被惊艳到了\",{\"1\":{\"64\":1}}],[\"评论区告诉我\",{\"1\":{\"60\":1}}],[\"感谢各位的观看\",{\"1\":{\"60\":1}}],[\"今天探究\",{\"1\":{\"63\":1}}],[\"今天的分享就到这了\",{\"1\":{\"60\":1}}],[\"今天分享几个上千⭐的库\",{\"1\":{\"51\":1}}],[\"希望可以帮你拓宽视野\",{\"1\":{\"60\":1}}],[\"`\",{\"1\":{\"60\":1}}],[\"`isloading\",{\"1\":{\"60\":1}}],[\"→\",{\"1\":{\"60\":1}}],[\"$\",{\"1\":{\"60\":2,\"205\":1}}],[\"不存在\",{\"1\":{\"161\":2}}],[\"不管是编程式事务\",{\"1\":{\"148\":1}}],[\"不同环境处理\",{\"0\":{\"66\":1}}],[\"不会触发订阅的回调函数\",{\"1\":{\"65\":1}}],[\"不会再开发新功能了\",{\"1\":{\"60\":1}}],[\"不过这个工具库仅仅是维护阶段\",{\"1\":{\"60\":1}}],[\"+\",{\"1\":{\"143\":13,\"148\":8,\"161\":2,\"206\":2,\"256\":3,\"260\":4,\"261\":4,\"265\":1,\"278\":4}}],[\"+=\",{\"1\":{\"59\":1,\"278\":1}}],[\"+200\",{\"1\":{\"47\":2}}],[\"usr\",{\"1\":{\"274\":1}}],[\"userdao\",{\"1\":{\"257\":2,\"261\":2}}],[\"userdatabaserealm\",{\"1\":{\"236\":1}}],[\"userdatabase\",{\"1\":{\"236\":3}}],[\"userpassword\",{\"1\":{\"257\":2}}],[\"userhead\",{\"1\":{\"257\":2}}],[\"userholder\",{\"1\":{\"81\":1}}],[\"usernickname\",{\"1\":{\"257\":4}}],[\"users\",{\"1\":{\"236\":2}}],[\"user\",{\"1\":{\"236\":1,\"256\":1,\"257\":9,\"259\":1,\"260\":2,\"261\":2}}],[\"userid\",{\"1\":{\"81\":2,\"257\":2}}],[\"usedebugvalue\",{\"1\":{\"66\":1}}],[\"useboundstore\",{\"1\":{\"66\":3}}],[\"usesyncexternalstorewithselector\",{\"1\":{\"66\":1}}],[\"usesyncexternalstoreexports\",{\"1\":{\"66\":1}}],[\"usesyncexternalstore\",{\"1\":{\"66\":1}}],[\"usestore<tstate\",{\"1\":{\"66\":1}}],[\"usestore\",{\"1\":{\"66\":3}}],[\"use\",{\"1\":{\"60\":1,\"66\":3,\"148\":2}}],[\"usemutablestate\",{\"1\":{\"59\":4}}],[\"u\",{\"1\":{\"236\":1}}],[\"utf\",{\"1\":{\"236\":1,\"257\":1}}],[\"url\",{\"1\":{\"210\":4,\"256\":1,\"278\":14}}],[\"u013041642\",{\"1\":{\"112\":1}}],[\"updatetime\",{\"1\":{\"257\":1}}],[\"updated\",{\"1\":{\"236\":1}}],[\"update\",{\"1\":{\"81\":2}}],[\"unwrap\",{\"1\":{\"278\":2}}],[\"unknown\",{\"1\":{\"265\":1}}],[\"unpooleddatasource源码分析\",{\"1\":{\"250\":1}}],[\"unpackwars=\",{\"1\":{\"236\":1}}],[\"unmodifiablemap\",{\"1\":{\"166\":1}}],[\"unsupported\",{\"1\":{\"148\":1}}],[\"unsubscribe\",{\"1\":{\"65\":2}}],[\"unsafe\",{\"1\":{\"143\":2}}],[\"unlock\",{\"1\":{\"47\":7}}],[\"🤮是时候放弃usestate了\",{\"1\":{\"59\":1}}],[\"这是一个factorybean\",{\"1\":{\"261\":1}}],[\"这是一个在recompose库\",{\"1\":{\"60\":1}}],[\"这里用tomcat\",{\"1\":{\"210\":1}}],[\"这里只列举了两个特别的\",{\"1\":{\"60\":1}}],[\"这样则会出现问题\",{\"1\":{\"160\":1}}],[\"这三种情况\",{\"1\":{\"148\":1}}],[\"这些请求将被加入到等待队列中\",{\"1\":{\"126\":1}}],[\"这仅仅是冰山一角\",{\"1\":{\"59\":1}}],[\"这个仓库罗列了一系列react开发需要学习的技能点\",{\"1\":{\"56\":1}}],[\"这个仓库介绍了300+个常见的面试问题\",{\"1\":{\"53\":1}}],[\"那它的语法你肯定不会觉得陌生\",{\"1\":{\"59\":1}}],[\"那么也会创建aservice代理对象\",{\"1\":{\"161\":1}}],[\"那么又需要创建aservice\",{\"1\":{\"160\":1}}],[\"那么这个仓库是值得一看的\",{\"1\":{\"57\":1}}],[\"那么在s0和s1分别处理对方的rpc请求时就会发生死锁\",{\"1\":{\"47\":1}}],[\"那么会出现s0向s1发了rpc请求\",{\"1\":{\"47\":1}}],[\"对象关系映射\",{\"1\":{\"257\":1}}],[\"对象\",{\"1\":{\"246\":2}}],[\"对象的映射关系配置在\",{\"1\":{\"246\":1}}],[\"对象之间的映射关系配置在\",{\"1\":{\"246\":1}}],[\"对应spring扩展点\",{\"1\":{\"134\":1}}],[\"对react语法大刀阔斧改良的工具库\",{\"1\":{\"59\":1}}],[\"对于刚刚准备转码的小伙伴来说\",{\"1\":{\"56\":1}}],[\"很实用\",{\"1\":{\"57\":1}}],[\"另外还提供了高等进阶的一些方法\",{\"1\":{\"57\":1}}],[\"英文原版15\",{\"1\":{\"55\":1}}],[\"讲解react使用技巧的开源电子书\",{\"1\":{\"55\":1}}],[\"十分详细\",{\"1\":{\"53\":1}}],[\"💎\",{\"0\":{\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"65\":1,\"66\":1}}],[\"🚀这么写react更丝滑🚀\",{\"1\":{\"59\":1}}],[\"🚀\",{\"0\":{\"52\":1,\"58\":1,\"64\":1}}],[\"助你玩转react学习和开发\",{\"1\":{\"51\":1}}],[\"分享几个上千✨的react开源库助你玩转react\",{\"0\":{\"51\":1}}],[\"分布式一致性\",{\"1\":{\"40\":1}}],[\"分布式事务\",{\"1\":{\"35\":1}}],[\"分布式追踪系统\",{\"1\":{\"35\":1}}],[\"分布式配置中心\",{\"1\":{\"35\":1}}],[\"分布式概述\",{\"0\":{\"6\":1}}],[\"如何调度无关\",{\"1\":{\"214\":1}}],[\"如何debug\",{\"1\":{\"48\":1}}],[\"如\",{\"1\":{\"127\":2}}],[\"如果basepackages目录下有feignclient注解的类\",{\"1\":{\"278\":1}}],[\"如果是factorybean\",{\"1\":{\"133\":1}}],[\"如果是普通bean\",{\"1\":{\"133\":1}}],[\"如果你也有值得分享的库\",{\"1\":{\"60\":1}}],[\"如果你了解svelte\",{\"1\":{\"59\":1}}],[\"如果你使用typescript开发react\",{\"1\":{\"57\":1}}],[\"如果在发rpc请求之前加锁\",{\"1\":{\"47\":1}}],[\"如果任期比自己的任期小\",{\"1\":{\"47\":2}}],[\"问题\",{\"1\":{\"112\":1}}],[\"问题出在sendinstallsnapshot和sendrequestvote\",{\"1\":{\"47\":1}}],[\"问题记录\",{\"0\":{\"14\":1,\"15\":1}}],[\"gh122\",{\"1\":{\"265\":1}}],[\"genericbeandefinition\",{\"1\":{\"278\":1}}],[\"generics\",{\"1\":{\"265\":1}}],[\"generatebeanname\",{\"1\":{\"265\":1}}],[\"generate\",{\"1\":{\"265\":1}}],[\"getlong\",{\"1\":{\"282\":1}}],[\"getlogger\",{\"1\":{\"261\":1}}],[\"getqualifier\",{\"1\":{\"278\":1}}],[\"geturl\",{\"1\":{\"278\":1}}],[\"getuser\",{\"1\":{\"81\":1}}],[\"getfactory\",{\"1\":{\"266\":2}}],[\"getmatchoutcome\",{\"1\":{\"282\":1}}],[\"getmodel\",{\"1\":{\"266\":3}}],[\"getmetadata\",{\"1\":{\"166\":1}}],[\"getmethodname\",{\"1\":{\"210\":1}}],[\"getmethod\",{\"1\":{\"148\":1,\"210\":1}}],[\"getmemberconditions\",{\"1\":{\"166\":1}}],[\"getdelegate\",{\"1\":{\"278\":2}}],[\"getdefaultclassloader\",{\"1\":{\"261\":1,\"265\":1}}],[\"getdeclaringclass\",{\"1\":{\"148\":1}}],[\"getresourceasreader\",{\"1\":{\"261\":1}}],[\"getresources\",{\"1\":{\"261\":1}}],[\"getresulttype\",{\"1\":{\"260\":1}}],[\"getreturntype\",{\"1\":{\"148\":2,\"260\":2,\"261\":1}}],[\"getoptional\",{\"1\":{\"278\":1}}],[\"getorbuild\",{\"1\":{\"266\":1}}],[\"getoutputstream\",{\"1\":{\"210\":2}}],[\"getobjecttype\",{\"1\":{\"121\":1,\"261\":2}}],[\"getobject\",{\"1\":{\"121\":2,\"261\":2,\"278\":2}}],[\"getkeystorepassword\",{\"1\":{\"206\":1}}],[\"getkeystorepath\",{\"1\":{\"206\":1}}],[\"getkeystoreinstancetype\",{\"1\":{\"206\":1}}],[\"gethost\",{\"1\":{\"206\":2}}],[\"getpath\",{\"1\":{\"278\":1}}],[\"getparameter\",{\"1\":{\"260\":1}}],[\"getparameters\",{\"1\":{\"210\":1}}],[\"getparametertypes\",{\"1\":{\"210\":1}}],[\"getport\",{\"1\":{\"206\":1}}],[\"getpropagationbehavior\",{\"1\":{\"148\":4}}],[\"getprops\",{\"1\":{\"127\":1}}],[\"get\",{\"1\":{\"168\":1,\"204\":1,\"210\":1,\"260\":2,\"265\":1,\"278\":5}}],[\"getannotations\",{\"1\":{\"265\":1}}],[\"getannotationattributes\",{\"1\":{\"168\":1,\"265\":4}}],[\"getadapter\",{\"1\":{\"148\":1}}],[\"getint\",{\"1\":{\"256\":1}}],[\"getinterfacename\",{\"1\":{\"210\":1}}],[\"getinputstream\",{\"1\":{\"210\":2}}],[\"getimports\",{\"1\":{\"175\":1}}],[\"getisolationlevel\",{\"1\":{\"148\":1}}],[\"getid\",{\"1\":{\"81\":1}}],[\"getname\",{\"1\":{\"148\":1,\"168\":1,\"210\":1,\"260\":5,\"261\":3,\"265\":4,\"278\":1,\"282\":2}}],[\"gettarget\",{\"1\":{\"278\":2}}],[\"gettargetclass\",{\"1\":{\"148\":1}}],[\"gettransitions\",{\"1\":{\"266\":1}}],[\"gettransactionsynchronization\",{\"1\":{\"148\":2}}],[\"gettransactionstatus\",{\"1\":{\"148\":1}}],[\"gettransaction\",{\"1\":{\"148\":3}}],[\"gettransactionattribute\",{\"1\":{\"148\":1}}],[\"gettransactionattributesource\",{\"1\":{\"148\":1}}],[\"gettls\",{\"1\":{\"206\":2}}],[\"gettimeout\",{\"1\":{\"148\":2}}],[\"getthis\",{\"1\":{\"148\":2}}],[\"getenum\",{\"1\":{\"265\":1}}],[\"getenvironment\",{\"1\":{\"143\":1}}],[\"getearlybeanreference\",{\"1\":{\"134\":1,\"161\":4}}],[\"getcontextid\",{\"1\":{\"278\":1}}],[\"getcontextclassloader\",{\"1\":{\"260\":2,\"261\":1}}],[\"getconstructorargumentvalues\",{\"1\":{\"261\":2}}],[\"getconnection\",{\"1\":{\"256\":1,\"282\":1}}],[\"getcondition\",{\"1\":{\"166\":1}}],[\"getconditionclasses\",{\"1\":{\"166\":1}}],[\"getcertificatepassword\",{\"1\":{\"206\":1}}],[\"getcertificatepath\",{\"1\":{\"206\":1}}],[\"getcause\",{\"1\":{\"148\":1}}],[\"getcachekey\",{\"1\":{\"133\":1,\"134\":1}}],[\"getclassname\",{\"1\":{\"265\":3,\"278\":1}}],[\"getclassloader\",{\"1\":{\"168\":1,\"282\":1}}],[\"getclass\",{\"1\":{\"133\":1,\"134\":1,\"143\":1,\"261\":1}}],[\"getbuilder\",{\"1\":{\"266\":2}}],[\"getboolean\",{\"1\":{\"265\":1}}],[\"getbeanfactory\",{\"1\":{\"266\":2}}],[\"getbeandefinition\",{\"1\":{\"261\":1,\"265\":1,\"278\":1}}],[\"getbeanclassname\",{\"1\":{\"261\":2}}],[\"getbean\",{\"1\":{\"257\":1,\"261\":1,\"266\":1,\"278\":2}}],[\"getbeanpostprocessors\",{\"1\":{\"161\":1}}],[\"getbegintime\",{\"1\":{\"81\":2}}],[\"getbyid\",{\"1\":{\"81\":1}}],[\"getshortname\",{\"1\":{\"261\":1}}],[\"getsql\",{\"1\":{\"260\":1}}],[\"getscheme\",{\"1\":{\"206\":2}}],[\"getsimplename\",{\"1\":{\"143\":1}}],[\"getservletname\",{\"1\":{\"143\":3}}],[\"getservletcontext\",{\"1\":{\"143\":2}}],[\"getservletconfig\",{\"1\":{\"143\":1}}],[\"getserverstate\",{\"1\":{\"66\":1}}],[\"getstringarray\",{\"1\":{\"265\":1}}],[\"getstring\",{\"1\":{\"256\":1,\"265\":1,\"282\":1}}],[\"getstock\",{\"1\":{\"81\":1}}],[\"getstatemachine\",{\"1\":{\"266\":1}}],[\"getstatemachineconfigurationconfig\",{\"1\":{\"266\":1}}],[\"getstates\",{\"1\":{\"266\":1}}],[\"getstate\",{\"1\":{\"47\":1,\"65\":1,\"66\":4}}],[\"globalnamingresources>\",{\"1\":{\"236\":1}}],[\"globalresourceslifecyclelistener\",{\"1\":{\"236\":1}}],[\"guide\",{\"1\":{\"197\":1}}],[\"given\",{\"1\":{\"148\":1,\"265\":1}}],[\"github\",{\"1\":{\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"204\":2}}],[\"git地址\",{\"1\":{\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1}}],[\"groupid>\",{\"1\":{\"282\":1}}],[\"gradle坑点\",{\"0\":{\"109\":1}}],[\"gradle开发idea插件\",{\"1\":{\"108\":1}}],[\"green\",{\"1\":{\"59\":1}}],[\"golab\",{\"1\":{\"56\":1}}],[\"golang\",{\"1\":{\"13\":1}}],[\"golang后端开发\",{\"1\":{\"12\":1}}],[\"go\",{\"1\":{\"47\":2}}],[\"主逻辑如下\",{\"1\":{\"47\":1}}],[\"心跳的核心代码如下\",{\"1\":{\"47\":1}}],[\"others\",{\"0\":{\"311\":1}}],[\"o>\",{\"1\":{\"265\":1,\"266\":1}}],[\"oos\",{\"1\":{\"210\":4}}],[\"opt\",{\"1\":{\"274\":1}}],[\"options\",{\"1\":{\"204\":2}}],[\"optional\",{\"1\":{\"204\":2}}],[\"opensession\",{\"1\":{\"260\":2,\"261\":1}}],[\"openconnection\",{\"1\":{\"210\":1}}],[\"our\",{\"1\":{\"148\":2}}],[\"outputstream\",{\"1\":{\"210\":3}}],[\"out\",{\"1\":{\"148\":3,\"159\":2,\"210\":3,\"256\":1}}],[\"of\",{\"1\":{\"143\":2,\"148\":2,\"278\":1}}],[\"or\",{\"1\":{\"274\":1}}],[\"org\",{\"1\":{\"204\":3,\"236\":10,\"257\":2}}],[\"oracle\",{\"1\":{\"127\":1}}],[\"orm框架\",{\"1\":{\"257\":1}}],[\"orm框架实现\",{\"0\":{\"254\":1}}],[\"orm是什么\",{\"0\":{\"257\":1}}],[\"orm\",{\"0\":{\"124\":1},\"1\":{\"127\":1,\"246\":1,\"257\":1},\"2\":{\"130\":1,\"263\":1}}],[\"order\",{\"1\":{\"81\":1,\"148\":1,\"204\":2}}],[\"orderid\",{\"1\":{\"81\":3}}],[\"overridden\",{\"1\":{\"148\":2}}],[\"override\",{\"1\":{\"81\":1,\"134\":1,\"143\":2,\"148\":2,\"168\":1,\"260\":1,\"261\":9,\"265\":2,\"266\":1,\"278\":2,\"282\":1}}],[\"overview\",{\"2\":{\"8\":1,\"33\":1,\"38\":1}}],[\"objectutils\",{\"1\":{\"265\":1}}],[\"objectstatemachinefactory<s\",{\"1\":{\"266\":3}}],[\"objects\",{\"1\":{\"260\":2}}],[\"objectinputstream\",{\"1\":{\"210\":1}}],[\"objectoutputstream\",{\"1\":{\"210\":2}}],[\"object>\",{\"1\":{\"168\":1,\"278\":1}}],[\"object\",{\"1\":{\"66\":1,\"133\":3,\"134\":3,\"148\":8,\"161\":3,\"210\":1,\"260\":3,\"278\":4}}],[\"one\",{\"1\":{\"265\":1}}],[\"onconfigurers\",{\"1\":{\"265\":1}}],[\"onclick=\",{\"1\":{\"59\":2}}],[\"only\",{\"1\":{\"148\":2}}],[\"on\",{\"1\":{\"143\":1,\"148\":1,\"236\":1,\"278\":2}}],[\"onreceiveprops\",{\"1\":{\"60\":1}}],[\"ondidmount\",{\"1\":{\"60\":1}}],[\"okhttpribbonconfiguration\",{\"1\":{\"204\":1}}],[\"okhttpfeignloadbalancedconfiguration\",{\"1\":{\"204\":1}}],[\"ok\",{\"1\":{\"47\":6,\"81\":1,\"265\":1}}],[\"<artifactid>spring\",{\"1\":{\"282\":1}}],[\"<groupid>org\",{\"1\":{\"282\":1}}],[\"<globalnamingresources>\",{\"1\":{\"236\":1}}],[\"<dependency>\",{\"1\":{\"282\":1}}],[\"<displaydemo\",{\"1\":{\"59\":1}}],[\"<mapper\",{\"1\":{\"257\":1}}],[\"<valve\",{\"1\":{\"236\":1}}],[\"<context\",{\"1\":{\"236\":1}}],[\"<connector\",{\"1\":{\"236\":2}}],[\"<host\",{\"1\":{\"236\":1}}],[\"<h1>\",{\"1\":{\"60\":1}}],[\"<realm\",{\"1\":{\"236\":2}}],[\"<resource\",{\"1\":{\"236\":1}}],[\"<engine\",{\"1\":{\"236\":1}}],[\"<listener\",{\"1\":{\"236\":5}}],[\"<scope>runtime<\",{\"1\":{\"282\":1}}],[\"<select\",{\"1\":{\"257\":2}}],[\"<service\",{\"1\":{\"236\":1}}],[\"<server\",{\"1\":{\"236\":1}}],[\"<space>\",{\"1\":{\"59\":1}}],[\"<integer>getnumber\",{\"1\":{\"148\":1}}],[\"<button\",{\"1\":{\"59\":2}}],[\"<t>\",{\"1\":{\"260\":5,\"278\":2}}],[\"<tag\",{\"1\":{\"59\":1}}],[\"<typography\",{\"1\":{\"59\":1}}],[\"<\",{\"1\":{\"47\":12,\"59\":4,\"60\":1,\"81\":1,\"148\":1,\"236\":7,\"257\":5,\"265\":1,\"282\":1}}],[\"<=\",{\"1\":{\"47\":1}}],[\"清理timer\",{\"1\":{\"47\":1}}],[\"5k的⭐\",{\"1\":{\"55\":1}}],[\"5\",{\"1\":{\"47\":1,\"81\":1,\"174\":1}}],[\"投票\",{\"1\":{\"47\":1}}],[\"设置任期为args中的任期\",{\"1\":{\"47\":1}}],[\"设置自身为follower\",{\"1\":{\"47\":1}}],[\"esmattributes\",{\"1\":{\"265\":2}}],[\"e>>\",{\"1\":{\"265\":1,\"266\":3}}],[\"e>\",{\"1\":{\"265\":3,\"266\":15}}],[\"eventexecutorgroup的实现类\",{\"1\":{\"214\":1}}],[\"eventexecutorgroup\",{\"1\":{\"214\":1}}],[\"eventexecutor\",{\"1\":{\"214\":2}}],[\"eventloop的管理器\",{\"1\":{\"214\":1}}],[\"eventloopgroup\",{\"1\":{\"214\":1}}],[\"eventloop\",{\"1\":{\"214\":1,\"215\":4}}],[\"evaluatetryfailure\",{\"1\":{\"148\":2}}],[\"eurekaclientautoconfiguration\",{\"1\":{\"204\":1}}],[\"eureka\",{\"1\":{\"204\":1}}],[\"edit\",{\"1\":{\"200\":1}}],[\"e\",{\"1\":{\"168\":1,\"210\":16,\"260\":6,\"261\":6,\"265\":2}}],[\"eagerly\",{\"1\":{\"161\":1}}],[\"earlysingletonexposure\",{\"1\":{\"161\":2}}],[\"earlysingletonobjects用于保证单例\",{\"1\":{\"161\":1}}],[\"earlysingletonobjects\",{\"1\":{\"161\":1}}],[\"earlyproxyreferences\",{\"1\":{\"133\":1,\"134\":1}}],[\"earlyproxyreferences中缓存的是已经创建好的代理对象\",{\"1\":{\"133\":1}}],[\"effectively\",{\"1\":{\"148\":1}}],[\"empty\",{\"1\":{\"148\":1}}],[\"error\",{\"1\":{\"143\":2,\"148\":3,\"265\":1}}],[\"eq\",{\"1\":{\"81\":1}}],[\"equalityfn\",{\"1\":{\"66\":4}}],[\"exec\",{\"1\":{\"246\":1}}],[\"executequery\",{\"1\":{\"256\":1,\"260\":1,\"282\":1}}],[\"execute\",{\"1\":{\"148\":1}}],[\"excalidraw\",{\"2\":{\"191\":1}}],[\"excalidraw快捷键\",{\"0\":{\"190\":1}}],[\"exception\",{\"1\":{\"148\":5,\"260\":3,\"261\":5,\"265\":2,\"266\":1,\"282\":1}}],[\"existing\",{\"1\":{\"148\":3}}],[\"ex2\",{\"1\":{\"148\":5}}],[\"ex\",{\"1\":{\"143\":6,\"148\":13,\"282\":1}}],[\"explicittype\",{\"1\":{\"166\":1}}],[\"exploded\",{\"1\":{\"143\":1}}],[\"exposedobject\",{\"1\":{\"161\":4}}],[\"export\",{\"1\":{\"60\":1,\"66\":7}}],[\"extending\",{\"1\":{\"265\":1}}],[\"extends\",{\"1\":{\"133\":1,\"143\":2,\"148\":1,\"166\":1,\"265\":6,\"266\":2,\"282\":3}}],[\"extensions\",{\"1\":{\"148\":1}}],[\"external\",{\"1\":{\"66\":3}}],[\"en\",{\"1\":{\"257\":1}}],[\"engine<\",{\"1\":{\"237\":1}}],[\"engine\",{\"0\":{\"237\":1}}],[\"engine>\",{\"1\":{\"236\":1}}],[\"encoding=\",{\"1\":{\"236\":1,\"257\":1}}],[\"enablefeignclients\",{\"1\":{\"278\":1}}],[\"enablefeignclients注解引入了feignclientsregistrar\",{\"1\":{\"278\":1}}],[\"enablestatemachine\",{\"1\":{\"265\":2}}],[\"enablestatemachineenclosingclass\",{\"1\":{\"265\":3}}],[\"enablestatemachineenclosingclassname\",{\"1\":{\"265\":2}}],[\"enableconfigurationproperties\",{\"1\":{\"204\":4,\"205\":1,\"206\":1}}],[\"enabled\",{\"1\":{\"204\":1,\"205\":1}}],[\"enabletransactionmanagement后\",{\"1\":{\"148\":1}}],[\"enabletx\",{\"1\":{\"148\":2}}],[\"enableloggingrequestdetails=\",{\"1\":{\"143\":1}}],[\"enableloggingrequestdetails\",{\"1\":{\"143\":2}}],[\"environment中是否存在某个属性\",{\"1\":{\"165\":1}}],[\"environmentaware\",{\"1\":{\"143\":1,\"265\":1,\"278\":1}}],[\"environmentcapable\",{\"1\":{\"143\":1}}],[\"enter\",{\"1\":{\"47\":30}}],[\"enumtostring\",{\"1\":{\"47\":15}}],[\"elementtype\",{\"1\":{\"168\":2,\"278\":1}}],[\"election问题记录\",{\"0\":{\"47\":1}}],[\"election\",{\"0\":{\"41\":1},\"1\":{\"17\":1,\"47\":1}}],[\"eligibleadvisors\",{\"1\":{\"148\":5}}],[\"else\",{\"1\":{\"47\":1,\"148\":5,\"265\":2,\"266\":1,\"278\":1}}],[\"version=\",{\"1\":{\"236\":1,\"257\":1}}],[\"vipstone\",{\"1\":{\"149\":1}}],[\"void\",{\"1\":{\"143\":2,\"159\":2,\"210\":1,\"215\":3,\"260\":1,\"261\":6,\"265\":1,\"266\":1,\"278\":2}}],[\"voucherorder\",{\"1\":{\"81\":7}}],[\"voucher\",{\"1\":{\"81\":5}}],[\"voucherid\",{\"1\":{\"81\":4}}],[\"votegranted\",{\"1\":{\"47\":3}}],[\"votecount++\",{\"1\":{\"47\":1}}],[\"votecount\",{\"1\":{\"47\":5}}],[\"valves\",{\"1\":{\"236\":1}}],[\"validate\",{\"1\":{\"174\":1,\"278\":1}}],[\"validatemembercondition\",{\"1\":{\"166\":1}}],[\"valueof\",{\"1\":{\"278\":1}}],[\"value\",{\"1\":{\"59\":4,\"143\":2,\"148\":1,\"167\":1,\"168\":2,\"204\":1,\"205\":3,\"265\":1}}],[\"vavr\",{\"1\":{\"148\":2}}],[\"vavrdelegate\",{\"1\":{\"148\":4}}],[\"vavrpresent\",{\"1\":{\"148\":2}}],[\"vanilla\",{\"1\":{\"66\":5}}],[\"vuejs\",{\"1\":{\"197\":1}}],[\"vuepress\",{\"0\":{\"197\":1},\"2\":{\"199\":1}}],[\"vuepress相关\",{\"0\":{\"196\":1}}],[\"vue\",{\"2\":{\"62\":1}}],[\"v\",{\"1\":{\"47\":18}}],[\"=>\",{\"1\":{\"59\":3,\"60\":3,\"65\":4,\"66\":6}}],[\"===\",{\"1\":{\"66\":1}}],[\"==\",{\"1\":{\"47\":3,\"148\":7,\"265\":3}}],[\"=\",{\"1\":{\"47\":25,\"59\":3,\"60\":1,\"65\":5,\"66\":8,\"81\":6,\"127\":1,\"133\":2,\"134\":1,\"143\":6,\"148\":46,\"161\":4,\"166\":5,\"167\":2,\"168\":2,\"204\":9,\"205\":10,\"206\":6,\"210\":14,\"256\":9,\"257\":5,\"260\":14,\"261\":20,\"265\":34,\"266\":14,\"278\":30,\"282\":12}}],[\"i++\",{\"1\":{\"265\":1}}],[\"i\",{\"1\":{\"265\":3}}],[\"iuserdao\",{\"1\":{\"257\":5,\"260\":6,\"261\":3}}],[\"ioexception\",{\"1\":{\"210\":2,\"261\":1}}],[\"ioutils\",{\"1\":{\"210\":2}}],[\"iping\",{\"1\":{\"204\":1}}],[\"irule\",{\"1\":{\"204\":1}}],[\"iclientconfig\",{\"1\":{\"204\":1,\"205\":1}}],[\"icons\",{\"1\":{\"197\":1}}],[\"icon\",{\"0\":{\"197\":1},\"1\":{\"197\":1}}],[\"iloadbalancer\",{\"1\":{\"204\":4}}],[\"illegalargumentexception\",{\"1\":{\"265\":1}}],[\"illegalaccessexception\",{\"1\":{\"210\":1}}],[\"illegaltransactionstateexception\",{\"1\":{\"148\":1}}],[\"illegalstateexception\",{\"1\":{\"148\":1}}],[\"ibp\",{\"1\":{\"161\":2}}],[\"ignored\",{\"1\":{\"148\":1}}],[\"it\",{\"1\":{\"148\":2,\"265\":3}}],[\"id=\",{\"1\":{\"257\":2}}],[\"ideaprojects\",{\"1\":{\"236\":1}}],[\"idea快捷键\",{\"0\":{\"193\":1}}],[\"idea2022\",{\"1\":{\"144\":1}}],[\"idea问题记录\",{\"0\":{\"112\":1}}],[\"idea\",{\"0\":{\"307\":1},\"2\":{\"105\":1,\"111\":1,\"114\":1,\"194\":1}}],[\"id\",{\"1\":{\"81\":1,\"256\":4,\"257\":5,\"282\":3}}],[\"isautostart\",{\"1\":{\"266\":1}}],[\"isassignable\",{\"1\":{\"265\":1}}],[\"isafter\",{\"1\":{\"81\":1}}],[\"isconfigurationcandidate\",{\"1\":{\"174\":1}}],[\"istraceenabled\",{\"1\":{\"161\":1}}],[\"iswarnenabled\",{\"1\":{\"148\":1}}],[\"isolation\",{\"1\":{\"148\":3}}],[\"isvavrtry\",{\"1\":{\"148\":2}}],[\"isset\",{\"1\":{\"204\":1}}],[\"issuecomment\",{\"1\":{\"204\":2}}],[\"issues\",{\"1\":{\"204\":2}}],[\"issuspend\",{\"1\":{\"148\":1}}],[\"issynthetic\",{\"1\":{\"161\":1}}],[\"issingletoncurrentlyincreation\",{\"1\":{\"161\":1}}],[\"issingleton\",{\"1\":{\"121\":1,\"161\":1,\"261\":2}}],[\"iskotlintype\",{\"1\":{\"148\":1}}],[\"is\",{\"1\":{\"148\":3,\"204\":2,\"265\":2,\"278\":2}}],[\"isdebugenabled\",{\"1\":{\"143\":1,\"148\":1}}],[\"isinfoenabled\",{\"1\":{\"143\":2}}],[\"isexistingtransaction\",{\"1\":{\"148\":1}}],[\"iserrorenabled\",{\"1\":{\"143\":1}}],[\"isempty\",{\"1\":{\"143\":1,\"148\":2,\"206\":1,\"265\":1}}],[\"isprototype\",{\"1\":{\"121\":1}}],[\"isbefore\",{\"1\":{\"81\":1}}],[\"isloading\",{\"1\":{\"60\":5}}],[\"isleader\",{\"1\":{\"47\":259}}],[\"implementation\",{\"1\":{\"265\":1}}],[\"implements\",{\"1\":{\"133\":1,\"143\":2,\"168\":1,\"260\":1,\"261\":3,\"265\":1,\"266\":2,\"278\":2,\"282\":1}}],[\"importingclassmetadata\",{\"1\":{\"265\":10}}],[\"important\",{\"1\":{\"204\":2}}],[\"import注解\",{\"1\":{\"175\":1}}],[\"importresource\",{\"1\":{\"174\":1}}],[\"importselector\",{\"1\":{\"174\":1}}],[\"importbeandefinitionregistrar\",{\"0\":{\"158\":1},\"1\":{\"158\":1,\"174\":1,\"265\":1,\"278\":1}}],[\"import\",{\"0\":{\"175\":1},\"1\":{\"59\":2,\"60\":3,\"66\":2,\"174\":1,\"183\":1,\"204\":2,\"278\":1}}],[\"image\",{\"1\":{\"53\":1,\"54\":1,\"56\":1,\"154\":1}}],[\"inputstream\",{\"1\":{\"210\":3}}],[\"invalid\",{\"1\":{\"148\":1}}],[\"invalidtimeoutexception\",{\"1\":{\"148\":1}}],[\"invocationhandler\",{\"1\":{\"260\":2,\"261\":1}}],[\"invocationtargetexception\",{\"1\":{\"210\":1}}],[\"invocationcallback\",{\"1\":{\"148\":1}}],[\"invocation\",{\"1\":{\"148\":10,\"210\":15}}],[\"invokebeanfactorypostprocessors\",{\"0\":{\"173\":1}}],[\"invoked\",{\"1\":{\"148\":1}}],[\"invokewithintransaction\",{\"1\":{\"148\":4}}],[\"invoke\",{\"1\":{\"148\":2,\"210\":1}}],[\"indicate\",{\"1\":{\"148\":1}}],[\"instead\",{\"1\":{\"148\":1}}],[\"install\",{\"1\":{\"274\":1}}],[\"installsnapshotreply\",{\"1\":{\"47\":2}}],[\"installsnapshotargs\",{\"1\":{\"47\":2}}],[\"installsnapshot\",{\"1\":{\"47\":2}}],[\"instantiationexception\",{\"1\":{\"210\":1}}],[\"instantiationawarebeanpostprocessor接口中包含方法postprocessafterinitialization\",{\"1\":{\"133\":1}}],[\"instanceof\",{\"1\":{\"148\":5,\"161\":1,\"265\":1,\"278\":5}}],[\"infrastructure\",{\"1\":{\"148\":4}}],[\"information\",{\"1\":{\"278\":1}}],[\"info\",{\"1\":{\"143\":2,\"257\":1,\"260\":1,\"261\":1,\"265\":1,\"282\":1}}],[\"initwithniwsconfig\",{\"1\":{\"205\":1}}],[\"initwebapplicationcontext\",{\"1\":{\"143\":1}}],[\"initiated\",{\"1\":{\"148\":1}}],[\"initializingbean\",{\"0\":{\"156\":1},\"1\":{\"155\":1,\"156\":1,\"261\":1,\"266\":1,\"278\":1,\"282\":1}}],[\"initializing\",{\"1\":{\"143\":2}}],[\"initialization\",{\"1\":{\"143\":3}}],[\"initialstate\",{\"1\":{\"65\":2}}],[\"initapplicationexception\",{\"1\":{\"148\":1}}],[\"initframeworkservlet\",{\"1\":{\"143\":1}}],[\"initservletbean中创建spring容器\",{\"1\":{\"143\":1}}],[\"initservletbean\",{\"1\":{\"143\":2}}],[\"initbeanwrapper\",{\"1\":{\"143\":1}}],[\"init\",{\"1\":{\"143\":3}}],[\"in\",{\"1\":{\"54\":1,\"143\":1,\"148\":5,\"265\":1}}],[\"intro\",{\"0\":{\"295\":1}}],[\"introspector\",{\"1\":{\"261\":1}}],[\"introductionadvisor\",{\"1\":{\"148\":2}}],[\"intentionally\",{\"1\":{\"261\":1}}],[\"integer\",{\"1\":{\"210\":1}}],[\"interfaces\",{\"1\":{\"265\":1}}],[\"interfacename\",{\"1\":{\"210\":3}}],[\"interface\",{\"1\":{\"148\":1,\"168\":1,\"197\":1,\"215\":1,\"257\":1,\"260\":1,\"278\":1}}],[\"interceptor\",{\"1\":{\"148\":5}}],[\"interview\",{\"0\":{\"53\":1},\"1\":{\"53\":1}}],[\"intellij报红\",{\"0\":{\"108\":1}}],[\"intn\",{\"1\":{\"47\":2}}],[\"int\",{\"1\":{\"47\":2,\"206\":1,\"256\":1,\"265\":1}}],[\"if\",{\"1\":{\"47\":17,\"81\":4,\"133\":2,\"143\":5,\"148\":26,\"161\":4,\"204\":1,\"206\":1,\"265\":17,\"266\":2,\"274\":1,\"278\":9,\"282\":2}}],[\"目前支持\",{\"1\":{\"127\":1}}],[\"目前已经1\",{\"1\":{\"60\":1}}],[\"目前已经41\",{\"1\":{\"57\":1}}],[\"目前6\",{\"1\":{\"59\":1}}],[\"目前17k的⭐\",{\"1\":{\"56\":1}}],[\"目前1\",{\"1\":{\"54\":1}}],[\"目前7\",{\"1\":{\"53\":1}}],[\"目前投票的核心代码如下\",{\"1\":{\"47\":1}}],[\"目前的问题是\",{\"1\":{\"47\":1}}],[\"316281653\",{\"1\":{\"204\":2}}],[\"3000\",{\"1\":{\"60\":1}}],[\"300\",{\"1\":{\"47\":2}}],[\"3\",{\"1\":{\"47\":6,\"65\":1,\"81\":2,\"161\":1,\"174\":3,\"236\":1,\"257\":2}}],[\"h\",{\"1\":{\"236\":1}}],[\"havingvalue\",{\"1\":{\"282\":1}}],[\"have\",{\"1\":{\"278\":2}}],[\"hardcodedtarget<>\",{\"1\":{\"278\":2}}],[\"has\",{\"1\":{\"278\":1}}],[\"hashicorp\",{\"1\":{\"274\":4}}],[\"hastext\",{\"1\":{\"265\":1,\"278\":3,\"282\":1}}],[\"hasinstantiationawarebeanpostprocessors\",{\"1\":{\"161\":1}}],[\"hasintroductions\",{\"1\":{\"148\":2}}],[\"handler\",{\"1\":{\"210\":1,\"260\":4,\"261\":2}}],[\"handleexistingtransaction\",{\"1\":{\"148\":1}}],[\"hateonion\",{\"1\":{\"55\":1}}],[\"hikari\",{\"1\":{\"282\":3}}],[\"hikaridatasource\",{\"1\":{\"282\":5}}],[\"hikaricp\",{\"1\":{\"127\":1}}],[\"hibernate\",{\"1\":{\"127\":1}}],[\"h1>\",{\"1\":{\"60\":1}}],[\"holder\",{\"1\":{\"278\":2}}],[\"hope\",{\"1\":{\"197\":1}}],[\"how\",{\"1\":{\"148\":2}}],[\"hocs\",{\"1\":{\"60\":2}}],[\"host<\",{\"1\":{\"238\":1}}],[\"host\",{\"0\":{\"238\":1}}],[\"hosts\",{\"1\":{\"237\":1}}],[\"host>\",{\"1\":{\"236\":1}}],[\"hostname\",{\"1\":{\"210\":2}}],[\"hos\",{\"0\":{\"60\":1}}],[\"hooks\",{\"0\":{\"59\":1},\"1\":{\"59\":2}}],[\"httpurlconnection\",{\"1\":{\"210\":7}}],[\"httpclient\",{\"1\":{\"210\":6}}],[\"httpclientribbonconfiguration\",{\"1\":{\"204\":1}}],[\"httpclientconfiguration\",{\"1\":{\"204\":1}}],[\"httpclientfeignloadbalancedconfiguration\",{\"1\":{\"204\":1}}],[\"http\",{\"1\":{\"143\":1,\"210\":1,\"236\":1,\"257\":1,\"278\":4}}],[\"httpserver\",{\"1\":{\"210\":1}}],[\"httpserverhandler\",{\"1\":{\"210\":2}}],[\"httpservletresponse\",{\"1\":{\"210\":1}}],[\"httpservletrequest\",{\"1\":{\"210\":1}}],[\"httpservlet\",{\"1\":{\"143\":1}}],[\"httpservletbean\",{\"1\":{\"143\":2}}],[\"https\",{\"1\":{\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"103\":2,\"112\":1,\"149\":1,\"197\":1,\"200\":1,\"204\":2,\"246\":1}}],[\"html\",{\"1\":{\"103\":1,\"149\":1,\"197\":1,\"246\":1}}],[\"hterm\",{\"1\":{\"47\":17}}],[\"helloservlet\",{\"1\":{\"236\":1}}],[\"helloservelet\",{\"1\":{\"236\":1}}],[\"helloservice\",{\"1\":{\"210\":2}}],[\"helloserviceimpl\",{\"1\":{\"210\":1}}],[\"headers\",{\"1\":{\"143\":1}}],[\"heartbeat\",{\"1\":{\"47\":18}}],[\"here\",{\"1\":{\"47\":2,\"204\":2}}],[\"2步骤发现出现循环依赖后会创建aservice代理对象\",{\"1\":{\"161\":1}}],[\"2步骤中aservice代理对象还没有填充属性\",{\"1\":{\"161\":1}}],[\"2步骤中\",{\"1\":{\"160\":1}}],[\"2中得到的是aservice普通对象\",{\"1\":{\"161\":1}}],[\"2k的⭐\",{\"1\":{\"54\":1}}],[\"2+1\",{\"1\":{\"47\":1}}],[\"2b\",{\"1\":{\"47\":1}}],[\"2a\",{\"1\":{\"47\":2}}],[\"2\",{\"1\":{\"47\":81,\"65\":1,\"81\":2,\"161\":2,\"173\":1,\"174\":11,\"175\":1}}],[\"20000\",{\"1\":{\"236\":1}}],[\"2086\",{\"1\":{\"204\":2}}],[\"2017\",{\"1\":{\"11\":1}}],[\"2022\",{\"1\":{\"12\":3}}],[\"2023\",{\"1\":{\"12\":3}}],[\"2024\",{\"1\":{\"11\":1}}],[\"2021\",{\"1\":{\"11\":2}}],[\"flush\",{\"1\":{\"210\":1}}],[\"feign代理类handler执行流程\",{\"1\":{\"279\":1}}],[\"feign代理类创建流程\",{\"1\":{\"279\":1}}],[\"feignblockingloadbalancerclient\",{\"1\":{\"278\":2}}],[\"feigncontext\",{\"1\":{\"278\":3}}],[\"feignclient\",{\"1\":{\"278\":2}}],[\"feignclientfactorybean\",{\"1\":{\"278\":4}}],[\"feignclientsregistrarfactorybean\",{\"1\":{\"278\":1}}],[\"feignclientsregistrar实现了importbeandefinitionregistrar接口\",{\"1\":{\"278\":1}}],[\"feignclientsregistrar\",{\"1\":{\"278\":2}}],[\"feignrequestoptions\",{\"1\":{\"204\":1}}],[\"feignribbonclientautoconfiguration\",{\"1\":{\"204\":2}}],[\"feignhttpclientproperties\",{\"1\":{\"204\":1}}],[\"feignautoconfiguration\",{\"1\":{\"204\":1}}],[\"feign\",{\"0\":{\"314\":1},\"1\":{\"204\":1,\"278\":4},\"2\":{\"209\":1,\"281\":1}}],[\"feign整合ribbon和consul源码分析\",{\"0\":{\"203\":1}}],[\"first\",{\"1\":{\"204\":2}}],[\"filter\",{\"1\":{\"175\":1}}],[\"findtype\",{\"1\":{\"282\":2}}],[\"find\",{\"1\":{\"148\":2}}],[\"findadvisorsthatcanapply\",{\"1\":{\"148\":1}}],[\"finally\",{\"1\":{\"148\":2,\"260\":2,\"261\":1}}],[\"final\",{\"1\":{\"127\":1,\"143\":2,\"148\":6,\"205\":2,\"206\":2,\"215\":2}}],[\"frontend\",{\"0\":{\"303\":1}}],[\"frommap\",{\"1\":{\"265\":4}}],[\"from\",{\"1\":{\"47\":15,\"59\":2,\"60\":3,\"66\":5,\"143\":1,\"148\":1,\"256\":1,\"257\":2,\"265\":2,\"282\":1}}],[\"framework\",{\"1\":{\"246\":1}}],[\"frameworkservlet\",{\"1\":{\"143\":2}}],[\"fraseryu\",{\"1\":{\"103\":1}}],[\"fallbackfactory\",{\"1\":{\"278\":6}}],[\"fallback\",{\"1\":{\"278\":6}}],[\"false\",{\"1\":{\"47\":86,\"60\":1,\"148\":1,\"168\":1,\"204\":4,\"205\":2,\"206\":1,\"265\":5,\"278\":1,\"282\":1}}],[\"factory=\",{\"1\":{\"236\":1}}],[\"factory\",{\"1\":{\"204\":7}}],[\"factorybean<object>\",{\"1\":{\"278\":1}}],[\"factorybean<sqlsessionfactory>\",{\"1\":{\"261\":1}}],[\"factorybean<t>\",{\"1\":{\"261\":1,\"266\":1}}],[\"factorybean\",{\"1\":{\"121\":8,\"278\":13}}],[\"factorybean介绍\",{\"0\":{\"121\":1},\"1\":{\"261\":1}}],[\"factories中读取starter需要的类\",{\"1\":{\"175\":1}}],[\"failure\",{\"1\":{\"148\":2}}],[\"failed\",{\"1\":{\"143\":2}}],[\"fail\",{\"1\":{\"81\":4}}],[\"foundexactly\",{\"1\":{\"282\":1}}],[\"found\",{\"1\":{\"148\":3}}],[\"forcondition\",{\"1\":{\"282\":1}}],[\"forname\",{\"1\":{\"256\":1,\"260\":1,\"265\":1,\"266\":1,\"282\":1}}],[\"forbeanpropertyaccess\",{\"1\":{\"143\":1}}],[\"foreach\",{\"1\":{\"65\":1}}],[\"for\",{\"1\":{\"47\":1,\"148\":4,\"161\":2,\"166\":3,\"261\":1,\"265\":3,\"282\":1}}],[\"follower确认收到的变更\",{\"1\":{\"42\":1}}],[\"follower返回确认心跳信息\",{\"1\":{\"41\":1}}],[\"follower\",{\"1\":{\"41\":1,\"47\":48}}],[\"function\",{\"1\":{\"65\":4,\"66\":2,\"148\":1}}],[\"func\",{\"1\":{\"47\":5}}],[\"0\",{\"1\":{\"47\":11,\"59\":1,\"65\":1,\"236\":2,\"257\":2,\"260\":3,\"261\":1,\"265\":3,\"274\":2}}],[\"t\",{\"1\":{\"236\":1,\"260\":4,\"261\":2,\"265\":2,\"274\":1,\"278\":4}}],[\"tls\",{\"1\":{\"206\":6}}],[\"tlsconfig\",{\"1\":{\"206\":5}}],[\"tm\",{\"1\":{\"148\":4}}],[\"txt\",{\"1\":{\"236\":1}}],[\"txinfo\",{\"1\":{\"148\":7}}],[\"txsupport\",{\"1\":{\"148\":2}}],[\"txattr\",{\"1\":{\"148\":12}}],[\"txmanager\",{\"1\":{\"148\":2}}],[\"tap\",{\"1\":{\"274\":5}}],[\"table\",{\"1\":{\"256\":1}}],[\"tas\",{\"1\":{\"148\":3}}],[\"targeter\",{\"1\":{\"278\":4}}],[\"targetclass\",{\"1\":{\"148\":6}}],[\"target\",{\"1\":{\"148\":4,\"168\":1,\"236\":1,\"265\":1,\"278\":3}}],[\"tag>\",{\"1\":{\"59\":1}}],[\"tag\",{\"1\":{\"59\":1}}],[\"that\",{\"1\":{\"236\":1}}],[\"theme\",{\"1\":{\"197\":1}}],[\"the\",{\"1\":{\"148\":8,\"204\":2,\"278\":6}}],[\"they\",{\"1\":{\"143\":1}}],[\"this\",{\"1\":{\"133\":1,\"134\":1,\"143\":5,\"148\":9,\"161\":1,\"174\":1,\"204\":3,\"205\":2,\"213\":1,\"260\":2,\"261\":6,\"266\":2,\"278\":2}}],[\"thread\",{\"1\":{\"260\":2,\"261\":1}}],[\"threadlocalleakpreventionlistener\",{\"1\":{\"236\":1}}],[\"threadlocal设计\",{\"0\":{\"115\":1}}],[\"throwableholderexception\",{\"1\":{\"148\":2}}],[\"throwableholder\",{\"1\":{\"148\":11}}],[\"throwable\",{\"1\":{\"148\":14}}],[\"throw\",{\"1\":{\"143\":2,\"148\":12,\"265\":2}}],[\"throws\",{\"1\":{\"127\":1,\"143\":2,\"148\":3,\"261\":5,\"265\":1,\"266\":1}}],[\"transitionsdata<s\",{\"1\":{\"266\":1}}],[\"transactionexception\",{\"1\":{\"148\":1}}],[\"transactiondefinition\",{\"1\":{\"148\":10}}],[\"transactioncallback\",{\"1\":{\"148\":1}}],[\"transactionsystemexception\",{\"1\":{\"148\":1}}],[\"transactionstatus\",{\"1\":{\"148\":3}}],[\"transactionsupportcache\",{\"1\":{\"148\":1}}],[\"transactioninfo\",{\"1\":{\"148\":2}}],[\"transactioninterceptor\",{\"1\":{\"148\":7}}],[\"transactionusageexception\",{\"1\":{\"148\":1}}],[\"transactionmanager\",{\"1\":{\"148\":1}}],[\"transactionmanagementconfigutils\",{\"1\":{\"148\":1}}],[\"transactionattribute\",{\"1\":{\"148\":1}}],[\"transactionattributesource\",{\"1\":{\"148\":10}}],[\"transactionaspectsupport\",{\"1\":{\"148\":1}}],[\"transactionadvisor\",{\"1\":{\"148\":1}}],[\"transactionaloperator\",{\"1\":{\"148\":1}}],[\"transactional的源码分析\",{\"1\":{\"135\":1}}],[\"transactional\",{\"1\":{\"81\":1,\"148\":2}}],[\"transaction\",{\"1\":{\"148\":23},\"2\":{\"152\":1}}],[\"trace\",{\"1\":{\"161\":1}}],[\"try\",{\"1\":{\"143\":2,\"148\":4,\"168\":1,\"210\":2,\"256\":1,\"260\":6,\"261\":4,\"265\":2,\"282\":1}}],[\"true\",{\"1\":{\"47\":177,\"60\":2,\"143\":1,\"148\":2,\"168\":1,\"175\":1,\"204\":1,\"205\":1,\"210\":1,\"236\":2,\"261\":2,\"265\":1,\"278\":1,\"282\":1}}],[\"tstate\",{\"1\":{\"66\":1}}],[\"ts\",{\"1\":{\"66\":3}}],[\"tech\",{\"1\":{\"246\":1}}],[\"test\",{\"1\":{\"143\":1,\"159\":2,\"257\":4}}],[\"testcomponent\",{\"1\":{\"59\":1}}],[\"template或直接使用\",{\"1\":{\"127\":1}}],[\"term\",{\"1\":{\"47\":319}}],[\"type\",{\"1\":{\"148\":1,\"166\":1,\"168\":1,\"265\":3,\"278\":6,\"282\":2}}],[\"typeof\",{\"1\":{\"66\":1}}],[\"type=\",{\"1\":{\"59\":2,\"236\":1}}],[\"typescript\",{\"1\":{\"57\":1}}],[\"typography\",{\"1\":{\"59\":2}}],[\"title=\",{\"1\":{\"59\":1}}],[\"timeout\",{\"1\":{\"148\":2}}],[\"time\",{\"1\":{\"47\":8}}],[\"ticker\",{\"1\":{\"47\":1}}],[\"tojsonstring\",{\"1\":{\"257\":1}}],[\"tostring\",{\"1\":{\"210\":1,\"278\":2}}],[\"tomcat视角看一次http请求\",{\"1\":{\"242\":1}}],[\"tomcat处理http请求\",{\"1\":{\"241\":1}}],[\"tomcat处理一次http请求\",{\"0\":{\"241\":1}}],[\"tomcat\",{\"0\":{\"236\":1,\"321\":1},\"1\":{\"235\":2,\"236\":1},\"2\":{\"244\":1}}],[\"tomcat概述\",{\"0\":{\"235\":1}}],[\"tomcat架构\",{\"1\":{\"143\":1}}],[\"tomcat大周瑜\",{\"1\":{\"16\":1}}],[\"to\",{\"1\":{\"47\":17,\"143\":3,\"148\":9,\"161\":1,\"265\":1,\"274\":1}}],[\"todo\",{\"0\":{\"16\":1,\"17\":1}}],[\"nioeventloop的管理器\",{\"1\":{\"214\":1}}],[\"nioeventloopgroup\",{\"1\":{\"214\":1}}],[\"nioeventloop\",{\"1\":{\"214\":1}}],[\"names\",{\"1\":{\"265\":10,\"282\":1}}],[\"namespace=\",{\"1\":{\"257\":1}}],[\"namespace\",{\"1\":{\"205\":1}}],[\"namedannotation\",{\"1\":{\"265\":4}}],[\"namedcontextfactory\",{\"1\":{\"207\":1}}],[\"name=\",{\"1\":{\"236\":4}}],[\"name\",{\"1\":{\"148\":3,\"166\":1,\"167\":1,\"204\":4,\"205\":1,\"256\":4,\"265\":3,\"278\":7,\"282\":5}}],[\"null\",{\"1\":{\"133\":1,\"148\":24,\"206\":1,\"210\":1,\"256\":3,\"260\":1,\"265\":13,\"266\":7,\"278\":11,\"282\":2}}],[\"nullable\",{\"1\":{\"133\":1,\"148\":5}}],[\"need\",{\"1\":{\"274\":1}}],[\"needed\",{\"1\":{\"265\":1}}],[\"never\",{\"1\":{\"148\":1}}],[\"nested\",{\"1\":{\"148\":2}}],[\"netty\",{\"0\":{\"316\":1},\"2\":{\"218\":1}}],[\"netty之eventloop\",{\"1\":{\"216\":1}}],[\"netty线程模型\",{\"1\":{\"213\":1}}],[\"netty骨架\",{\"0\":{\"213\":1}}],[\"netflix\",{\"1\":{\"204\":3}}],[\"net\",{\"1\":{\"112\":1}}],[\"next\",{\"1\":{\"148\":1,\"256\":1,\"282\":1}}],[\"nextid\",{\"1\":{\"81\":1}}],[\"nextprops\",{\"1\":{\"60\":2}}],[\"newproxyinstance\",{\"1\":{\"260\":2,\"261\":1}}],[\"newinstance\",{\"1\":{\"210\":1,\"260\":2,\"261\":1}}],[\"newtransactionstatus\",{\"1\":{\"148\":1}}],[\"newsynchronization\",{\"1\":{\"148\":4}}],[\"newstate\",{\"1\":{\"65\":2}}],[\"new\",{\"1\":{\"65\":1,\"81\":1,\"127\":2,\"143\":3,\"148\":15,\"166\":1,\"204\":5,\"205\":1,\"206\":4,\"210\":7,\"257\":1,\"260\":3,\"261\":7,\"265\":5,\"266\":4,\"278\":7}}],[\"nomatch\",{\"1\":{\"282\":1}}],[\"nosuchmethodexception\",{\"1\":{\"210\":1}}],[\"not\",{\"1\":{\"205\":2,\"265\":2,\"278\":2}}],[\"normal\",{\"1\":{\"148\":1}}],[\"normally\",{\"1\":{\"148\":1}}],[\"non\",{\"1\":{\"148\":2}}],[\"now\",{\"1\":{\"81\":2,\"274\":1}}],[\"no\",{\"1\":{\"47\":2,\"148\":5,\"265\":1}}],[\"nginx等\",{\"1\":{\"35\":1}}],[\"由consul谈到raft\",{\"1\":{\"43\":1}}],[\"少数节点会回滚自身状态\",{\"1\":{\"42\":1}}],[\"两个client分别发送变更给两个leader\",{\"1\":{\"42\":1}}],[\"脑裂情况下的logreplication\",{\"1\":{\"42\":1}}],[\"脑裂示例\",{\"1\":{\"41\":1}}],[\"lang\",{\"1\":{\"257\":1}}],[\"last\",{\"1\":{\"204\":2}}],[\"l\",{\"1\":{\"236\":1}}],[\"link\",{\"1\":{\"278\":1}}],[\"linkedmultivaluemap<>\",{\"1\":{\"166\":1}}],[\"linkedhashmap<>\",{\"1\":{\"127\":1}}],[\"list<class<\",{\"1\":{\"265\":1}}],[\"list<context>\",{\"1\":{\"238\":1}}],[\"list<condition>>\",{\"1\":{\"166\":1}}],[\"list<t>\",{\"1\":{\"260\":3}}],[\"list<servlet>\",{\"1\":{\"240\":1}}],[\"list<wrapper>\",{\"1\":{\"239\":1}}],[\"list<host>\",{\"1\":{\"237\":1}}],[\"list<advisor>\",{\"1\":{\"148\":3}}],[\"listener\",{\"1\":{\"65\":5}}],[\"listeners\",{\"1\":{\"65\":5}}],[\"like\",{\"1\":{\"143\":1,\"265\":1}}],[\"lifecycle\",{\"1\":{\"60\":1,\"266\":1}}],[\"left\",{\"1\":{\"261\":1}}],[\"level\",{\"1\":{\"148\":2}}],[\"lead\",{\"1\":{\"143\":1,\"148\":2}}],[\"leader更新自身状态同时同步follower\",{\"1\":{\"42\":1}}],[\"leader返回response给client\",{\"1\":{\"42\":1}}],[\"leader同步变更到follower\",{\"1\":{\"42\":1}}],[\"leader同步节点状态\",{\"1\":{\"40\":1}}],[\"leader同步数据到follower\",{\"1\":{\"40\":1}}],[\"leader接收follower响应\",{\"1\":{\"40\":1}}],[\"leader\",{\"0\":{\"41\":1,\"47\":1},\"1\":{\"17\":1,\"47\":180}}],[\"let\",{\"1\":{\"65\":1,\"143\":1}}],[\"length\",{\"1\":{\"265\":2}}],[\"len\",{\"1\":{\"47\":1}}],[\"looks\",{\"1\":{\"265\":1}}],[\"load\",{\"1\":{\"278\":2},\"2\":{\"226\":1}}],[\"loadbalance\",{\"1\":{\"278\":1}}],[\"loadbalancedretryfactory\",{\"1\":{\"204\":5}}],[\"loadbalancerretryproperties\",{\"1\":{\"204\":1}}],[\"loadbalancerclient\",{\"1\":{\"204\":1}}],[\"loadbalancerautoconfiguration\",{\"1\":{\"204\":3}}],[\"loadbalancerfeignclient\",{\"1\":{\"204\":1,\"278\":3}}],[\"loadbalancer\",{\"1\":{\"204\":1,\"278\":1}}],[\"loadbeandefinitionsfromregistrars\",{\"1\":{\"174\":1}}],[\"loadbeandefinitionsfromimportedresources\",{\"1\":{\"174\":1}}],[\"loadbeandefinitionsforbeanmethod\",{\"1\":{\"174\":1}}],[\"loadbeandefinitions\",{\"1\":{\"174\":1}}],[\"loadclass\",{\"1\":{\"168\":1}}],[\"loading\",{\"1\":{\"60\":1}}],[\"local\",{\"1\":{\"274\":1}}],[\"localaddress\",{\"1\":{\"215\":2}}],[\"localregister\",{\"1\":{\"210\":2}}],[\"localhost\",{\"1\":{\"143\":1,\"210\":1,\"236\":3}}],[\"localdatetime\",{\"1\":{\"81\":2}}],[\"lockoutrealm\",{\"1\":{\"236\":1}}],[\"lock\",{\"1\":{\"47\":37}}],[\"long\",{\"1\":{\"81\":3,\"143\":1,\"257\":2,\"259\":1}}],[\"login\",{\"1\":{\"274\":1}}],[\"logs\",{\"1\":{\"236\":1}}],[\"logging\",{\"1\":{\"143\":2}}],[\"loggerfactory\",{\"1\":{\"261\":1}}],[\"logger\",{\"1\":{\"143\":9,\"148\":6,\"161\":2,\"257\":1,\"260\":1,\"261\":3}}],[\"log\",{\"0\":{\"42\":1},\"1\":{\"60\":1,\"65\":1,\"143\":1,\"155\":1,\"236\":1,\"282\":1}}],[\"无法成为leader\",{\"1\":{\"41\":1}}],[\"每个candidate只有半数票\",{\"1\":{\"41\":1}}],[\"发现是出现了死锁\",{\"1\":{\"47\":1}}],[\"发起投票\",{\"1\":{\"41\":1}}],[\"发送心跳信息\",{\"1\":{\"41\":1}}],[\"重写registerbeandefinitions方法往beandefinitionsmap中增加feign框架中所需要的beandefinition\",{\"1\":{\"278\":1}}],[\"重写registerbeandefinitions方法\",{\"1\":{\"265\":1}}],[\"重写其postprocessbeandefinitionregistry方法可以在spring的beandefinitionmap中新增我们需要的代理类的beandefinition\",{\"1\":{\"261\":1}}],[\"重写setapplicationcontext获取applicationcontext\",{\"1\":{\"180\":1}}],[\"重写setbeanfactory获取beanfactory\",{\"1\":{\"180\":1}}],[\"重写setbeanname方法\",{\"1\":{\"180\":1}}],[\"重新发起选举\",{\"1\":{\"41\":1}}],[\"重复一直到出现candidate\",{\"1\":{\"41\":1}}],[\"重置超时时间\",{\"1\":{\"41\":1}}],[\"收到vote请求的节点返回vote信息\",{\"1\":{\"41\":1}}],[\"转变为candidate的同时发送vote请求\",{\"1\":{\"41\":1}}],[\">应用\",{\"1\":{\"239\":1}}],[\">虚拟主机\",{\"1\":{\"238\":1}}],[\">集群\",{\"1\":{\"237\":1}}],[\">不存在则异常\",{\"1\":{\"179\":1}}],[\">servlet类型\",{\"1\":{\"240\":1}}],[\">spring查找参数中的对象是否存在\",{\"1\":{\"179\":1}}],[\">singletonfactories\",{\"1\":{\"161\":2}}],[\">异常\",{\"1\":{\"179\":1}}],[\">aop\",{\"1\":{\"161\":1}}],[\">aservice代理对象\",{\"1\":{\"161\":1}}],[\">aservice的代理对象\",{\"1\":{\"160\":1,\"161\":2}}],[\">aservice普通对象\",{\"1\":{\"160\":2,\"161\":3}}],[\">出现循环依赖\",{\"1\":{\"161\":1}}],[\">creatingset\",{\"1\":{\"161\":1}}],[\">candidate\",{\"1\":{\"41\":1}}],[\">earlysingletonobjects\",{\"1\":{\"161\":4}}],[\">普通对象\",{\"1\":{\"160\":1,\"161\":2}}],[\">创建bservice\",{\"1\":{\"160\":1,\"161\":2}}],[\">创建spring容器\",{\"1\":{\"143\":1}}],[\">单例池map\",{\"1\":{\"160\":2,\"161\":4}}],[\">decrease<\",{\"1\":{\"59\":1}}],[\">increase<\",{\"1\":{\"59\":1}}],[\">\",{\"1\":{\"47\":2,\"59\":2,\"148\":7,\"161\":4,\"205\":1,\"236\":17,\"257\":5,\"260\":2,\"261\":3,\"265\":2,\"278\":3}}],[\">=\",{\"1\":{\"47\":1}}],[\">候选者candidate\",{\"1\":{\"40\":1}}],[\"超时后\",{\"1\":{\"41\":1}}],[\"超时条件\",{\"1\":{\"41\":1}}],[\"超时问题\",{\"1\":{\"41\":1}}],[\"节点\",{\"1\":{\"40\":1}}],[\"节点初始状态\",{\"1\":{\"40\":1}}],[\"客户端发送数据给leader\",{\"1\":{\"40\":1}}],[\"客户端\",{\"1\":{\"40\":1}}],[\"服务提供方接口\",{\"1\":{\"210\":1}}],[\"服务提供方\",{\"1\":{\"210\":1}}],[\"服务节点可以是数据库\",{\"1\":{\"40\":1}}],[\"服务注册与发现\",{\"1\":{\"35\":1}}],[\"消息队列\",{\"1\":{\"35\":1}}],[\"kotlindelegate\",{\"1\":{\"148\":1}}],[\"kotlindetector\",{\"1\":{\"148\":1}}],[\"kong等\",{\"1\":{\"35\":1}}],[\"key\",{\"1\":{\"148\":1}}],[\"killed\",{\"1\":{\"47\":1}}],[\"kafka等\",{\"1\":{\"35\":1}}],[\"k8s\",{\"0\":{\"299\":1},\"2\":{\"32\":1}}],[\"k8s解决的问题\",{\"0\":{\"31\":1}}],[\"awesome\",{\"0\":{\"315\":1}}],[\"atall\",{\"1\":{\"282\":1}}],[\"at\",{\"1\":{\"274\":1}}],[\"attributes\",{\"1\":{\"265\":4,\"278\":11}}],[\"attribute\",{\"1\":{\"148\":1,\"278\":1}}],[\"about\",{\"1\":{\"265\":1}}],[\"abstractbeandefinition\",{\"1\":{\"265\":1,\"278\":2}}],[\"abstractimportingannotationconfiguration<statemachineconfigbuilder<s\",{\"1\":{\"265\":1}}],[\"abstractimportingannotationconfiguration<b\",{\"1\":{\"265\":1}}],[\"abstractimportingannotationconfiguration实现了importbeandefinitionregistrar接口\",{\"1\":{\"265\":1}}],[\"abstracttransactionmanagementconfiguration\",{\"1\":{\"148\":1}}],[\"abstractautoproxycreator\",{\"1\":{\"133\":1}}],[\"abstract\",{\"1\":{\"133\":1,\"143\":2,\"265\":1,\"266\":1}}],[\"access\",{\"1\":{\"236\":1}}],[\"accesslogvalve\",{\"1\":{\"236\":1}}],[\"actual\",{\"1\":{\"148\":2}}],[\"ajp\",{\"1\":{\"236\":1}}],[\"auth=\",{\"1\":{\"236\":1}}],[\"author\",{\"1\":{\"215\":3}}],[\"autowire\",{\"1\":{\"278\":1}}],[\"autowired\",{\"1\":{\"159\":2,\"205\":1}}],[\"autodeploy=\",{\"1\":{\"236\":1}}],[\"autoconfigureafter\",{\"1\":{\"204\":1,\"205\":1}}],[\"autoconfigurebefore\",{\"1\":{\"204\":2}}],[\"autoconfigurationimportselector的selectimports方法从spring\",{\"1\":{\"175\":1}}],[\"agent\",{\"1\":{\"274\":1}}],[\"agenthost\",{\"1\":{\"206\":3}}],[\"agentport\",{\"1\":{\"206\":3}}],[\"alias\",{\"1\":{\"278\":3}}],[\"allow\",{\"1\":{\"161\":1}}],[\"allowcircularreferences\",{\"1\":{\"161\":1}}],[\"always\",{\"1\":{\"148\":1}}],[\"already\",{\"1\":{\"148\":1}}],[\"arg\",{\"1\":{\"260\":2}}],[\"args\",{\"1\":{\"47\":13,\"260\":2,\"261\":2}}],[\"around\",{\"1\":{\"148\":1}}],[\"arraylist<>\",{\"1\":{\"148\":1}}],[\"artifactid>\",{\"1\":{\"282\":1}}],[\"article\",{\"1\":{\"112\":1}}],[\"arthas\",{\"0\":{\"93\":1}}],[\"annotationconfigurer<statemachineconfig<s\",{\"1\":{\"266\":2}}],[\"annotation\",{\"1\":{\"265\":2}}],[\"annotation>\",{\"1\":{\"265\":3}}],[\"annotation>>\",{\"1\":{\"265\":1}}],[\"annotationtype\",{\"1\":{\"265\":3}}],[\"annotationtypes\",{\"1\":{\"265\":3}}],[\"annotationtransactionattributesource\",{\"1\":{\"148\":1}}],[\"annotationbuilder<o>\",{\"1\":{\"265\":1,\"266\":1}}],[\"annotationattributes\",{\"1\":{\"168\":2,\"265\":8}}],[\"annotationmetadata\",{\"1\":{\"166\":1,\"265\":2,\"278\":4}}],[\"annotatedtypemetadata\",{\"1\":{\"168\":1,\"282\":1}}],[\"annotated\",{\"1\":{\"148\":1,\"265\":1}}],[\"an\",{\"1\":{\"148\":2}}],[\"and\",{\"0\":{\"84\":1},\"1\":{\"143\":1,\"148\":1,\"236\":1,\"265\":2,\"274\":1,\"278\":1,\"282\":1}}],[\"anynestedcondition\",{\"0\":{\"166\":1},\"1\":{\"166\":1}}],[\"any\",{\"1\":{\"66\":1}}],[\"antd\",{\"1\":{\"59\":1}}],[\"antonioru\",{\"1\":{\"59\":1}}],[\"asyncloadbalancerautoconfiguration\",{\"1\":{\"204\":1}}],[\"aservice普通对象\",{\"1\":{\"161\":2}}],[\"aservice的bean的生命周期\",{\"0\":{\"160\":1}}],[\"aservice\",{\"1\":{\"159\":4,\"161\":4}}],[\"asplatformtransactionmanager\",{\"1\":{\"148\":1}}],[\"aspectj\",{\"0\":{\"118\":1},\"2\":{\"120\":1}}],[\"as\",{\"1\":{\"66\":1,\"148\":2}}],[\"assign\",{\"1\":{\"66\":1}}],[\"advice\",{\"1\":{\"148\":1}}],[\"advisor\",{\"1\":{\"148\":8}}],[\"adapter\",{\"1\":{\"148\":3}}],[\"adapt\",{\"1\":{\"148\":1}}],[\"adam\",{\"1\":{\"56\":1}}],[\"addconstructorargvalue\",{\"1\":{\"265\":8}}],[\"addgenericargumentvalue\",{\"1\":{\"261\":2}}],[\"addsingletonfactory\",{\"1\":{\"161\":1}}],[\"add\",{\"1\":{\"65\":1,\"148\":2,\"166\":1,\"265\":1}}],[\"ahooks的工具库还有很多\",{\"1\":{\"60\":1}}],[\"afterpropertiesset\",{\"1\":{\"155\":2,\"261\":1,\"266\":1}}],[\"after\",{\"1\":{\"47\":2}}],[\"a\",{\"1\":{\"47\":1,\"66\":1,\"148\":8,\"274\":1,\"278\":4}}],[\"apollo\",{\"2\":{\"272\":1}}],[\"apollo配置中心搭建\",{\"1\":{\"270\":1}}],[\"apollo等\",{\"1\":{\"35\":1}}],[\"aprlifecyclelistener\",{\"1\":{\"236\":1}}],[\"apache\",{\"1\":{\"236\":10}}],[\"appbase=\",{\"1\":{\"236\":1}}],[\"applicationcontext\",{\"1\":{\"278\":1}}],[\"applicationcontextaware\",{\"0\":{\"156\":1,\"180\":1},\"1\":{\"143\":1,\"156\":1,\"180\":1,\"278\":1}}],[\"application\",{\"1\":{\"148\":2}}],[\"apply\",{\"1\":{\"148\":1,\"266\":1}}],[\"app\",{\"1\":{\"143\":1}}],[\"api\",{\"1\":{\"66\":10}}],[\"api网关\",{\"1\":{\"35\":1}}],[\"aoputils\",{\"1\":{\"148\":1}}],[\"aop的实现\",{\"0\":{\"132\":1}}],[\"aop\",{\"0\":{\"118\":1,\"131\":1},\"1\":{\"16\":1,\"17\":1,\"121\":1,\"136\":2,\"148\":1,\"160\":2,\"161\":4},\"2\":{\"120\":1,\"138\":1}}],[\"例如查询\",{\"1\":{\"246\":1}}],[\"例如对象的初始化\",{\"1\":{\"121\":1}}],[\"例如\",{\"1\":{\"66\":1}}],[\"例如rabbitmq\",{\"1\":{\"35\":1}}],[\"例如ribbon\",{\"1\":{\"35\":1}}],[\"例如tcc\",{\"1\":{\"35\":1}}],[\"例如zipkin\",{\"1\":{\"35\":1}}],[\"例如zuul\",{\"1\":{\"35\":1}}],[\"例如spring\",{\"1\":{\"35\":1}}],[\"例如eureka\",{\"1\":{\"35\":1}}],[\"微服务学习之consul与feign\",{\"1\":{\"279\":1}}],[\"微服务五大组件微服务常用组件微服务组件\",{\"1\":{\"36\":1}}],[\"微服务架构常用组件\",{\"0\":{\"35\":1}}],[\"微服务组件\",{\"0\":{\"34\":1}}],[\"pdai\",{\"1\":{\"246\":1}}],[\"pdf\",{\"1\":{\"200\":1}}],[\"pdf编辑\",{\"1\":{\"200\":1}}],[\"pp\",{\"1\":{\"215\":3}}],[\"ping\",{\"1\":{\"204\":2}}],[\"phase\",{\"1\":{\"166\":2}}],[\"ptm\",{\"1\":{\"148\":5}}],[\"platformtransactionmanager\",{\"1\":{\"148\":1}}],[\"po\",{\"1\":{\"257\":1}}],[\"port=\",{\"1\":{\"236\":3}}],[\"port\",{\"1\":{\"210\":2}}],[\"pom\",{\"1\":{\"210\":5}}],[\"pooleddatasource\",{\"1\":{\"282\":1}}],[\"pooleddatasourceavailable\",{\"1\":{\"166\":1}}],[\"pooleddatasourceavailablecondition条件返回true\",{\"1\":{\"282\":1}}],[\"pooleddatasourceavailablecondition\",{\"1\":{\"166\":1,\"282\":1}}],[\"pooleddatasourcecondition\",{\"1\":{\"166\":2}}],[\"potential\",{\"1\":{\"161\":1}}],[\"potentially\",{\"1\":{\"143\":2,\"148\":1}}],[\"postconstruct\",{\"1\":{\"155\":2}}],[\"postprocessbeanfactory\",{\"1\":{\"261\":1}}],[\"postprocessbeandefinitionregistry\",{\"1\":{\"261\":1}}],[\"postprocessbeforeinitialization\",{\"1\":{\"155\":2}}],[\"postprocessafterinitialization\",{\"1\":{\"133\":1,\"155\":2,\"156\":1}}],[\"postgresql\",{\"1\":{\"127\":1}}],[\"post\",{\"1\":{\"103\":1,\"210\":1}}],[\"pvs\",{\"1\":{\"143\":3}}],[\"put\",{\"1\":{\"134\":1,\"161\":2}}],[\"public\",{\"1\":{\"81\":1,\"127\":1,\"133\":2,\"134\":1,\"143\":3,\"148\":7,\"159\":4,\"168\":3,\"204\":11,\"205\":5,\"206\":3,\"210\":4,\"215\":2,\"257\":2,\"260\":4,\"261\":16,\"265\":3,\"266\":1,\"278\":5,\"282\":3}}],[\"p\",{\"1\":{\"103\":1,\"149\":1}}],[\"press\",{\"1\":{\"197\":1}}],[\"prefix=\",{\"1\":{\"236\":1}}],[\"prefix\",{\"1\":{\"166\":1,\"282\":2}}],[\"preparestatement\",{\"1\":{\"260\":1}}],[\"preparesynchronization\",{\"1\":{\"148\":1}}],[\"preparedstatement\",{\"1\":{\"260\":4}}],[\"preparedstatement对象和callablestatement对象\",{\"1\":{\"256\":1}}],[\"preparetransactionstatus\",{\"1\":{\"148\":1}}],[\"preparetransactioninfo\",{\"1\":{\"148\":1}}],[\"prevent\",{\"1\":{\"143\":1}}],[\"printstacktrace\",{\"1\":{\"210\":8,\"260\":3,\"261\":3}}],[\"println\",{\"1\":{\"159\":2,\"210\":3,\"256\":1}}],[\"private\",{\"1\":{\"127\":1,\"148\":1,\"159\":2,\"166\":1,\"205\":2,\"260\":2,\"261\":7,\"266\":1,\"278\":1}}],[\"primary\",{\"1\":{\"59\":2,\"204\":2,\"278\":3}}],[\"project\",{\"0\":{\"315\":1}}],[\"promise\",{\"1\":{\"215\":2}}],[\"provider\",{\"1\":{\"210\":1}}],[\"producer\",{\"1\":{\"210\":2}}],[\"protocol=\",{\"1\":{\"236\":2}}],[\"protocol\",{\"1\":{\"210\":1}}],[\"protected\",{\"1\":{\"143\":1,\"148\":1,\"161\":1,\"205\":2,\"265\":1,\"266\":1}}],[\"processimports\",{\"1\":{\"175\":1,\"183\":1}}],[\"processconfigbeandefinitions\",{\"1\":{\"174\":1}}],[\"processed\",{\"1\":{\"148\":1}}],[\"proceedwithinvocation\",{\"1\":{\"148\":2}}],[\"proceed\",{\"1\":{\"148\":2}}],[\"propagation\",{\"1\":{\"148\":7}}],[\"propertysource\",{\"1\":{\"174\":1}}],[\"propertyaccessorfactory\",{\"1\":{\"143\":1}}],[\"propertyvalues\",{\"1\":{\"143\":1}}],[\"properties中的配置datasourceproperties\",{\"1\":{\"282\":1}}],[\"propertiesfactory\",{\"1\":{\"204\":2}}],[\"properties\",{\"1\":{\"143\":2,\"205\":2,\"282\":4}}],[\"props\",{\"1\":{\"60\":2,\"127\":1}}],[\"proxymode\",{\"1\":{\"265\":11}}],[\"proxy\",{\"1\":{\"260\":4,\"261\":2,\"265\":1}}],[\"proxy或者cglib\",{\"1\":{\"259\":1}}],[\"proxytransactionmanagementconfiguration\",{\"1\":{\"148\":1}}],[\"proxybeanmethods\",{\"1\":{\"148\":1,\"204\":4,\"205\":2,\"206\":1,\"278\":1,\"282\":1}}],[\"proxy的作用与原理\",{\"1\":{\"135\":1}}],[\"proxyprocessorsupport\",{\"1\":{\"133\":1}}],[\"problem\",{\"1\":{\"47\":2}}],[\"problems\",{\"2\":{\"20\":1}}],[\"packagesearchpath\",{\"1\":{\"261\":2}}],[\"pattern=\",{\"1\":{\"236\":1}}],[\"patterns\",{\"1\":{\"54\":1}}],[\"pathmatchingresourcepatternresolver\",{\"1\":{\"261\":1}}],[\"path=\",{\"1\":{\"236\":1}}],[\"pathname=\",{\"1\":{\"236\":1}}],[\"parseboolean\",{\"1\":{\"278\":1}}],[\"parser\",{\"1\":{\"174\":2}}],[\"parse\",{\"1\":{\"166\":1,\"174\":1}}],[\"param\",{\"1\":{\"278\":1}}],[\"parametermap\",{\"1\":{\"260\":2}}],[\"parameter\",{\"1\":{\"260\":4}}],[\"parametertype=\",{\"1\":{\"257\":2}}],[\"parameters\",{\"1\":{\"143\":2}}],[\"paragraph>\",{\"1\":{\"59\":2}}],[\"password\",{\"1\":{\"256\":1}}],[\"pass\",{\"1\":{\"148\":1}}],[\"passed\",{\"1\":{\"148\":1}}],[\"png\",{\"1\":{\"53\":1,\"54\":1,\"56\":2,\"143\":1}}],[\"peers\",{\"1\":{\"47\":3}}],[\"python\",{\"1\":{\"13\":1}}],[\"一个selector对应着一个单线程执行器\",{\"1\":{\"215\":1}}],[\"一个selector\",{\"1\":{\"215\":1}}],[\"一个selector可以注册多个channel\",{\"1\":{\"215\":1}}],[\"一些好用的web网站\",{\"0\":{\"200\":1}}],[\"一些使用样例\",{\"0\":{\"167\":1}}],[\"一\",{\"1\":{\"187\":1}}],[\"一本完全免费的介绍react设计的电子书\",{\"1\":{\"54\":1}}],[\"一人一单\",{\"0\":{\"78\":1},\"1\":{\"17\":1}}],[\"一文看懂｜分布式系统之cap理论\",{\"1\":{\"3\":1}}],[\"秒杀优惠券并发不安全问题\",{\"1\":{\"81\":1}}],[\"秒杀优惠券流程\",{\"1\":{\"81\":1}}],[\"秒杀已结束\",{\"1\":{\"81\":1}}],[\"秒杀未开始\",{\"1\":{\"81\":1}}],[\"秒杀场景\",{\"0\":{\"81\":1}}],[\"秒杀场景设计整理\",{\"1\":{\"16\":1,\"17\":1}}],[\"秒杀\",{\"1\":{\"17\":1}}],[\"整合spring\",{\"0\":{\"265\":1},\"1\":{\"282\":1}}],[\"整合\",{\"1\":{\"17\":1,\"287\":1}}],[\"进度\",{\"0\":{\"17\":1}}],[\"just\",{\"1\":{\"274\":1}}],[\"juejin\",{\"1\":{\"103\":1}}],[\"json\",{\"1\":{\"257\":1}}],[\"jrememoryleakpreventionlistener\",{\"1\":{\"236\":1}}],[\"jessica\",{\"1\":{\"215\":3}}],[\"jetbrains\",{\"0\":{\"108\":1}}],[\"jndi指定的资源是否存在\",{\"1\":{\"165\":1}}],[\"joinpointidentification\",{\"1\":{\"148\":3}}],[\"jpa使用\",{\"0\":{\"227\":1},\"1\":{\"228\":1}}],[\"jpa\",{\"0\":{\"319\":1},\"1\":{\"127\":1},\"2\":{\"230\":1}}],[\"jdbc介绍\",{\"1\":{\"291\":1}}],[\"jdbc后\",{\"1\":{\"282\":1}}],[\"jdbc<\",{\"1\":{\"282\":1}}],[\"jdbc细节屏蔽\",{\"1\":{\"260\":1}}],[\"jdbc的核心组件包括以下几个部分\",{\"1\":{\"256\":1}}],[\"jdbc是什么\",{\"0\":{\"256\":1}}],[\"jdbc是在交互之前做一些操作\",{\"1\":{\"127\":1}}],[\"jdbc使用\",{\"1\":{\"125\":1}}],[\"jdbc和orm\",{\"0\":{\"125\":1}}],[\"jdbc之间的关系\",{\"0\":{\"124\":1}}],[\"jdbc\",{\"0\":{\"124\":1,\"127\":1,\"290\":1},\"1\":{\"127\":4,\"128\":1,\"256\":5,\"291\":1},\"2\":{\"130\":1,\"285\":1,\"293\":1}}],[\"jasperlistener\",{\"1\":{\"236\":1}}],[\"jaeger等\",{\"1\":{\"35\":1}}],[\"java全栈知识\",{\"1\":{\"251\":1}}],[\"java职业发展\",{\"0\":{\"186\":1}}],[\"javadoop简书spring\",{\"1\":{\"136\":1}}],[\"javascript\",{\"2\":{\"62\":1}}],[\"java学习笔记\",{\"1\":{\"18\":1}}],[\"java\",{\"0\":{\"296\":1},\"1\":{\"13\":1,\"187\":1,\"210\":14,\"246\":6,\"256\":1,\"257\":1,\"259\":1},\"2\":{\"19\":1,\"70\":1,\"73\":1,\"76\":1,\"79\":1,\"87\":1,\"90\":1,\"95\":1,\"98\":1,\"101\":1,\"104\":1,\"110\":1,\"113\":1,\"116\":1,\"119\":1,\"122\":1,\"129\":1,\"137\":1,\"141\":1,\"145\":1,\"151\":1,\"162\":1,\"170\":1,\"176\":1,\"181\":1,\"184\":1,\"189\":1,\"208\":1,\"211\":1,\"217\":1,\"221\":1,\"225\":1,\"229\":1,\"233\":1,\"243\":1,\"252\":1,\"262\":1,\"267\":1,\"271\":1,\"276\":1,\"280\":1,\"284\":1,\"288\":1,\"292\":1}}],[\"java后端开发\",{\"1\":{\"12\":1}}],[\"jvm常用参数\",{\"0\":{\"89\":1}}],[\"jvm\",{\"0\":{\"306\":1},\"1\":{\"16\":1},\"2\":{\"91\":1,\"96\":1,\"99\":1,\"102\":1}}],[\"r\",{\"1\":{\"236\":1}}],[\"rpc\",{\"1\":{\"210\":3},\"2\":{\"212\":1,\"281\":1}}],[\"ribbon自定义配置\",{\"0\":{\"223\":1},\"1\":{\"224\":1}}],[\"ribbonserverlist\",{\"1\":{\"205\":1}}],[\"ribbonserverlist中通过consulclient找到提供服务的实例列表\",{\"1\":{\"205\":1}}],[\"ribbonconsulautoconfiguration\",{\"1\":{\"205\":1}}],[\"ribbonclientconfiguration\",{\"1\":{\"204\":2}}],[\"ribbonclientspecification\",{\"1\":{\"224\":1}}],[\"ribbonclients\",{\"1\":{\"204\":1,\"205\":1}}],[\"ribbonclassesconditions\",{\"1\":{\"204\":1}}],[\"ribbon和consul的配合\",{\"0\":{\"205\":1}}],[\"ribbonloadbalancer\",{\"1\":{\"204\":1}}],[\"ribboneagerloadproperties\",{\"1\":{\"204\":1}}],[\"ribbonautoconfiguration\",{\"1\":{\"204\":3,\"205\":1}}],[\"ribbon\",{\"0\":{\"318\":1},\"1\":{\"204\":1,\"205\":3,\"278\":1},\"2\":{\"209\":1}}],[\"ribbon中重要的自动注入的类\",{\"0\":{\"204\":1}}],[\"rule\",{\"1\":{\"204\":2}}],[\"rules\",{\"1\":{\"148\":2}}],[\"runtime\",{\"1\":{\"168\":1,\"278\":1}}],[\"runtimeexception\",{\"1\":{\"143\":1,\"148\":4,\"265\":1}}],[\"run\",{\"1\":{\"155\":5,\"213\":1,\"274\":1}}],[\"rootbeandefinition\",{\"1\":{\"161\":1,\"265\":3}}],[\"rollbackon\",{\"1\":{\"148\":1}}],[\"rollback\",{\"1\":{\"148\":7}}],[\"role\",{\"1\":{\"148\":8}}],[\"roadmap\",{\"1\":{\"56\":2}}],[\"rocketmq源码分析\",{\"1\":{\"220\":1}}],[\"rocketmq\",{\"0\":{\"219\":1,\"317\":1},\"1\":{\"16\":1,\"220\":1,\"287\":1},\"2\":{\"222\":1,\"289\":1}}],[\"rand\",{\"1\":{\"47\":2}}],[\"raft实验\",{\"0\":{\"46\":1}}],[\"raft\",{\"0\":{\"301\":1},\"1\":{\"47\":7},\"2\":{\"45\":1,\"50\":1}}],[\"raft动画演示\",{\"1\":{\"43\":1}}],[\"raft介绍\",{\"0\":{\"39\":1}}],[\"raft算法\",{\"1\":{\"16\":1,\"17\":1}}],[\"rf\",{\"1\":{\"47\":108}}],[\"registration\",{\"1\":{\"265\":1}}],[\"registry\",{\"1\":{\"261\":2,\"265\":7,\"278\":7}}],[\"registerfeignclient\",{\"1\":{\"278\":1}}],[\"registerfeignclients\",{\"1\":{\"278\":1}}],[\"registerdefaultconfiguration\",{\"1\":{\"278\":1}}],[\"registeralias\",{\"1\":{\"265\":1}}],[\"registerbeandefinitions\",{\"1\":{\"265\":1,\"278\":1}}],[\"registerbeandefinition\",{\"1\":{\"261\":1,\"265\":2,\"278\":1}}],[\"registerbeandefinitionforimportedconfigurationclass\",{\"1\":{\"174\":1}}],[\"register时序\",{\"1\":{\"213\":1}}],[\"register\",{\"1\":{\"210\":1,\"215\":1}}],[\"registercustomeditor\",{\"1\":{\"143\":1}}],[\"remoteaddress\",{\"1\":{\"215\":1}}],[\"remove<\",{\"1\":{\"161\":1}}],[\"req\",{\"1\":{\"210\":2}}],[\"requires\",{\"1\":{\"148\":1}}],[\"required\",{\"1\":{\"148\":2}}],[\"requiredproperties\",{\"1\":{\"143\":1}}],[\"request\",{\"1\":{\"143\":1,\"204\":1}}],[\"requestvotereply\",{\"1\":{\"47\":2}}],[\"requestvoteargs\",{\"1\":{\"47\":2}}],[\"requestvote\",{\"1\":{\"47\":2}}],[\"realm>\",{\"1\":{\"236\":1}}],[\"realm\",{\"1\":{\"236\":2}}],[\"readobject\",{\"1\":{\"210\":1}}],[\"reader\",{\"1\":{\"174\":1,\"260\":1,\"261\":3}}],[\"reactive\",{\"1\":{\"148\":2}}],[\"reactiveadapter\",{\"1\":{\"148\":1}}],[\"reactiveadapterregistry\",{\"1\":{\"148\":2}}],[\"reactivetransactionsupport\",{\"1\":{\"148\":2}}],[\"reactivetransactionmanager\",{\"1\":{\"148\":2}}],[\"react成员开发的工具库\",{\"1\":{\"60\":1}}],[\"react工具库\",{\"0\":{\"58\":1}}],[\"react+typescript备忘录\",{\"0\":{\"57\":1}}],[\"react开发路线图\",{\"0\":{\"56\":1}}],[\"react技巧\",{\"0\":{\"55\":1}}],[\"react\",{\"0\":{\"59\":1,\"302\":1},\"1\":{\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":2,\"60\":2,\"66\":7},\"2\":{\"68\":1}}],[\"react设计\",{\"0\":{\"54\":1}}],[\"reactjs\",{\"0\":{\"53\":1},\"1\":{\"53\":1}}],[\"react学习库\",{\"0\":{\"52\":1}}],[\"references\",{\"1\":{\"161\":1}}],[\"retryautoconfiguration\",{\"1\":{\"204\":1}}],[\"retryabecachinglbclientfactory\",{\"1\":{\"204\":1}}],[\"retryfactory\",{\"1\":{\"204\":2}}],[\"retrytemplate\",{\"1\":{\"204\":3}}],[\"retry\",{\"1\":{\"204\":2}}],[\"retentionpolicy\",{\"1\":{\"168\":1,\"278\":1}}],[\"retention\",{\"1\":{\"168\":1,\"278\":1}}],[\"rethrow\",{\"1\":{\"148\":1}}],[\"retval\",{\"1\":{\"148\":13}}],[\"return\",{\"1\":{\"47\":6,\"59\":1,\"65\":2,\"66\":2,\"81\":5,\"127\":1,\"133\":2,\"134\":1,\"148\":18,\"161\":1,\"166\":1,\"168\":2,\"204\":7,\"205\":1,\"206\":3,\"210\":2,\"260\":7,\"261\":8,\"265\":5,\"278\":6,\"282\":5}}],[\"resp\",{\"1\":{\"210\":2}}],[\"restart\",{\"1\":{\"274\":1}}],[\"restclientribbonconfiguration\",{\"1\":{\"204\":1}}],[\"resttemplate\",{\"1\":{\"204\":1}}],[\"resolveclassname\",{\"1\":{\"278\":3}}],[\"resolvefactoryobjecttype\",{\"1\":{\"265\":1}}],[\"resolvabletype\",{\"1\":{\"265\":1}}],[\"resolving\",{\"1\":{\"161\":1}}],[\"resources\",{\"1\":{\"261\":3}}],[\"resourcepatternresolver\",{\"1\":{\"261\":3}}],[\"resourcename=\",{\"1\":{\"236\":1}}],[\"resourceeditor\",{\"1\":{\"143\":1}}],[\"resource\",{\"1\":{\"143\":1,\"261\":11}}],[\"resourceloaderaware\",{\"1\":{\"278\":1}}],[\"resourceloader\",{\"1\":{\"143\":3}}],[\"resume\",{\"1\":{\"148\":1}}],[\"resulttype=\",{\"1\":{\"257\":2}}],[\"resultset2obj\",{\"1\":{\"260\":1}}],[\"resultset\",{\"1\":{\"256\":7,\"260\":3,\"282\":6}}],[\"result\",{\"1\":{\"81\":6,\"148\":5,\"210\":6}}],[\"redirectport=\",{\"1\":{\"236\":2}}],[\"redisidworker\",{\"1\":{\"81\":1}}],[\"redux\",{\"1\":{\"66\":1}}],[\"recompose\",{\"1\":{\"60\":1}}],[\"receive\",{\"1\":{\"47\":17}}],[\"replace\",{\"1\":{\"261\":1}}],[\"reply\",{\"1\":{\"47\":15}}],[\"replication\",{\"0\":{\"42\":1}}],[\"dao\",{\"1\":{\"257\":3,\"261\":1}}],[\"data之datasource创建及源码分析\",{\"1\":{\"169\":1,\"283\":1}}],[\"data\",{\"0\":{\"227\":1,\"319\":1},\"1\":{\"143\":2,\"228\":1,\"278\":1,\"282\":1}}],[\"datasourceproperties\",{\"1\":{\"282\":2}}],[\"datasourcebuilder\",{\"1\":{\"282\":1}}],[\"datasource\",{\"1\":{\"127\":2,\"166\":1,\"282\":12}}],[\"datasourcemap\",{\"1\":{\"127\":2}}],[\"datasource>\",{\"1\":{\"127\":1,\"282\":2}}],[\"database\",{\"0\":{\"298\":1},\"1\":{\"236\":1,\"256\":1},\"2\":{\"23\":1,\"26\":1,\"29\":1}}],[\"dtd\",{\"1\":{\"257\":3}}],[\"driver\",{\"1\":{\"256\":1}}],[\"drivermanager\",{\"1\":{\"256\":2}}],[\"druid\",{\"1\":{\"127\":1}}],[\"didnotfind\",{\"1\":{\"282\":1}}],[\"didn\",{\"1\":{\"265\":1}}],[\"directory=\",{\"1\":{\"236\":1}}],[\"disposablebean\",{\"1\":{\"266\":3}}],[\"dispatchservlet\",{\"1\":{\"210\":1}}],[\"dispatcherservlet\",{\"1\":{\"143\":1}}],[\"dispatcherservlet的父类frameworkservlet中有spring容器\",{\"1\":{\"143\":1}}],[\"dispatch\",{\"1\":{\"143\":1}}],[\"displaydemo>\",{\"1\":{\"59\":1}}],[\"disconnect\",{\"1\":{\"47\":2}}],[\"distributed\",{\"0\":{\"294\":1},\"2\":{\"4\":1,\"7\":1,\"44\":1,\"49\":1}}],[\"dyq\",{\"1\":{\"210\":1}}],[\"dyqrpc\",{\"1\":{\"210\":1}}],[\"dyqconditiononclass\",{\"1\":{\"168\":2}}],[\"dyqcondition\",{\"1\":{\"168\":2}}],[\"don\",{\"1\":{\"265\":1,\"274\":1}}],[\"done\",{\"1\":{\"60\":1}}],[\"documented\",{\"1\":{\"278\":1}}],[\"doctype\",{\"1\":{\"257\":1}}],[\"docbase=\",{\"1\":{\"236\":1}}],[\"dostartthread方法会将singlethreadeventexecutor\",{\"1\":{\"213\":1}}],[\"dobegin\",{\"1\":{\"148\":1}}],[\"dogettransaction源码分析\",{\"0\":{\"248\":1}}],[\"dogettransaction\",{\"1\":{\"148\":1,\"248\":1}}],[\"do\",{\"1\":{\"143\":1}}],[\"dbcp\",{\"1\":{\"127\":1}}],[\"duration\",{\"1\":{\"47\":2}}],[\"dubbo源码\",{\"1\":{\"16\":1}}],[\"dleader\",{\"1\":{\"47\":1}}],[\"d\",{\"1\":{\"47\":24}}],[\"dvote\",{\"1\":{\"47\":10}}],[\"dependency>\",{\"1\":{\"282\":1}}],[\"decode404\",{\"1\":{\"278\":1}}],[\"decapitalize\",{\"1\":{\"261\":1}}],[\"dev\",{\"1\":{\"274\":1}}],[\"developer\",{\"1\":{\"56\":1}}],[\"demarcation\",{\"1\":{\"148\":1}}],[\"demo\",{\"1\":{\"60\":2}}],[\"detected\",{\"1\":{\"148\":1}}],[\"determinetransactionmanager\",{\"1\":{\"148\":1}}],[\"details\",{\"1\":{\"112\":1}}],[\"description=\",{\"1\":{\"236\":1}}],[\"description\",{\"1\":{\"215\":3}}],[\"design\",{\"0\":{\"305\":1},\"2\":{\"80\":1,\"88\":1}}],[\"destroy\",{\"1\":{\"65\":3,\"121\":1}}],[\"delete\",{\"1\":{\"65\":1}}],[\"defined\",{\"1\":{\"265\":2}}],[\"definitionholder\",{\"1\":{\"261\":2,\"265\":3}}],[\"definition\",{\"1\":{\"148\":9,\"265\":1,\"278\":4}}],[\"def\",{\"1\":{\"148\":14}}],[\"defaulthost=\",{\"1\":{\"236\":1}}],[\"defaultconfiguration\",{\"1\":{\"205\":1}}],[\"defaultfeignloadbalancedconfiguration\",{\"1\":{\"204\":1,\"278\":1}}],[\"defaulttransactionstatus\",{\"1\":{\"148\":1}}],[\"defaultstatemachinemodel<s\",{\"1\":{\"266\":2}}],[\"defaultsqlsession\",{\"1\":{\"260\":2}}],[\"defaults\",{\"1\":{\"148\":1}}],[\"default\",{\"1\":{\"60\":1,\"66\":2,\"148\":2,\"204\":3,\"205\":1,\"265\":1,\"278\":2}}],[\"defer\",{\"1\":{\"47\":4}}],[\"deepsweet\",{\"1\":{\"60\":1}}],[\"debugenabled\",{\"1\":{\"148\":7}}],[\"debug\",{\"1\":{\"47\":11,\"143\":1,\"148\":1}}],[\"more\",{\"1\":{\"265\":1}}],[\"momenta\",{\"1\":{\"12\":1}}],[\"md\",{\"1\":{\"246\":1}}],[\"mbeans\",{\"1\":{\"236\":1}}],[\"mbd\",{\"1\":{\"161\":5}}],[\"ms\",{\"1\":{\"143\":1}}],[\"mvc原理解析\",{\"0\":{\"143\":1}}],[\"mac\",{\"0\":{\"312\":1}}],[\"mapperfactorybean用于生产数据表操作接口的代理对象\",{\"1\":{\"261\":1}}],[\"mapperfactorybean<t>\",{\"1\":{\"261\":1}}],[\"mapperfactorybean\",{\"1\":{\"261\":3}}],[\"mapperscannerconfigurer\",{\"1\":{\"261\":1}}],[\"mapperinterface\",{\"1\":{\"260\":2,\"261\":7}}],[\"mapperelement\",{\"1\":{\"260\":5}}],[\"mapper>\",{\"1\":{\"257\":1}}],[\"mapper\",{\"1\":{\"257\":3}}],[\"map<integer\",{\"1\":{\"260\":1}}],[\"map<annotationmetadata\",{\"1\":{\"166\":1}}],[\"map<string\",{\"1\":{\"127\":1,\"168\":1,\"260\":2,\"278\":1}}],[\"malformedurlexception\",{\"1\":{\"210\":1}}],[\"main\",{\"1\":{\"210\":4}}],[\"match\",{\"1\":{\"282\":1}}],[\"matchifmissing\",{\"1\":{\"204\":1,\"205\":1,\"282\":1}}],[\"matching\",{\"1\":{\"148\":2}}],[\"matches\",{\"1\":{\"168\":1}}],[\"marked\",{\"1\":{\"148\":1}}],[\"mandatory\",{\"1\":{\"148\":2}}],[\"masked\",{\"1\":{\"143\":1}}],[\"master\",{\"1\":{\"56\":1}}],[\"may\",{\"1\":{\"143\":1,\"148\":2}}],[\"mini\",{\"0\":{\"322\":1}}],[\"middleware\",{\"1\":{\"257\":4}}],[\"might\",{\"1\":{\"148\":1}}],[\"millisecond\",{\"1\":{\"47\":3}}],[\"microservice\",{\"0\":{\"300\":1},\"2\":{\"37\":1}}],[\"message\",{\"1\":{\"282\":3}}],[\"memoryuserdatabasefactory\",{\"1\":{\"236\":1}}],[\"member\",{\"1\":{\"166\":2}}],[\"memberconditions\",{\"1\":{\"166\":3}}],[\"memberservice\",{\"1\":{\"167\":1}}],[\"members\",{\"1\":{\"166\":2}}],[\"metadatareader\",{\"1\":{\"261\":3}}],[\"metadata\",{\"1\":{\"166\":3,\"168\":2,\"278\":3,\"282\":1}}],[\"methodidentification\",{\"1\":{\"148\":1}}],[\"methodinvocation\",{\"1\":{\"148\":1}}],[\"method\",{\"1\":{\"148\":13,\"168\":1,\"210\":3,\"260\":7,\"261\":4}}],[\"me\",{\"1\":{\"47\":11}}],[\"multithreadeventexecutorgroup\",{\"1\":{\"214\":1}}],[\"multivaluemap<annotationmetadata\",{\"1\":{\"166\":1}}],[\"mu\",{\"1\":{\"47\":14}}],[\"my\",{\"1\":{\"256\":1}}],[\"mybatis事务\",{\"0\":{\"247\":1}}],[\"mybatis的事务如何被spring管理\",{\"0\":{\"249\":1}}],[\"mybatis的设计\",{\"0\":{\"246\":1}}],[\"mybatis的原理\",{\"0\":{\"75\":1}}],[\"mybatis实现\",{\"0\":{\"245\":1}}],[\"mybatis拦截器\",{\"0\":{\"72\":1}}],[\"mybatis\",{\"0\":{\"69\":1,\"304\":1,\"322\":1},\"1\":{\"127\":1,\"246\":14,\"249\":1,\"257\":3},\"2\":{\"71\":1,\"74\":1,\"77\":1,\"253\":1}}],[\"myterm\",{\"1\":{\"47\":17}}],[\"mysql的锁\",{\"0\":{\"28\":1}}],[\"mysql性能调优\",{\"0\":{\"25\":1}}],[\"mysql\",{\"0\":{\"297\":1},\"1\":{\"127\":1,\"256\":1},\"2\":{\"24\":1,\"27\":1,\"30\":1}}],[\"mysql导入导出文件\",{\"1\":{\"22\":1}}],[\"mysql导入导出\",{\"0\":{\"21\":1}}],[\"mysql笔记\",{\"1\":{\"16\":1}}],[\"黑马程序员\",{\"1\":{\"16\":1}}],[\"brew\",{\"1\":{\"274\":3}}],[\"break\",{\"1\":{\"265\":1}}],[\"browsing\",{\"1\":{\"197\":1}}],[\"broadcastheartbeat\",{\"1\":{\"47\":1}}],[\"broadcastrequestvote\",{\"1\":{\"47\":4}}],[\"blank\",{\"1\":{\"261\":1}}],[\"blob\",{\"1\":{\"56\":1}}],[\"blog\",{\"0\":{\"16\":1},\"1\":{\"112\":1}}],[\"balancing\",{\"1\":{\"278\":2}}],[\"balancer\",{\"2\":{\"226\":1}}],[\"background\",{\"1\":{\"274\":1}}],[\"basepackage\",{\"1\":{\"261\":5}}],[\"bussiness\",{\"0\":{\"305\":1}}],[\"bugstack\",{\"1\":{\"261\":1}}],[\"buildbeandefinition\",{\"1\":{\"265\":2}}],[\"builder\",{\"1\":{\"265\":3,\"278\":5,\"282\":1}}],[\"build\",{\"1\":{\"260\":1,\"261\":1}}],[\"buildparameter\",{\"1\":{\"260\":1}}],[\"but\",{\"1\":{\"148\":2,\"278\":2}}],[\"button>\",{\"1\":{\"59\":2}}],[\"button\",{\"1\":{\"59\":1}}],[\"bp\",{\"1\":{\"161\":3}}],[\"bservice的bean的生命周期\",{\"1\":{\"160\":1,\"161\":2}}],[\"bservice\",{\"1\":{\"159\":4}}],[\"byname\",{\"1\":{\"179\":1}}],[\"bytype\",{\"1\":{\"179\":1}}],[\"by\",{\"1\":{\"148\":2,\"278\":1}}],[\"bw\",{\"1\":{\"143\":4}}],[\"boot<\",{\"1\":{\"282\":1}}],[\"boot\",{\"0\":{\"219\":1},\"1\":{\"246\":1,\"282\":2}}],[\"bookmarks\",{\"2\":{\"202\":1}}],[\"bookmark\",{\"1\":{\"193\":1}}],[\"boolean\",{\"1\":{\"66\":1,\"81\":1,\"148\":5,\"161\":1,\"168\":1,\"261\":2,\"265\":1,\"278\":3}}],[\"bool\",{\"1\":{\"47\":2}}],[\"bonecp\",{\"1\":{\"127\":1}}],[\"btrace\",{\"0\":{\"94\":1}}],[\"b\",{\"1\":{\"66\":1,\"236\":1,\"266\":1}}],[\"bin\",{\"1\":{\"274\":1}}],[\"bind\",{\"1\":{\"215\":1,\"274\":1}}],[\"bits\",{\"1\":{\"55\":1}}],[\"bilibili\",{\"1\":{\"12\":1}}],[\"because\",{\"1\":{\"278\":2}}],[\"below\",{\"1\":{\"265\":1}}],[\"behave\",{\"1\":{\"148\":1}}],[\"behavior\",{\"1\":{\"148\":2}}],[\"being\",{\"1\":{\"148\":1}}],[\"beanclassloaderaware\",{\"1\":{\"266\":1,\"282\":1}}],[\"beandelegatingfactorybean<statemachine<s\",{\"1\":{\"266\":1}}],[\"beandelegatingfactorybean<t\",{\"1\":{\"266\":1}}],[\"beandelegatingfactorybean\",{\"1\":{\"266\":1}}],[\"beandefinitionreaderutils\",{\"1\":{\"265\":1,\"278\":1}}],[\"beandefinitionregistry\",{\"1\":{\"261\":1,\"265\":1,\"278\":2}}],[\"beandefinitionregistrypostprocessor\",{\"0\":{\"157\":1},\"1\":{\"157\":1,\"261\":1}}],[\"beandefinitionbuilder\",{\"1\":{\"265\":13,\"278\":2}}],[\"beandefinitionholder\",{\"1\":{\"261\":2,\"265\":3,\"278\":2}}],[\"beandefinition\",{\"1\":{\"148\":4,\"261\":10,\"265\":12,\"278\":5}}],[\"bean修饰的方法\",{\"1\":{\"174\":1}}],[\"beanpostprocessor\",{\"0\":{\"156\":1},\"1\":{\"155\":2,\"156\":1,\"161\":1}}],[\"bean创建过程扩展点\",{\"0\":{\"155\":1}}],[\"bean生命周期\",{\"0\":{\"154\":1}}],[\"beanfactory\",{\"1\":{\"257\":3,\"261\":4,\"278\":7}}],[\"beanfactorypostprocessor\",{\"0\":{\"157\":1},\"1\":{\"157\":1}}],[\"beanfactorytransactionattributesourceadvisor\",{\"1\":{\"148\":3}}],[\"beanfactoryaware\",{\"0\":{\"156\":1,\"180\":1},\"1\":{\"133\":1,\"156\":1,\"180\":1,\"265\":1,\"266\":1,\"278\":1}}],[\"beansexception\",{\"1\":{\"143\":1,\"261\":2}}],[\"beanwrapper\",{\"1\":{\"143\":1}}],[\"beannamegenerator\",{\"1\":{\"265\":1}}],[\"beannameaware\",{\"0\":{\"156\":1,\"180\":1},\"1\":{\"156\":1,\"180\":1,\"266\":1}}],[\"beanname\",{\"1\":{\"133\":4,\"134\":3,\"161\":7,\"261\":3,\"266\":1}}],[\"bean\",{\"1\":{\"127\":1,\"133\":5,\"134\":4,\"143\":2,\"148\":4,\"161\":4,\"204\":6,\"205\":1,\"206\":2,\"278\":1,\"282\":1}}],[\"beautiful\",{\"0\":{\"59\":1},\"1\":{\"59\":2}}],[\"before\",{\"1\":{\"47\":29}}],[\"be\",{\"1\":{\"47\":1,\"143\":1,\"148\":4,\"204\":4,\"236\":1,\"278\":1}}],[\"技能\",{\"0\":{\"13\":1}}],[\"circular\",{\"1\":{\"161\":1}}],[\"customer\",{\"1\":{\"282\":2}}],[\"custom\",{\"1\":{\"148\":1}}],[\"currentthread\",{\"1\":{\"260\":2,\"261\":1}}],[\"currenttimemillis\",{\"1\":{\"143\":2}}],[\"currentterm\",{\"1\":{\"47\":21}}],[\"creatingset\",{\"1\":{\"161\":1}}],[\"creatingset<\",{\"1\":{\"161\":1}}],[\"creating\",{\"1\":{\"148\":1}}],[\"created\",{\"1\":{\"278\":1}}],[\"createdatasource\",{\"1\":{\"127\":1,\"282\":1}}],[\"createscopedproxy\",{\"1\":{\"265\":2}}],[\"createstatement\",{\"1\":{\"256\":1,\"282\":1}}],[\"createstate\",{\"1\":{\"66\":7}}],[\"createstore\",{\"1\":{\"66\":4}}],[\"createstoreimpl\",{\"1\":{\"65\":2}}],[\"createtime\",{\"1\":{\"257\":2}}],[\"createtransactionifnecessary\",{\"1\":{\"148\":1}}],[\"createimpl\",{\"1\":{\"66\":4}}],[\"create\",{\"1\":{\"66\":2,\"148\":1}}],[\"c3p0\",{\"1\":{\"127\":1}}],[\"csdn\",{\"1\":{\"112\":1}}],[\"cnblogs\",{\"1\":{\"103\":1,\"149\":1,\"150\":1}}],[\"cn\",{\"1\":{\"54\":1,\"55\":1,\"56\":1,\"103\":1,\"200\":1,\"210\":4,\"261\":1}}],[\"chain\",{\"1\":{\"148\":1}}],[\"channel实现类以及子类\",{\"1\":{\"215\":1}}],[\"channelpromise\",{\"1\":{\"215\":2}}],[\"channelfuture\",{\"1\":{\"215\":1}}],[\"channel\",{\"0\":{\"215\":1},\"1\":{\"215\":1}}],[\"changed\",{\"1\":{\"65\":1}}],[\"changrantvote\",{\"1\":{\"47\":3}}],[\"chanheartbeat\",{\"1\":{\"47\":3}}],[\"chanwinelect\",{\"1\":{\"47\":2}}],[\"cheatsheets\",{\"1\":{\"57\":1}}],[\"checkconfigurationclasscandidate\",{\"1\":{\"174\":1}}],[\"check\",{\"1\":{\"47\":1,\"148\":4,\"265\":2}}],[\"core\",{\"1\":{\"236\":4}}],[\"collections\",{\"1\":{\"166\":1}}],[\"color=\",{\"1\":{\"59\":1}}],[\"count\",{\"1\":{\"65\":4}}],[\"counter\",{\"1\":{\"59\":5}}],[\"common\",{\"1\":{\"210\":2}}],[\"command+f3\",{\"1\":{\"193\":1}}],[\"command+option+i\",{\"1\":{\"190\":1}}],[\"committransactionafterreturning\",{\"1\":{\"148\":1}}],[\"commit\",{\"1\":{\"148\":5}}],[\"componentscans\",{\"1\":{\"174\":1}}],[\"componentscan\",{\"1\":{\"174\":1}}],[\"component\",{\"1\":{\"159\":2,\"174\":1}}],[\"compose\",{\"1\":{\"60\":2}}],[\"completetransactionafterthrowing\",{\"1\":{\"148\":1}}],[\"completed\",{\"1\":{\"143\":1}}],[\"computeifabsent\",{\"1\":{\"148\":1}}],[\"compare\",{\"0\":{\"84\":1}}],[\"com\",{\"1\":{\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"59\":1,\"60\":1,\"103\":1,\"149\":1,\"200\":1,\"204\":2,\"256\":1,\"257\":4,\"282\":1}}],[\"code\",{\"1\":{\"47\":2,\"148\":1}}],[\"conf\",{\"1\":{\"236\":1}}],[\"confident\",{\"1\":{\"47\":2}}],[\"configurer\",{\"1\":{\"266\":2}}],[\"configurablebeanfactory\",{\"1\":{\"278\":3}}],[\"configurablelistablebeanfactory\",{\"1\":{\"261\":1}}],[\"configurationproperties\",{\"1\":{\"282\":2}}],[\"configurationphase\",{\"1\":{\"166\":2}}],[\"configurationdata<s\",{\"1\":{\"266\":1}}],[\"configurations\",{\"1\":{\"204\":1}}],[\"configurationclassparser\",{\"1\":{\"183\":1}}],[\"configurationclasspostprocessor\",{\"0\":{\"174\":1}}],[\"configuration\",{\"1\":{\"148\":1,\"166\":1,\"204\":5,\"205\":2,\"206\":1,\"265\":1,\"278\":1,\"282\":1}}],[\"configclass\",{\"1\":{\"175\":1}}],[\"configclasses\",{\"1\":{\"174\":1}}],[\"config\",{\"1\":{\"35\":1,\"204\":3,\"205\":2,\"257\":1,\"261\":1}}],[\"connection\",{\"1\":{\"256\":5,\"260\":7,\"282\":4}}],[\"connectiontimeout=\",{\"1\":{\"236\":1}}],[\"connectivity\",{\"1\":{\"256\":1}}],[\"connect\",{\"1\":{\"215\":1}}],[\"conditionmessage\",{\"1\":{\"282\":2}}],[\"conditionoutcome\",{\"1\":{\"282\":3}}],[\"conditioncontext\",{\"1\":{\"168\":1,\"282\":1}}],[\"conditionclass\",{\"1\":{\"166\":2}}],[\"conditionclasses\",{\"1\":{\"166\":2}}],[\"condition\",{\"1\":{\"166\":4,\"168\":1}}],[\"condition>\",{\"1\":{\"166\":1}}],[\"conditionalonconsulenabled\",{\"1\":{\"205\":1,\"206\":1}}],[\"conditionaloncloudplatform\",{\"1\":{\"165\":1}}],[\"conditionalonclass\",{\"1\":{\"165\":1,\"204\":4,\"282\":1}}],[\"conditionalonwardeployment\",{\"1\":{\"165\":1}}],[\"conditionalonwebapplication\",{\"1\":{\"165\":1}}],[\"conditionalonresource\",{\"1\":{\"165\":1}}],[\"conditionalonproperty\",{\"1\":{\"165\":1,\"166\":1,\"204\":1,\"205\":1,\"282\":1}}],[\"conditionalonnotwebapplication\",{\"1\":{\"165\":1}}],[\"conditionalonjndi\",{\"1\":{\"165\":1}}],[\"conditionalonjava\",{\"1\":{\"165\":1}}],[\"conditionalonexpression\",{\"1\":{\"165\":1}}],[\"conditionalonmissingclass\",{\"1\":{\"165\":1,\"204\":1}}],[\"conditionalonmissingbean\",{\"1\":{\"165\":1,\"204\":6,\"205\":1,\"206\":2,\"278\":1,\"282\":1}}],[\"conditionalonsinglecandidate\",{\"1\":{\"165\":1}}],[\"conditionalonbean\",{\"1\":{\"165\":1,\"167\":2,\"204\":1,\"205\":1}}],[\"conditional\",{\"1\":{\"127\":1,\"166\":1,\"168\":1,\"204\":1}}],[\"container\",{\"1\":{\"236\":1}}],[\"containskey\",{\"1\":{\"265\":1}}],[\"contains\",{\"1\":{\"133\":1}}],[\"continue\",{\"1\":{\"148\":1,\"265\":1,\"282\":1}}],[\"contextid\",{\"1\":{\"278\":3}}],[\"contextevents\",{\"1\":{\"265\":4,\"266\":1}}],[\"context<\",{\"1\":{\"239\":1}}],[\"contexts\",{\"1\":{\"238\":1}}],[\"context\",{\"0\":{\"239\":1},\"1\":{\"143\":1,\"168\":2,\"278\":7,\"282\":2}}],[\"consumer\",{\"1\":{\"210\":2}}],[\"consul源码分析\",{\"1\":{\"275\":1}}],[\"consul和ribbon集成的原理\",{\"1\":{\"207\":1}}],[\"consulproperties\",{\"1\":{\"206\":13}}],[\"consulautoconfiguration\",{\"1\":{\"206\":1}}],[\"consul自动配置\",{\"0\":{\"206\":1}}],[\"consulserverlist\",{\"1\":{\"205\":2}}],[\"consuldiscoveryproperties\",{\"1\":{\"205\":1}}],[\"consulclient\",{\"1\":{\"205\":1,\"206\":4}}],[\"consulribbonclientconfiguration\",{\"1\":{\"205\":4}}],[\"consul\",{\"1\":{\"205\":1,\"274\":5},\"2\":{\"209\":1,\"277\":1}}],[\"consul等\",{\"1\":{\"35\":1}}],[\"console\",{\"1\":{\"60\":1,\"65\":1}}],[\"constructor\",{\"1\":{\"155\":2}}],[\"const\",{\"1\":{\"59\":2,\"60\":1,\"65\":3,\"66\":7}}],[\"close\",{\"1\":{\"210\":1,\"215\":1,\"260\":3,\"261\":1,\"282\":2}}],[\"cloud介绍\",{\"0\":{\"139\":1}}],[\"cloud\",{\"1\":{\"35\":1,\"204\":6,\"205\":1,\"207\":1,\"278\":1},\"2\":{\"142\":1}}],[\"clientfactory\",{\"1\":{\"278\":2}}],[\"client调用代码\",{\"1\":{\"210\":1}}],[\"client端\",{\"1\":{\"210\":1}}],[\"client\",{\"1\":{\"205\":4,\"278\":16}}],[\"client发送变更到leader\",{\"1\":{\"42\":1}}],[\"cleanpath\",{\"1\":{\"278\":2}}],[\"cleanuptransactioninfo\",{\"1\":{\"148\":2}}],[\"clear\",{\"1\":{\"65\":1}}],[\"clazzname\",{\"1\":{\"266\":1}}],[\"clazz\",{\"1\":{\"148\":3,\"278\":3}}],[\"classloader\",{\"1\":{\"265\":1,\"266\":1,\"282\":3}}],[\"classutils\",{\"1\":{\"261\":2,\"265\":3,\"266\":1,\"278\":3,\"282\":1}}],[\"classpath\",{\"1\":{\"261\":2,\"278\":2}}],[\"classpathxmlapplicationcontext\",{\"1\":{\"257\":1,\"261\":1}}],[\"classimpl\",{\"1\":{\"210\":4}}],[\"classnotfoundexception\",{\"1\":{\"168\":1,\"210\":1}}],[\"classname=\",{\"1\":{\"236\":8}}],[\"classname\",{\"1\":{\"166\":2,\"168\":2,\"278\":4}}],[\"class<t>\",{\"1\":{\"261\":2}}],[\"class<\",{\"1\":{\"148\":3,\"261\":2,\"265\":4,\"278\":2,\"282\":2}}],[\"class\",{\"1\":{\"127\":1,\"133\":1,\"143\":3,\"148\":3,\"159\":2,\"166\":4,\"167\":1,\"168\":3,\"204\":27,\"205\":5,\"206\":1,\"210\":6,\"256\":1,\"257\":1,\"260\":6,\"261\":9,\"265\":11,\"266\":2,\"278\":12,\"282\":6}}],[\"career\",{\"0\":{\"310\":1},\"2\":{\"188\":1}}],[\"cachingfactory\",{\"1\":{\"278\":2}}],[\"cachinglbclientfactory\",{\"1\":{\"204\":1}}],[\"cachingspringloadbalancerfactory\",{\"1\":{\"204\":4,\"278\":1}}],[\"caching\",{\"1\":{\"161\":1}}],[\"cachekey\",{\"1\":{\"133\":3,\"134\":3}}],[\"catalina\",{\"1\":{\"236\":12}}],[\"cat\",{\"1\":{\"155\":5}}],[\"catch\",{\"1\":{\"143\":2,\"148\":6,\"168\":1,\"210\":8,\"256\":1,\"260\":3,\"261\":3,\"265\":1,\"282\":1}}],[\"can\",{\"1\":{\"236\":1,\"274\":1}}],[\"cannot\",{\"1\":{\"148\":1}}],[\"canapply\",{\"1\":{\"148\":2}}],[\"candidates\",{\"1\":{\"174\":1}}],[\"candidateadvisors中会包含\",{\"1\":{\"148\":1}}],[\"candidateadvisors\",{\"1\":{\"148\":5}}],[\"candidate\",{\"1\":{\"47\":70,\"148\":8}}],[\"candidate成为leader\",{\"1\":{\"41\":1}}],[\"candidate收到投票信息\",{\"1\":{\"40\":1}}],[\"candidate发起投票\",{\"1\":{\"40\":1}}],[\"cas\",{\"1\":{\"84\":1}}],[\"case\",{\"1\":{\"47\":10,\"148\":2}}],[\"calls\",{\"1\":{\"148\":1}}],[\"callbackpreferringplatformtransactionmanager\",{\"1\":{\"148\":3}}],[\"call\",{\"1\":{\"47\":2}}],[\"cap\",{\"2\":{\"5\":1}}],[\"cap理论\",{\"0\":{\"2\":1}}],[\"c++\",{\"1\":{\"13\":1}}],[\"c++后端开发\",{\"1\":{\"12\":1}}],[\"c\",{\"1\":{\"13\":1}}],[\"127\",{\"1\":{\"274\":1}}],[\"12290061\",{\"1\":{\"103\":1}}],[\"1l\",{\"1\":{\"257\":1,\"260\":1,\"261\":1}}],[\"16735893\",{\"1\":{\"149\":1}}],[\"1\",{\"1\":{\"12\":2,\"47\":243,\"59\":2,\"65\":1,\"81\":4,\"173\":1,\"174\":23,\"175\":1,\"236\":5,\"257\":1,\"265\":2,\"274\":1,\"282\":1}}],[\"10\",{\"1\":{\"12\":2}}],[\"8443\",{\"1\":{\"236\":2}}],[\"8009\",{\"1\":{\"236\":1}}],[\"8005\",{\"1\":{\"236\":1}}],[\"8080\",{\"1\":{\"143\":1,\"210\":1,\"236\":1}}],[\"8\",{\"1\":{\"12\":1,\"174\":1,\"236\":1,\"257\":1}}],[\"美团\",{\"1\":{\"12\":1}}],[\"岗位\",{\"1\":{\"12\":1}}],[\"公司\",{\"1\":{\"12\":1}}],[\"60\",{\"1\":{\"47\":1}}],[\"6\",{\"1\":{\"11\":1,\"81\":4,\"174\":1}}],[\"南京邮电大学\",{\"1\":{\"11\":1}}],[\"南京理工大学\",{\"1\":{\"11\":1}}],[\"4k的⭐\",{\"1\":{\"53\":1,\"57\":1}}],[\"4\",{\"1\":{\"11\":1,\"12\":1,\"47\":1,\"81\":1,\"174\":7,\"175\":1}}],[\"9k⭐了\",{\"1\":{\"60\":1}}],[\"9k的⭐\",{\"1\":{\"59\":1}}],[\"9\",{\"1\":{\"11\":2}}],[\"教育经历\",{\"0\":{\"11\":1}}],[\"scope>\",{\"1\":{\"282\":1}}],[\"scopedproxyutils\",{\"1\":{\"265\":2}}],[\"scopedproxy\",{\"1\":{\"265\":4}}],[\"scopedproxymode\",{\"1\":{\"265\":5}}],[\"scoped\",{\"1\":{\"265\":1}}],[\"scopeattributes\",{\"1\":{\"265\":6}}],[\"scope\",{\"1\":{\"265\":8}}],[\"scannedgenericbeandefinition\",{\"1\":{\"261\":2}}],[\"simplemetadatareader\",{\"1\":{\"261\":1}}],[\"singlethreadeventexecutor\",{\"1\":{\"214\":1}}],[\"singlethreadeventloop\",{\"1\":{\"214\":1}}],[\"singleton\",{\"1\":{\"261\":1}}],[\"singletonfactories\",{\"1\":{\"161\":1}}],[\"singletonobjects\",{\"1\":{\"161\":1}}],[\"snapshot\",{\"1\":{\"236\":1}}],[\"sslengine=\",{\"1\":{\"236\":1}}],[\"src\",{\"1\":{\"210\":4}}],[\"smartlifecycle\",{\"1\":{\"266\":2}}],[\"smartinstantiationawarebeanpostprocessor\",{\"1\":{\"133\":1,\"161\":3}}],[\"smallpdf\",{\"1\":{\"200\":1}}],[\"swallow\",{\"1\":{\"282\":1}}],[\"swap\",{\"1\":{\"127\":1}}],[\"switch\",{\"1\":{\"47\":1}}],[\"sql执行\",{\"1\":{\"260\":1}}],[\"sql解析\",{\"1\":{\"260\":1}}],[\"sql语句\",{\"1\":{\"259\":1}}],[\"sqlquery\",{\"1\":{\"256\":2}}],[\"sqlsession\",{\"0\":{\"260\":1},\"1\":{\"246\":6,\"260\":4,\"261\":1}}],[\"sqlsessionfactorybean\",{\"1\":{\"261\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"260\":1,\"261\":1}}],[\"sqlsessionfactory\",{\"1\":{\"246\":4,\"260\":4,\"261\":20}}],[\"sqlserver\",{\"1\":{\"127\":1}}],[\"sql\",{\"1\":{\"127\":1,\"246\":11}}],[\"sqlexception\",{\"1\":{\"127\":1}}],[\"sql92\",{\"1\":{\"127\":1}}],[\"sql写法\",{\"0\":{\"69\":1}}],[\"so\",{\"1\":{\"265\":1,\"278\":2}}],[\"socketaddress\",{\"1\":{\"215\":3}}],[\"sourceclass\",{\"1\":{\"175\":2}}],[\"source\",{\"0\":{\"308\":1},\"1\":{\"282\":1},\"2\":{\"117\":1}}],[\"source多处因为没有增加依赖到classpath报红\",{\"1\":{\"112\":1}}],[\"so自身mu加锁了\",{\"1\":{\"47\":1}}],[\"sayhello\",{\"1\":{\"210\":1}}],[\"saved\",{\"1\":{\"236\":1}}],[\"save\",{\"1\":{\"81\":1}}],[\"sangka\",{\"1\":{\"54\":1}}],[\"slice\",{\"1\":{\"66\":3}}],[\"sleep\",{\"1\":{\"47\":1}}],[\"synchronization\",{\"1\":{\"148\":3}}],[\"sync\",{\"1\":{\"66\":3}}],[\"system\",{\"0\":{\"294\":1},\"1\":{\"143\":2,\"159\":2,\"210\":3,\"256\":1},\"2\":{\"4\":1,\"7\":1,\"44\":1,\"49\":1,\"80\":1}}],[\"string>\",{\"1\":{\"260\":1}}],[\"stringutils\",{\"1\":{\"206\":1,\"265\":1,\"278\":3,\"282\":1}}],[\"string\",{\"1\":{\"133\":1,\"134\":1,\"143\":1,\"148\":1,\"161\":1,\"166\":5,\"168\":3,\"205\":4,\"206\":1,\"210\":8,\"256\":2,\"260\":5,\"261\":6,\"265\":4,\"278\":8,\"282\":1}}],[\"stock\",{\"1\":{\"81\":2}}],[\"store可以在\",{\"1\":{\"66\":1}}],[\"store\",{\"1\":{\"65\":6,\"66\":6}}],[\"standard\",{\"1\":{\"148\":1}}],[\"status\",{\"1\":{\"148\":9}}],[\"static\",{\"1\":{\"148\":1,\"166\":3,\"204\":1,\"205\":2,\"266\":2,\"282\":3}}],[\"statesdata<s\",{\"1\":{\"266\":1}}],[\"stateslice\",{\"1\":{\"66\":3}}],[\"stateslice>\",{\"1\":{\"66\":1}}],[\"statement\",{\"1\":{\"256\":5,\"260\":6}}],[\"statemachine<s\",{\"1\":{\"266\":1}}],[\"statemachinemonitor\",{\"1\":{\"266\":2}}],[\"statemachinefactory\",{\"1\":{\"266\":9}}],[\"statemachinestates\",{\"1\":{\"266\":2}}],[\"statemachinetransitions\",{\"1\":{\"266\":2}}],[\"statemachinedelegatingfactorybean<s\",{\"1\":{\"266\":1}}],[\"statemachinedelegatingfactorybean\",{\"1\":{\"265\":1,\"266\":1}}],[\"statemachineconfig\",{\"1\":{\"266\":7}}],[\"statemachineconfigurationconfig\",{\"1\":{\"266\":4}}],[\"statemachineconfiguration<s\",{\"1\":{\"265\":1}}],[\"statemachineconfigurer\",{\"1\":{\"265\":2}}],[\"statemachineconfig<s\",{\"1\":{\"265\":1,\"266\":2}}],[\"statemachineconfigbuilder<s\",{\"1\":{\"265\":1,\"266\":3}}],[\"statemachine整合spring\",{\"1\":{\"265\":1}}],[\"statemachine\",{\"0\":{\"264\":1,\"320\":1},\"1\":{\"265\":2,\"266\":4},\"2\":{\"234\":1,\"268\":1}}],[\"statemachine使用\",{\"0\":{\"231\":1},\"1\":{\"232\":1}}],[\"stater源码解析及优雅的整合方式\",{\"1\":{\"220\":1}}],[\"state\",{\"1\":{\"47\":281,\"65\":7,\"66\":1,\"148\":1}}],[\"startswith\",{\"1\":{\"278\":2}}],[\"start\",{\"1\":{\"274\":2}}],[\"starter\",{\"0\":{\"323\":1},\"1\":{\"282\":2}}],[\"starter源码分析\",{\"0\":{\"219\":1}}],[\"started\",{\"1\":{\"47\":1}}],[\"starttransaction\",{\"1\":{\"148\":2}}],[\"starttime\",{\"1\":{\"143\":2}}],[\"suffix=\",{\"1\":{\"236\":1}}],[\"supported\",{\"1\":{\"282\":2}}],[\"support\",{\"1\":{\"204\":2}}],[\"super\",{\"1\":{\"166\":1}}],[\"suspend\",{\"1\":{\"148\":1}}],[\"suspendedresources\",{\"1\":{\"148\":5}}],[\"suspendedresourcesholder\",{\"1\":{\"148\":2}}],[\"suspending\",{\"1\":{\"148\":1}}],[\"subclasses\",{\"1\":{\"143\":1}}],[\"subscribe\",{\"1\":{\"65\":3,\"66\":2}}],[\"success\",{\"1\":{\"81\":2}}],[\"sudheerj\",{\"1\":{\"53\":1}}],[\"shutdown\",{\"1\":{\"236\":1}}],[\"shutdown=\",{\"1\":{\"236\":1}}],[\"shortcut\",{\"2\":{\"192\":1,\"195\":1}}],[\"shown\",{\"1\":{\"143\":1}}],[\"should\",{\"1\":{\"47\":1,\"148\":1,\"204\":4}}],[\"shardingrule\",{\"1\":{\"127\":1}}],[\"shardingruleconfigurationyamlswapper\",{\"1\":{\"127\":1}}],[\"shardingrulecondition\",{\"1\":{\"127\":1}}],[\"shardingdatasourcefactory\",{\"1\":{\"127\":1}}],[\"shardingdatasource\",{\"1\":{\"127\":1}}],[\"sharding\",{\"0\":{\"124\":1,\"127\":1},\"1\":{\"127\":1,\"291\":1},\"2\":{\"293\":1}}],[\"shardingsphere\",{\"1\":{\"17\":1}}],[\"shardingsphere源码\",{\"1\":{\"16\":1}}],[\"shim\",{\"1\":{\"66\":2}}],[\"sess\",{\"1\":{\"260\":3}}],[\"session\",{\"1\":{\"260\":3,\"261\":3}}],[\"see\",{\"1\":{\"204\":2,\"265\":1}}],[\"sensitive\",{\"1\":{\"143\":2}}],[\"send\",{\"1\":{\"210\":2}}],[\"sendheartbeat\",{\"1\":{\"47\":1}}],[\"sendinstallsnapshot\",{\"1\":{\"47\":1}}],[\"sendrequestvote\",{\"1\":{\"47\":2}}],[\"service\",{\"1\":{\"274\":1}}],[\"services\",{\"1\":{\"274\":1}}],[\"service>\",{\"1\":{\"236\":1}}],[\"serviceid\",{\"1\":{\"205\":4}}],[\"servlets\",{\"1\":{\"240\":1}}],[\"servlet容器\",{\"1\":{\"235\":1}}],[\"servlet\",{\"1\":{\"143\":2}}],[\"servletcontextresourceloader\",{\"1\":{\"143\":1}}],[\"servletconfigpropertyvalues\",{\"1\":{\"143\":1}}],[\"servletexception\",{\"1\":{\"143\":3}}],[\"servlet的ioc容器\",{\"1\":{\"143\":1}}],[\"server>\",{\"1\":{\"236\":1}}],[\"serverlist<\",{\"1\":{\"205\":1}}],[\"serverlist<server>\",{\"1\":{\"204\":1}}],[\"serverlistupdater\",{\"1\":{\"204\":3}}],[\"serverlistfilter\",{\"1\":{\"204\":2}}],[\"serverlistfilter<server>\",{\"1\":{\"204\":1}}],[\"serverlist\",{\"1\":{\"204\":2,\"205\":3}}],[\"serverintrospectorproperties\",{\"1\":{\"204\":1}}],[\"server\",{\"1\":{\"47\":6}}],[\"seckillvoucherservice\",{\"1\":{\"81\":2}}],[\"seckillvoucher\",{\"1\":{\"81\":2}}],[\"setlazyinit\",{\"1\":{\"278\":1}}],[\"setloading\",{\"1\":{\"60\":4}}],[\"setattribute\",{\"1\":{\"278\":2}}],[\"setautowiremode\",{\"1\":{\"278\":1}}],[\"setadvice\",{\"1\":{\"148\":1}}],[\"setfallbackfactory\",{\"1\":{\"278\":1}}],[\"setfallback\",{\"1\":{\"278\":1}}],[\"setdecode404\",{\"1\":{\"278\":1}}],[\"setdooutput\",{\"1\":{\"210\":1}}],[\"setpoolname\",{\"1\":{\"282\":1}}],[\"setprimary\",{\"1\":{\"278\":1}}],[\"setpropertyvalues\",{\"1\":{\"143\":1}}],[\"setpath\",{\"1\":{\"278\":1}}],[\"seturl\",{\"1\":{\"278\":1}}],[\"setuserid\",{\"1\":{\"81\":1}}],[\"setname\",{\"1\":{\"278\":1}}],[\"setobject\",{\"1\":{\"266\":1}}],[\"setorder\",{\"1\":{\"148\":1}}],[\"sethandleautostartup\",{\"1\":{\"266\":1}}],[\"setcontextid\",{\"1\":{\"278\":1}}],[\"setcontexteventsenabled\",{\"1\":{\"266\":1}}],[\"setconfigurations\",{\"1\":{\"204\":1}}],[\"setbeanname\",{\"1\":{\"266\":1}}],[\"setbeanfactory\",{\"1\":{\"266\":1,\"278\":1}}],[\"setbeanclass\",{\"1\":{\"261\":1}}],[\"setbasepackage\",{\"1\":{\"261\":1}}],[\"setresource\",{\"1\":{\"261\":2}}],[\"setrequestmethod\",{\"1\":{\"210\":1}}],[\"settype\",{\"1\":{\"278\":1}}],[\"settargettype\",{\"1\":{\"265\":1}}],[\"settings\",{\"1\":{\"148\":1}}],[\"settimeout\",{\"1\":{\"60\":1}}],[\"settransactionmanager\",{\"1\":{\"148\":1}}],[\"settransactionattributesource\",{\"1\":{\"148\":2}}],[\"setvoucherid\",{\"1\":{\"81\":1}}],[\"setid\",{\"1\":{\"81\":1}}],[\"setscope\",{\"1\":{\"261\":1,\"265\":1}}],[\"setsource\",{\"1\":{\"261\":1}}],[\"setsqlsessionfactory\",{\"1\":{\"261\":1}}],[\"setsql\",{\"1\":{\"81\":1}}],[\"setstatemachinemonitor\",{\"1\":{\"266\":1}}],[\"setstate\",{\"1\":{\"65\":5,\"66\":1}}],[\"set\",{\"0\":{\"84\":1},\"1\":{\"65\":1,\"143\":2,\"148\":2,\"205\":2,\"265\":1}}],[\"selectlist\",{\"1\":{\"260\":2}}],[\"selectone\",{\"1\":{\"260\":5,\"261\":1}}],[\"selector处理\",{\"1\":{\"66\":1}}],[\"selector\",{\"1\":{\"66\":5}}],[\"select>\",{\"1\":{\"257\":2}}],[\"select\",{\"1\":{\"47\":2,\"256\":1,\"257\":2,\"259\":1,\"282\":1}}],[\"seata等\",{\"1\":{\"35\":1}}],[\"s\",{\"1\":{\"47\":11,\"148\":2,\"236\":1,\"265\":1}}],[\"s0和s2没有办法选举出leader\",{\"1\":{\"47\":1}}],[\"s0\",{\"1\":{\"47\":65}}],[\"s1自身mu加锁\",{\"1\":{\"47\":1}}],[\"s1被disconnect之后\",{\"1\":{\"47\":1}}],[\"s1\",{\"1\":{\"47\":182}}],[\"s2\",{\"1\":{\"47\":65}}],[\"s3\",{\"1\":{\"47\":6}}],[\"specified\",{\"1\":{\"148\":1,\"278\":1}}],[\"space>\",{\"1\":{\"59\":1}}],[\"space\",{\"1\":{\"59\":1}}],[\"sparks\",{\"0\":{\"10\":1},\"1\":{\"210\":4,\"257\":4}}],[\"spring集成consul\",{\"1\":{\"275\":1}}],[\"springmybatis的事务如何被spring管理\",{\"1\":{\"249\":1}}],[\"springmvc\",{\"2\":{\"146\":1}}],[\"springmvctest\",{\"1\":{\"143\":1}}],[\"springboot2\",{\"1\":{\"283\":1}}],[\"springbootcondition\",{\"1\":{\"282\":1}}],[\"springboot集成apollo配置中心\",{\"1\":{\"270\":1}}],[\"springboot\",{\"1\":{\"220\":1,\"287\":1}}],[\"springboot与springcloud版本\",{\"1\":{\"140\":1}}],[\"springclientfactory\",{\"1\":{\"204\":7,\"205\":1,\"278\":1}}],[\"springframework\",{\"1\":{\"204\":3,\"282\":1}}],[\"spring零碎知识点\",{\"0\":{\"178\":1}}],[\"springapplication主类所在目录下所有的package\",{\"1\":{\"175\":1}}],[\"spring自动装配原理\",{\"0\":{\"172\":1}}],[\"spring条件注解jdbc使用\",{\"1\":{\"282\":1}}],[\"spring条件注解\",{\"0\":{\"164\":1}}],[\"spring扩展点的相关内容可以参考下述链接\",{\"1\":{\"261\":1}}],[\"spring扩展点\",{\"0\":{\"153\":1},\"1\":{\"261\":1}}],[\"spring事务\",{\"0\":{\"147\":1,\"148\":1}}],[\"spring中expose\",{\"1\":{\"135\":1}}],[\"spring\",{\"0\":{\"131\":1,\"139\":1,\"143\":1,\"219\":1,\"227\":1,\"231\":1,\"309\":1,\"319\":1,\"320\":1,\"323\":1},\"1\":{\"121\":4,\"127\":1,\"135\":1,\"143\":1,\"166\":1,\"169\":1,\"204\":5,\"205\":1,\"207\":1,\"228\":1,\"232\":1,\"246\":3,\"257\":1,\"261\":1,\"278\":1,\"282\":3},\"2\":{\"120\":1,\"123\":1,\"130\":1,\"138\":1,\"142\":1,\"146\":1,\"152\":1,\"163\":1,\"171\":1,\"177\":1,\"182\":1,\"185\":1,\"209\":1,\"222\":1,\"230\":1,\"234\":1,\"268\":1,\"272\":1,\"277\":1,\"281\":1,\"285\":1,\"289\":1,\"293\":1}}],[\"spring整合sharding\",{\"0\":{\"290\":1}}],[\"spring整合spring\",{\"0\":{\"264\":1}}],[\"spring整合rocketmq\",{\"0\":{\"286\":1}}],[\"spring整合jdbc\",{\"0\":{\"282\":1}}],[\"spring整合feign\",{\"0\":{\"278\":1}}],[\"spring整合consul\",{\"0\":{\"273\":1}}],[\"spring整合apollo\",{\"0\":{\"269\":1}}],[\"spring整合aop\",{\"1\":{\"17\":1}}],[\"spring整合事务源码\",{\"1\":{\"17\":1}}],[\"spring什么情况下会产生代理对象\",{\"1\":{\"15\":1}}],[\"个人介绍\",{\"0\":{\"9\":1}}],[\"幻灯片页\",{\"0\":{\"1\":1}}],[\"首页\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}";