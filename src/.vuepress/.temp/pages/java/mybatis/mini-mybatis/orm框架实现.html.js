export const data = JSON.parse("{\"key\":\"v-b5e42848\",\"path\":\"/java/mybatis/mini-mybatis/orm%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0.html\",\"title\":\"orm框架实现\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"orm框架实现\",\"isTimeLine\":true,\"date\":\"2024-03-08T00:00:00.000Z\",\"category\":[\"java\"],\"tag\":[\"orm\"],\"description\":\"实现一个简单的mybatis JDBC是什么 JDBC（Java Database Connectivity）是Java语言用于与关系型数据库进行交互的一组API（应用程序编程接口）。它允许Java应用程序通过标准的数据库访问方法与数据库进行通信，执行SQL查询、更新数据库、检索和修改数据等操作。 JDBC的核心组件包括以下几个部分： DriverManager：负责管理一组数据库驱动程序，并根据给定的数据库URL选择合适的驱动程序来建立与数据库的连接。 Connection：表示与数据库的连接，通过Connection对象可以创建Statement对象、PreparedStatement对象和CallableStatement对象，以执行SQL语句和存储过程。 Statement：用于执行静态SQL语句，可以是普通的Statement对象、带有参数的PreparedStatement对象或者可调用的CallableStatement对象。 ResultSet：表示SQL查询的结果集，通过ResultSet对象可以获取查询结果中的数据。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://sparksding.github.io/blogs/java/mybatis/mini-mybatis/orm%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"还不知道叫什么名字\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"orm框架实现\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"实现一个简单的mybatis JDBC是什么 JDBC（Java Database Connectivity）是Java语言用于与关系型数据库进行交互的一组API（应用程序编程接口）。它允许Java应用程序通过标准的数据库访问方法与数据库进行通信，执行SQL查询、更新数据库、检索和修改数据等操作。 JDBC的核心组件包括以下几个部分： DriverManager：负责管理一组数据库驱动程序，并根据给定的数据库URL选择合适的驱动程序来建立与数据库的连接。 Connection：表示与数据库的连接，通过Connection对象可以创建Statement对象、PreparedStatement对象和CallableStatement对象，以执行SQL语句和存储过程。 Statement：用于执行静态SQL语句，可以是普通的Statement对象、带有参数的PreparedStatement对象或者可调用的CallableStatement对象。 ResultSet：表示SQL查询的结果集，通过ResultSet对象可以获取查询结果中的数据。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2024-03-08T05:48:23.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"还不知道叫什么名字\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"orm\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2024-03-08T00:00:00.000Z\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2024-03-08T05:48:23.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"orm框架实现\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2024-03-08T00:00:00.000Z\\\",\\\"dateModified\\\":\\\"2024-03-08T05:48:23.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"还不知道叫什么名字\\\",\\\"url\\\":\\\"https://sparksding.github.io/blogs\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"实现一个简单的mybatis\",\"slug\":\"实现一个简单的mybatis\",\"link\":\"#实现一个简单的mybatis\",\"children\":[{\"level\":3,\"title\":\"JDBC是什么\",\"slug\":\"jdbc是什么\",\"link\":\"#jdbc是什么\",\"children\":[]},{\"level\":3,\"title\":\"ORM是什么\",\"slug\":\"orm是什么\",\"link\":\"#orm是什么\",\"children\":[]},{\"level\":3,\"title\":\"简单ORM设计\",\"slug\":\"简单orm设计\",\"link\":\"#简单orm设计\",\"children\":[]},{\"level\":3,\"title\":\"集成Spring\",\"slug\":\"集成spring\",\"link\":\"#集成spring\",\"children\":[]}]}],\"git\":{\"createdTime\":1709876903000,\"updatedTime\":1709876903000,\"contributors\":[{\"name\":\"sparksd\",\"email\":\"sparks23332@163.com\",\"commits\":1}]},\"readingTime\":{\"minutes\":5.39,\"words\":1617},\"filePathRelative\":\"java/mybatis/mini-mybatis/orm框架实现.md\",\"localizedDate\":\"2024年3月8日\",\"excerpt\":\"<h2> <strong>实现一个简单的mybatis</strong></h2>\\n<h3> <strong>JDBC是什么</strong></h3>\\n<p>JDBC（Java Database Connectivity）是Java语言用于与关系型数据库进行交互的一组API（应用程序编程接口）。它允许Java应用程序通过标准的数据库访问方法与数据库进行通信，执行SQL查询、更新数据库、检索和修改数据等操作。</p>\\n<p>JDBC的核心组件包括以下几个部分：</p>\\n<ul>\\n<li>DriverManager：负责管理一组数据库驱动程序，并根据给定的数据库URL选择合适的驱动程序来建立与数据库的连接。</li>\\n<li>Connection：表示与数据库的连接，通过Connection对象可以创建Statement对象、PreparedStatement对象和CallableStatement对象，以执行SQL语句和存储过程。</li>\\n<li>Statement：用于执行静态SQL语句，可以是普通的Statement对象、带有参数的PreparedStatement对象或者可调用的CallableStatement对象。</li>\\n<li>ResultSet：表示SQL查询的结果集，通过ResultSet对象可以获取查询结果中的数据。</li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
