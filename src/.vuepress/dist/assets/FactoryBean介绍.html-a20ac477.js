const t=JSON.parse('{"key":"v-6c99d248","path":"/java/spring/FactoryBean%E4%BB%8B%E7%BB%8D.html","title":"FactoryBean介绍","lang":"zh-CN","frontmatter":{"title":"FactoryBean介绍","isTimeLine":true,"date":"2024-03-07T00:00:00.000Z","category":["java"],"tag":["spring"],"description":"FactoryBean 是 Spring 框架中的一个接口，用于创建复杂对象或者具有特殊构建逻辑的对象。通常情况下，Spring 容器会通过调用 FactoryBean 的 getObject() 方法来获取对象实例，从而隐藏了对象的创建细节。 FactoryBean 接口定义了以下方法： getObject(): 该方法用于返回所管理的对象实例。 getObjectType(): 该方法用于返回所管理对象的类型。 isSingleton(): 该方法用于指示所管理的对象是否是单例。 isPrototype(): 该方法用于指示所管理的对象是否是原型。 destroy(): 该方法用于销毁对象。","head":[["meta",{"property":"og:url","content":"https://sparksding.github.io/blogs/blogs/java/spring/FactoryBean%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"还不知道叫什么名字"}],["meta",{"property":"og:title","content":"FactoryBean介绍"}],["meta",{"property":"og:description","content":"FactoryBean 是 Spring 框架中的一个接口，用于创建复杂对象或者具有特殊构建逻辑的对象。通常情况下，Spring 容器会通过调用 FactoryBean 的 getObject() 方法来获取对象实例，从而隐藏了对象的创建细节。 FactoryBean 接口定义了以下方法： getObject(): 该方法用于返回所管理的对象实例。 getObjectType(): 该方法用于返回所管理对象的类型。 isSingleton(): 该方法用于指示所管理的对象是否是单例。 isPrototype(): 该方法用于指示所管理的对象是否是原型。 destroy(): 该方法用于销毁对象。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-08T05:48:23.000Z"}],["meta",{"property":"article:author","content":"还不知道叫什么名字"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:published_time","content":"2024-03-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-08T05:48:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"FactoryBean介绍\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-07T00:00:00.000Z\\",\\"dateModified\\":\\"2024-03-08T05:48:23.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"还不知道叫什么名字\\",\\"url\\":\\"https://sparksding.github.io/blogs\\"}]}"]]},"headers":[],"git":{"createdTime":1709876903000,"updatedTime":1709876903000,"contributors":[{"name":"sparksd","email":"sparks23332@163.com","commits":1}]},"readingTime":{"minutes":1.19,"words":356},"filePathRelative":"java/spring/FactoryBean介绍.md","localizedDate":"2024年3月7日","excerpt":"<blockquote>\\n<p>FactoryBean 是 Spring 框架中的一个接口，用于创建复杂对象或者具有特殊构建逻辑的对象。通常情况下，Spring 容器会通过调用 FactoryBean 的 getObject() 方法来获取对象实例，从而隐藏了对象的创建细节。</p>\\n</blockquote>\\n<p>FactoryBean 接口定义了以下方法：</p>\\n<ol>\\n<li>getObject(): 该方法用于返回所管理的对象实例。</li>\\n<li>getObjectType(): 该方法用于返回所管理对象的类型。</li>\\n<li>isSingleton(): 该方法用于指示所管理的对象是否是单例。</li>\\n<li>isPrototype(): 该方法用于指示所管理的对象是否是原型。</li>\\n<li>destroy(): 该方法用于销毁对象。</li>\\n</ol>","autoDesc":true}');export{t as data};
